{"version":3,"file":"/packages/iron:controller.js","sources":["iron:controller/lib/controller.js","iron:controller/lib/controller_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,+E;AACA,a;AACA,+E;AACA,gD;AACA,yB;AACA,2C;;AAEA,+E;AACA,a;AACA,+E;AACA,0C;AACA,sB;AACA,mF;AACA,I;AACA,E;;AAEA,+E;AACA,gB;AACA,+E;AACA,iC;AACA,kB;AACA,+B;AACA,iE;AACA,4B;AACA,oC;;AAEA,iE;AACA,qD;AACA,qE;AACA,sC;;AAEA,qB;AACA,E;;AAEA,G;AACA,oE;AACA,G;AACA,4D;AACA,kB;;AAEA,kC;;AAEA,8C;AACA,0C;AACA,oD;;AAEA,U;AACA,0B;AACA,oD;AACA,K;AACA,I;AACA,E;;AAEA,G;AACA,iD;AACA,G;AACA,4D;AACA,kB;;AAEA,uD;AACA,gD;;AAEA,oD;;AAEA,2E;AACA,U;AACA,2B;AACA,6C;AACA,K;AACA,I;AACA,E;;AAEA,G;AACA,oC;AACA,G;AACA,6D;AACA,iD;AACA,E;;AAEA,+E;AACA,+B;AACA,+E;AACA,G;AACA,2B;AACA,E;AACA,uE;AACA,4C;AACA,G;AACA,sC;AACA,yC;AACA,E;;AAEA,uC;AACA,0B;AACA,c;AACA,E;;AAEA,G;AACA,yD;AACA,kD;AACA,E;AACA,uC;AACA,G;;AAEA,gE;AACA,iB;;AAEA,qB;AACA,0F;AACA,E;AACA,iE;AACA,E;;AAEA,4C;AACA,+D;AACA,E;;AAEA,2E;AACA,yB;AACA,yC;AACA,mC;AACA,c;AACA,E;;AAEA,+E;AACA,oB;AACA,+E;AACA,sC;AACA,K;AACA,8E;AACA,4C;AACA,I;AACA,a;AACA,8B;AACA,8B;AACA,2C;AACA,gD;AACA,Q;AACA,Q;AACA,K;AACA,iC;AACA,sE;AACA,wF;AACA,I;;AAEA,K;AACA,4E;AACA,Q;AACA,K;AACA,iD;AACA,uC;AACA,uC;AACA,uC;AACA,K;AACA,C;AACA,+E;AACA,iB;AACA,+E;AACA,6B;;;;;;;;;;;;;;;;;;;AC9JA,2C;;AAEA,0D;AACA,yC;AACA,oD;AACA,E;;AAEA,mB;AACA,0C;AACA,oD;AACA,E","sourcesContent":["/*****************************************************************************/\n/* Imports */\n/*****************************************************************************/\nvar debug = Iron.utils.debug('iron:controller');\nvar Layout = Iron.Layout;\nvar DynamicTemplate = Iron.DynamicTemplate;\n\n/*****************************************************************************/\n/* Private */\n/*****************************************************************************/\nvar bindData = function (value, thisArg) {\n  return function () {\n    return (typeof value === 'function') ? value.apply(thisArg, arguments) : value;\n  };\n};\n\n/*****************************************************************************/\n/* Controller */\n/*****************************************************************************/\nController = function (options) {\n  var self = this;\n  this.options = options || {};\n  this._layout = this.options.layout || new Layout(this.options);\n  this._isController = true;\n  this._layout._setLookupHost(this);\n\n  // grab the event map from the Controller constructor which was\n  // set if the user does MyController.events({...});\n  var eventMap = Controller._collectEventMaps.call(this.constructor);\n  this._layout.events(eventMap, this);\n\n  this.init(options);\n};\n\n/**\n * Set or get the layout's template and optionally its data context.\n */\nController.prototype.layout = function (template, options) {\n  var self = this;\n\n  this._layout.template(template);\n\n  // check whether options has a data property\n  if (options && (_.has(options, 'data')))\n    this._layout.data(bindData(options.data, this));\n\n  return {\n    data: function (val) {\n      return self._layout.data(bindData(val, self));\n    }\n  };\n};\n\n/**\n * Render a template into a region of the layout.\n */\nController.prototype.render = function (template, options) {\n  var self = this;\n\n  if (options && (typeof options.data !== 'undefined'))\n    options.data = bindData(options.data, this);\n\n  var tmpl = this._layout.render(template, options);\n\n  // allow caller to do: this.render('MyTemplate').data(function () {...});\n  return {\n    data: function (func) {\n      return tmpl.data(bindData(func, self));\n    }\n  };\n};\n\n/**\n * Begin recording rendered regions.\n */\nController.prototype.beginRendering = function (onComplete) {\n  return this._layout.beginRendering(onComplete);\n};\n\n/*****************************************************************************/\n/* Controller Static Methods */\n/*****************************************************************************/\n/**\n * Inherit from Controller.\n *\n * Note: The inheritance function in Meteor._inherits is broken. Static\n * properties on functions don't get copied.\n */\nController.extend = function (props) {\n  return Iron.utils.extend(this, props); \n};\n\nController.events = function (events) {\n  this._eventMap = events;\n  return this;\n};\n\n/**\n * Returns a single event map merged from super to child.\n * Called from the constructor function like this:\n *\n * this.constructor._collectEventMaps()\n */\n\nvar mergeStaticInheritedObjectProperty = function (ctor, prop) {\n  var merge = {};\n\n  if (ctor.__super__)\n    _.extend(merge, mergeStaticInheritedObjectProperty(ctor.__super__.constructor, prop));\n  \n  return _.has(ctor, prop) ? _.extend(merge, ctor[prop]) : merge;\n};\n\nController._collectEventMaps = function () {\n  return mergeStaticInheritedObjectProperty(this, '_eventMap');\n};\n\n// NOTE: helpers are not inherited from one controller to another, for now.\nController._helpers = {};\nController.helpers = function (helpers) {\n  _.extend(this._helpers, helpers);\n  return this;\n};\n\n/*****************************************************************************/\n/* Global Helpers */\n/*****************************************************************************/\nif (typeof Template !== 'undefined') {\n  /**\n   * Returns the nearest controller for a template instance. You can call this\n   * function from inside a template helper.\n   *\n   * Example:\n   * Template.MyPage.helpers({\n   *   greeting: function () {\n   *    var controller = Iron.controller();\n   *    return controller.state.get('greeting');\n   *   }\n   * });\n   */\n  Iron.controller = function () {\n    //XXX establishes a reactive dependency which causes helper to run\n    return DynamicTemplate.findLookupHostWithProperty(Blaze.getView(), '_isController');\n  };\n\n  /**\n   * Find a lookup host with a state key and return it reactively if we have\n   * it.\n   */\n  Template.registerHelper('get', function (key) {\n    var controller = Iron.controller();\n    if (controller && controller.state)\n      return controller.state.get(key);\n  });\n}\n/*****************************************************************************/\n/* Namespacing */\n/*****************************************************************************/\nIron.Controller = Controller;\n","Controller.prototype.init = function () {};\n\n// futures somehow. but not clear exactly what this means.\nController.prototype.wait = function () {\n  throw new Error('Not implemented on server yet.');\n};\n\n// is future ready?\nController.prototype.ready = function () {\n  throw new Error('Not implemented on server yet.');\n};\n"]}