{"version":3,"file":"/packages/iron:layout.js","sources":["iron:layout/version_conflict_errors.js","iron:layout/layout.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,gB;;AAEA,qC;AACA,oB;AACA,gI;AACA,+F;AACA,sB;AACA,sE;AACA,S;AACA,wC;AACA,0C;AACA,oD;AACA,kD;AACA,O;AACA,0D;AACA,iC;AACA,yC;AACA,S;AACA,K;AACA,C;;AAEA,4E;AACA,+D;AACA,sC;AACA,c;AACA,6I;AACA,I;AACA,C;;AAEA,wB;AACA,6G;AACA,C;;;;;;;;;;;;;;;;;;;AC/BA,+E;AACA,a;AACA,+E;AACA,2C;AACA,mC;;AAEA,+E;AACA,a;AACA,+E;AACA,G;AACA,0D;AACA,G;AACA,mC;AACA,gB;AACA,oC;AACA,sC;AACA,Q;AACA,6B;AACA,G;;AAEA,c;AACA,E;;AAEA,+E;AACA,Y;AACA,+E;;AAEA,G;AACA,6C;AACA,E;AACA,+E;AACA,8E;AACA,6E;AACA,kE;AACA,G;AACA,6B;AACA,kB;;AAEA,sD;;AAEA,0B;AACA,4B;AACA,qB;AACA,yB;AACA,gD;;AAEA,8C;AACA,uB;AACA,sB;AACA,iC;AACA,E;;AAEA,G;AACA,kE;AACA,G;AACA,gD;;AAEA,G;AACA,2E;AACA,yC;AACA,G;AACA,uC;;AAEA,G;AACA,gF;AACA,uB;AACA,E;AACA,sC;AACA,E;AACA,K;AACA,8B;AACA,gC;AACA,O;AACA,O;AACA,O;AACA,K;AACA,G;AACA,oD;AACA,2C;AACA,E;;AAEA,G;AACA,uD;AACA,G;AACA,+C;AACA,oD;AACA,8B;AACA,K;;AAEA,qB;AACA,E;;AAEA,G;AACA,iC;AACA,G;AACA,wD;AACA,mC;AACA,0B;;AAEA,gE;AACA,8D;;AAEA,4C;AACA,4C;;AAEA,wE;AACA,sB;AACA,oC;;AAEA,oD;AACA,qC;;AAEA,4E;AACA,0C;AACA,qC;;AAEA,yB;AACA,E;;AAEA,G;AACA,mE;AACA,G;AACA,0C;AACA,2C;AACA,iC;AACA,E;;AAEA,G;AACA,mC;AACA,G;AACA,2C;AACA,+B;AACA,E;;AAEA,G;AACA,wD;AACA,G;AACA,4C;AACA,2C;;AAEA,+D;AACA,uB;AACA,uC;;AAEA,gB;AACA,c;AACA,E;;AAEA,G;AACA,qB;AACA,G;AACA,yC;AACA,oD;AACA,mC;AACA,K;;AAEA,gB;AACA,c;AACA,E;;AAEA,G;AACA,mC;AACA,G;AACA,yD;AACA,kB;AACA,uC;AACA,uC;;AAEA,yD;AACA,qD;AACA,sC;AACA,K;;AAEA,oD;;AAEA,4B;AACA,mF;AACA,6B;AACA,E;;AAEA,G;AACA,qD;AACA,G;AACA,2D;AACA,6B;AACA,W;AACA,uC;AACA,E;;AAEA,G;AACA,uE;AACA,4E;AACA,yB;AACA,G;AACA,kD;AACA,6E;AACA,0E;AACA,W;AACA,oB;AACA,2B;AACA,iB;AACA,oD;AACA,+B;AACA,iC;AACA,E;;AAEA,G;AACA,oC;AACA,G;AACA,O;AACA,G;AACA,sB;AACA,uB;AACA,uB;AACA,I;AACA,mB;AACA,4C;AACA,0E;AACA,qB;AACA,kB;AACA,K;AACA,G;AACA,E;;AAEA,G;AACA,6E;AACA,c;AACA,G;AACA,2D;AACA,gG;AACA,E;;AAEA,G;AACA,yC;AACA,G;AACA,oE;AACA,kB;AACA,+C;AACA,yC;AACA,sB;;AAEA,yE;AACA,4B;AACA,kD;AACA,oC;AACA,sB;AACA,yB;AACA,qC;AACA,oC;AACA,wC;AACA,e;AACA,qE;AACA,O;AACA,K;;AAEA,c;AACA,E;;AAEA,uF;AACA,oB;AACA,4C;AACA,W;;AAEA,0C;AACA,oB;AACA,+E;AACA,kD;AACA,qF;AACA,G;AACA,E;;AAEA,+E;AACA,gB;AACA,+E;AACA,sC;AACA,K;AACA,oD;AACA,I;AACA,c;AACA,e;AACA,6B;AACA,gB;AACA,I;AACA,iB;AACA,qB;AACA,kB;AACA,I;AACA,gB;AACA,8B;AACA,iB;AACA,K;AACA,gE;AACA,uC;;AAEA,gB;AACA,sE;;AAEA,2E;AACA,8D;AACA,e;AACA,wB;;AAEA,8B;AACA,uB;AACA,qC;AACA,8B;AACA,K;;AAEA,4E;AACA,sC;;AAEA,+B;AACA,4C;;AAEA,8D;AACA,4C;AACA,kC;AACA,gC;;AAEA,sC;AACA,oC;AACA,M;;AAEA,K;AACA,+E;AACA,0B;AACA,I;AACA,c;AACA,I;AACA,8B;AACA,oB;AACA,qB;AACA,I;AACA,4E;AACA,I;AACA,4E;AACA,iD;AACA,I;AACA,yE;AACA,uD;AACA,sH;AACA,I;AACA,K;AACA,0E;AACA,uC;;AAEA,gB;AACA,2E;;AAEA,mE;AACA,4C;AACA,oC;AACA,4B;AACA,e;;AAEA,4B;AACA,uB;AACA,iC;AACA,8B;AACA,Q;AACA,mF;;AAEA,qE;AACA,wD;;AAEA,uE;AACA,6B;AACA,wC;;AAEA,qD;AACA,a;AACA,uC;;AAEA,gF;AACA,0D;AACA,gB;AACA,M;;AAEA,K;AACA,6D;AACA,I;AACA,a;AACA,iC;AACA,iB;AACA,+B;AACA,kB;AACA,e;AACA,K;AACA,oD;AACA,kD;;AAEA,gB;AACA,0E;AACA,I;AACA,4B;AACA,6E;AACA,I;AACA,+C;AACA,K;;AAEA,K;AACA,yD;AACA,I;AACA,a;AACA,uC;AACA,8B;AACA,I;AACA,gC;AACA,0B;AACA,uB;AACA,iB;AACA,K;AACA,kE;AACA,+C;;AAEA,6B;AACA,yD;AACA,iD;AACA,wC;AACA,O;;AAEA,2B;AACA,M;AACA,C;AACA,+E;AACA,iB;AACA,+E;AACA,qB","sourcesContent":["var errors = [];\n\nif (Package['cmather:iron-layout']) {\n  errors.push(\"\\n\\n\\\n    The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");\n}\n\n// If the user still has blaze-layout throw  an error. Let's get rid of that\n// package so it's not lingering around with all its nastiness.\nif (Package['cmather:blaze-layout']) {\n  errors.push(\n    \"The blaze-layout package has been replaced by iron-layout. Please remove the package like this:\\n> meteor remove cmather:blaze-layout\\n\"\n  );\n}\n\nif (errors.length > 0) {\n  throw new Error(\"Sorry! Looks like there's a few errors related to iron:layout\\n\\n\" + errors.join(\"\\n\\n\"));\n}\n","/*****************************************************************************/\n/* Imports */\n/*****************************************************************************/\nvar DynamicTemplate = Iron.DynamicTemplate;\nvar inherits = Iron.utils.inherits;\n\n/*****************************************************************************/\n/* Helpers */\n/*****************************************************************************/\n/**\n * Find the first Layout in the rendered parent hierarchy.\n */\nfindFirstLayout = function (view) {\n  while (view) {\n    if (view.name === 'Iron.Layout')\n      return view.__dynamicTemplate__;\n    else\n      view = view.parentView;\n  }\n\n  return null;\n};\n\n/*****************************************************************************/\n/* Layout */\n/*****************************************************************************/\n\n/**\n * Dynamically render templates into regions.\n *\n * Layout inherits from Iron.DynamicTemplate and provides the ability to create\n * regions that a user can render templates or content blocks into. The layout\n * and each region is an instance of DynamicTemplate so the template and data\n * contexts are completely dynamic and programmable in javascript.\n */\nLayout = function (options) {\n  var self = this;\n\n  Layout.__super__.constructor.apply(this, arguments);\n\n  options = options || {};\n  this.name = 'Iron.Layout';\n  this._regions = {};\n  this._regionHooks = {};\n  this.defaultTemplate('__IronDefaultLayout__');\n\n  // if there's block content then render that\n  // to the main region\n  if (options.content)\n    this.render(options.content);\n};\n\n/**\n * The default region for a layout where the main content will go.\n */\nDEFAULT_REGION = Layout.DEFAULT_REGION = 'main';\n\n/**\n * Inherits from Iron.DynamicTemplate which gives us the ability to set the\n * template and data context dynamically.\n */\ninherits(Layout, Iron.DynamicTemplate);\n\n/**\n * Return the DynamicTemplate instance for a given region. If the region doesn't\n * exist it is created.\n *\n * The regions object looks like this:\n *\n *  {\n *    \"main\": DynamicTemplate,\n *    \"footer\": DynamicTemplate,\n *    .\n *    .\n *    .\n *  }\n */\nLayout.prototype.region = function (name, options) {\n  return this._ensureRegion(name, options);\n};\n\n/**\n * Destroy all child regions and reset the regions map.\n */\nLayout.prototype.destroyRegions = function () {\n  _.each(this._regions, function (dynamicTemplate) {\n    dynamicTemplate.destroy();\n  });\n\n  this._regions = {};\n};\n\n/**\n * Set the template for a region.\n */\nLayout.prototype.render = function (template, options) {\n  // having options is usually good\n  options = options || {};\n\n  // let the user specify the region to render the template into\n  var region = options.to || options.region || DEFAULT_REGION;\n\n  // get the DynamicTemplate for this region\n  var dynamicTemplate = this.region(region);\n\n  // if we're in a rendering transaction, track that we've rendered this\n  // particular region\n  this._trackRenderedRegion(region);\n\n  // set the template value for the dynamic template\n  dynamicTemplate.template(template);\n\n  // set the data for the region. If options.data is not defined, this will \n  // clear the data, which is what we want\n  dynamicTemplate.data(options.data);\n\n  return dynamicTemplate;\n};\n\n/**\n * Returns true if the given region is defined and false otherwise.\n */\nLayout.prototype.has = function (region) {\n  region = region || Layout.DEFAULT_REGION;\n  return !!this._regions[region];\n};\n\n/**\n * Returns an array of region keys.\n */\nLayout.prototype.regionKeys = function () {\n  return _.keys(this._regions);\n};\n\n/**\n * Clear a given region or the \"main\" region by default.\n */\nLayout.prototype.clear = function (region) {\n  region = region || Layout.DEFAULT_REGION;\n\n  // we don't want to create a region if it didn't exist before\n  if (this.has(region))\n    this.region(region).template(null);\n\n  // chain it up\n  return this;\n};\n\n/**\n * Clear all regions.\n */\nLayout.prototype.clearAll = function () {\n  _.each(this._regions, function (dynamicTemplate) {\n    dynamicTemplate.template(null);\n  });\n\n  // chain it up\n  return this;\n};\n\n/**\n * Start tracking rendered regions.\n */\nLayout.prototype.beginRendering = function (onComplete) {\n  var self = this;\n  if (this._finishRenderingTransaction)\n    this._finishRenderingTransaction();\n\n  this._finishRenderingTransaction = _.once(function () {\n    var regions = self._endRendering({flush: false});\n    onComplete && onComplete(regions);\n  });\n\n  Deps.afterFlush(this._finishRenderingTransaction);\n\n  if (this._renderedRegions)\n    throw new Error(\"You called beginRendering again before calling endRendering\");\n  this._renderedRegions = {};\n};\n\n/**\n * Track a rendered region if we're in a transaction.\n */\nLayout.prototype._trackRenderedRegion = function (region) {\n  if (!this._renderedRegions)\n    return;\n  this._renderedRegions[region] = true;\n};\n\n/**\n * Stop a rendering transaction and retrieve the rendered regions. This\n * shouldn't be called directly. Instead, pass an onComplete callback to the\n * beginRendering method.\n */\nLayout.prototype._endRendering = function (opts) {\n  // we flush here to ensure all of the {{#contentFor}} inclusions have had a\n  // chance to render from our templates, otherwise we'll never know about\n  // them. \n  opts = opts || {};\n  if (opts.flush !== false)\n    Deps.flush();\n  var renderedRegions = this._renderedRegions || {};\n  this._renderedRegions = null;\n  return _.keys(renderedRegions);\n};\n\n/**\n * View lifecycle hooks for regions.\n */\n_.each(\n  [\n    'onRegionCreated',\n    'onRegionRendered',\n    'onRegionDestroyed'\n  ],\n  function (hook) {\n    Layout.prototype[hook] = function (cb) {\n      var hooks = this._regionHooks[hook] = this._regionHooks[hook] || [];\n      hooks.push(cb);\n      return this;\n    }\n  }\n);\n\n/**\n * Returns the DynamicTemplate for a given region or creates it if it doesn't\n * exists yet.\n */\nLayout.prototype._ensureRegion = function (name, options) {\n return this._regions[name] = this._regions[name] || this._createDynamicTemplate(name, options);\n};\n\n/**\n * Create a new DynamicTemplate instance.\n */\nLayout.prototype._createDynamicTemplate = function (name, options) {\n  var self = this;\n  var tmpl = new Iron.DynamicTemplate(options);\n  var capitalize = Iron.utils.capitalize;\n  tmpl._region = name;\n\n  _.each(['viewCreated', 'viewReady', 'viewDestroyed'], function (hook) {\n    hook = capitalize(hook);\n    tmpl['on' + hook](function (dynamicTemplate) {\n      // \"this\" is the view instance\n      var view = this;\n      var regionHook = ({\n        viewCreated: \"regionCreated\",\n        viewReady: \"regionRendered\",\n        viewDestroyed: \"regionDestroyed\"\n      })[hook];\n      self._runRegionHooks('on' + regionHook, view, dynamicTemplate);\n    });\n  });\n\n  return tmpl;\n};\n\nLayout.prototype._runRegionHooks = function (name, regionView, regionDynamicTemplate) {\n  var layout = this;\n  var hooks = this._regionHooks[name] || [];\n  var hook;\n\n  for (var i = 0; i < hooks.length; i++) {\n    hook = hooks[i];\n    // keep the \"thisArg\" pointing to the view, but make the first parameter to\n    // the callback teh dynamic template instance.\n    hook.call(regionView, regionDynamicTemplate.region, regionDynamicTemplate, this);\n  }\n};\n\n/*****************************************************************************/\n/* UI Helpers */\n/*****************************************************************************/\nif (typeof Template !== 'undefined') {\n  /**\n   * Create a region in the closest layout ancestor.\n   *\n   * Examples:\n   *    <aside>\n   *      {{> yield \"aside\"}}\n   *    </aside>\n   *\n   *    <article>\n   *      {{> yield}}\n   *    </article>\n   *\n   *    <footer>\n   *      {{> yield \"footer\"}}\n   *    </footer>\n   */\n  UI.registerHelper('yield', new Template('yield', function () {\n    var layout = findFirstLayout(this);\n\n    if (!layout)\n      throw new Error(\"No Iron.Layout found so you can't use yield!\");\n\n    // Example options: {{> yield region=\"footer\"}} or {{> yield \"footer\"}}\n    var options = DynamicTemplate.getInclusionArguments(this);\n    var region;\n    var dynamicTemplate;\n\n    if (_.isString(options)) {\n      region = options;\n    } else if (_.isObject(options)) {\n      region = options.region;\n    }\n\n    // if there's no region specified we'll assume you meant the main region\n    region = region || DEFAULT_REGION;\n\n    // get or create the region\n    dynamicTemplate = layout.region(region);\n\n    // if the dynamicTemplate had already been inserted, let's\n    // destroy it before creating a new one.\n    if (dynamicTemplate.isCreated)\n      dynamicTemplate.destroy();\n\n    // now return a newly created view\n    return dynamicTemplate.create();\n  }));\n\n  /**\n   * Render a template into a region in the closest layout ancestor from within\n   * your template markup.\n   *\n   * Examples:\n   *\n   *  {{#contentFor \"footer\"}}\n   *    Footer stuff\n   *  {{/contentFor}}\n   *\n   *  {{> contentFor region=\"footer\" template=\"SomeTemplate\" data=someData}}\n   *\n   * Note: The helper is a UI.Component object instead of a function so that\n   * Meteor UI does not create a Deps.Dependency.\n   *\n   * XXX what happens if the parent that calls contentFor gets destroyed?\n   * XXX the layout.region should be reset to be empty?\n   * XXX but how do we control order of setting the region? what if it gets destroyed but then something else sets it?\n   *\n   */\n  UI.registerHelper('contentFor', new Template('contentFor', function () {\n    var layout = findFirstLayout(this);\n\n    if (!layout)\n      throw new Error(\"No Iron.Layout found so you can't use contentFor!\");\n\n    var options = DynamicTemplate.getInclusionArguments(this) || {}\n    var content = this.templateContentBlock;\n    var template = options.template;\n    var data = options.data;\n    var region;\n\n    if (_.isString(options))\n      region = options;\n    else if (_.isObject(options))\n      region = options.region;\n    else\n      throw new Error(\"Which region is this contentFor block supposed to be for?\");\n\n    // set the region to a provided template or the content directly.\n    layout.region(region).template(template || content);\n\n    // tell the layout to track this as a rendered region if we're in a\n    // rendering transaction.\n    layout._trackRenderedRegion(region);\n\n    // if we have some data then set the data context\n    if (data)\n      layout.region(region).data(data);\n\n    // just render nothing into this area of the page since the dynamic template\n    // will do the actual rendering into the right region.\n    return null;\n  }));\n\n  /**\n   * Check to see if a given region is currently rendered to.\n   *\n   * Example:\n   *    {{#if hasRegion 'aside'}}\n   *      <aside>\n   *        {{> yield \"aside\"}}\n   *      </aside>\n   *    {{/if}}\n   */\n  UI.registerHelper('hasRegion', function (region) {\n    var layout = findFirstLayout(Blaze.getView());\n\n    if (!layout)\n      throw new Error(\"No Iron.Layout found so you can't use hasRegion!\");\n    \n    if (!_.isString(region))\n      throw new Error(\"You need to provide an region argument to hasRegion\");\n    \n    return !! layout.region(region).template();\n  });\n\n  /**\n   * Let people use Layout directly from their templates!\n   *\n   * Example:\n   *  {{#Layout template=\"MyTemplate\"}}\n   *    Main content goes here\n   *\n   *    {{#contentFor \"footer\"}}\n   *      footer goes here\n   *    {{/contentFor}}\n   *  {{/Layout}}\n   */\n  UI.registerHelper('Layout', new Template('layout', function () {\n    var args = Iron.DynamicTemplate.args(this);\n\n    var layout = new Layout({\n      template: function () { return args('template'); },\n      data: function () { return args('data'); },\n      content: this.templateContentBlock\n    });\n\n    return layout.create();\n  }));\n}\n/*****************************************************************************/\n/* Namespacing */\n/*****************************************************************************/\nIron.Layout = Layout;\n"]}