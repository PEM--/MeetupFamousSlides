//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var famous;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/functionPrototypeBind.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
if (!Function.prototype.bind) {                                                                                        // 1
    Function.prototype.bind = function (oThis) {                                                                       // 2
        if (typeof this !== "function") {                                                                              // 3
            // closest thing possible to the ECMAScript 5 internal IsCallable function                                 // 4
            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");               // 5
        }                                                                                                              // 6
                                                                                                                       // 7
        var aArgs = Array.prototype.slice.call(arguments, 1),                                                          // 8
        fToBind = this,                                                                                                // 9
        fNOP = function () {},                                                                                         // 10
        fBound = function () {                                                                                         // 11
            return fToBind.apply(this instanceof fNOP && oThis                                                         // 12
                ? this                                                                                                 // 13
                : oThis,                                                                                               // 14
                aArgs.concat(Array.prototype.slice.call(arguments)));                                                  // 15
        };                                                                                                             // 16
                                                                                                                       // 17
        fNOP.prototype = this.prototype;                                                                               // 18
        fBound.prototype = new fNOP();                                                                                 // 19
                                                                                                                       // 20
        return fBound;                                                                                                 // 21
    };                                                                                                                 // 22
}                                                                                                                      // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/classList.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
/*                                                                                                                     // 2
 * classList.js: Cross-browser full element.classList implementation.                                                  // 3
 * 2011-06-15                                                                                                          // 4
 *                                                                                                                     // 5
 * By Eli Grey, http://eligrey.com                                                                                     // 6
 * Public Domain.                                                                                                      // 7
 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                             // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
/*global self, document, DOMException */                                                                               // 11
                                                                                                                       // 12
/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js*/                                     // 13
                                                                                                                       // 14
if (typeof document !== "undefined" && !("classList" in document.createElement("a"))) {                                // 15
                                                                                                                       // 16
(function (view) {                                                                                                     // 17
                                                                                                                       // 18
"use strict";                                                                                                          // 19
                                                                                                                       // 20
var                                                                                                                    // 21
	  classListProp = "classList"                                                                                         // 22
	, protoProp = "prototype"                                                                                             // 23
	, elemCtrProto = (view.HTMLElement || view.Element)[protoProp]                                                        // 24
	, objCtr = Object                                                                                                     // 25
	, strTrim = String[protoProp].trim || function () {                                                                   // 26
		return this.replace(/^\s+|\s+$/g, "");                                                                               // 27
	}                                                                                                                     // 28
	, arrIndexOf = Array[protoProp].indexOf || function (item) {                                                          // 29
		var                                                                                                                  // 30
			  i = 0                                                                                                             // 31
			, len = this.length                                                                                                 // 32
		;                                                                                                                    // 33
		for (; i < len; i++) {                                                                                               // 34
			if (i in this && this[i] === item) {                                                                                // 35
				return i;                                                                                                          // 36
			}                                                                                                                   // 37
		}                                                                                                                    // 38
		return -1;                                                                                                           // 39
	}                                                                                                                     // 40
	// Vendors: please allow content code to instantiate DOMExceptions                                                    // 41
	, DOMEx = function (type, message) {                                                                                  // 42
		this.name = type;                                                                                                    // 43
		this.code = DOMException[type];                                                                                      // 44
		this.message = message;                                                                                              // 45
	}                                                                                                                     // 46
	, checkTokenAndGetIndex = function (classList, token) {                                                               // 47
		if (token === "") {                                                                                                  // 48
			throw new DOMEx(                                                                                                    // 49
				  "SYNTAX_ERR"                                                                                                     // 50
				, "An invalid or illegal string was specified"                                                                     // 51
			);                                                                                                                  // 52
		}                                                                                                                    // 53
		if (/\s/.test(token)) {                                                                                              // 54
			throw new DOMEx(                                                                                                    // 55
				  "INVALID_CHARACTER_ERR"                                                                                          // 56
				, "String contains an invalid character"                                                                           // 57
			);                                                                                                                  // 58
		}                                                                                                                    // 59
		return arrIndexOf.call(classList, token);                                                                            // 60
	}                                                                                                                     // 61
	, ClassList = function (elem) {                                                                                       // 62
		var                                                                                                                  // 63
			  trimmedClasses = strTrim.call(elem.className)                                                                     // 64
			, classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []                                                       // 65
			, i = 0                                                                                                             // 66
			, len = classes.length                                                                                              // 67
		;                                                                                                                    // 68
		for (; i < len; i++) {                                                                                               // 69
			this.push(classes[i]);                                                                                              // 70
		}                                                                                                                    // 71
		this._updateClassName = function () {                                                                                // 72
			elem.className = this.toString();                                                                                   // 73
		};                                                                                                                   // 74
	}                                                                                                                     // 75
	, classListProto = ClassList[protoProp] = []                                                                          // 76
	, classListGetter = function () {                                                                                     // 77
		return new ClassList(this);                                                                                          // 78
	}                                                                                                                     // 79
;                                                                                                                      // 80
// Most DOMException implementations don't allow calling DOMException's toString()                                     // 81
// on non-DOMExceptions. Error's toString() is sufficient here.                                                        // 82
DOMEx[protoProp] = Error[protoProp];                                                                                   // 83
classListProto.item = function (i) {                                                                                   // 84
	return this[i] || null;                                                                                               // 85
};                                                                                                                     // 86
classListProto.contains = function (token) {                                                                           // 87
	token += "";                                                                                                          // 88
	return checkTokenAndGetIndex(this, token) !== -1;                                                                     // 89
};                                                                                                                     // 90
classListProto.add = function (token) {                                                                                // 91
	token += "";                                                                                                          // 92
	if (checkTokenAndGetIndex(this, token) === -1) {                                                                      // 93
		this.push(token);                                                                                                    // 94
		this._updateClassName();                                                                                             // 95
	}                                                                                                                     // 96
};                                                                                                                     // 97
classListProto.remove = function (token) {                                                                             // 98
	token += "";                                                                                                          // 99
	var index = checkTokenAndGetIndex(this, token);                                                                       // 100
	if (index !== -1) {                                                                                                   // 101
		this.splice(index, 1);                                                                                               // 102
		this._updateClassName();                                                                                             // 103
	}                                                                                                                     // 104
};                                                                                                                     // 105
classListProto.toggle = function (token) {                                                                             // 106
	token += "";                                                                                                          // 107
	if (checkTokenAndGetIndex(this, token) === -1) {                                                                      // 108
		this.add(token);                                                                                                     // 109
	} else {                                                                                                              // 110
		this.remove(token);                                                                                                  // 111
	}                                                                                                                     // 112
};                                                                                                                     // 113
classListProto.toString = function () {                                                                                // 114
	return this.join(" ");                                                                                                // 115
};                                                                                                                     // 116
                                                                                                                       // 117
if (objCtr.defineProperty) {                                                                                           // 118
	var classListPropDesc = {                                                                                             // 119
		  get: classListGetter                                                                                               // 120
		, enumerable: true                                                                                                   // 121
		, configurable: true                                                                                                 // 122
	};                                                                                                                    // 123
	try {                                                                                                                 // 124
		objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);                                               // 125
	} catch (ex) { // IE 8 doesn't support enumerable:true                                                                // 126
		if (ex.number === -0x7FF5EC54) {                                                                                     // 127
			classListPropDesc.enumerable = false;                                                                               // 128
			objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);                                              // 129
		}                                                                                                                    // 130
	}                                                                                                                     // 131
} else if (objCtr[protoProp].__defineGetter__) {                                                                       // 132
	elemCtrProto.__defineGetter__(classListProp, classListGetter);                                                        // 133
}                                                                                                                      // 134
                                                                                                                       // 135
}(self));                                                                                                              // 136
                                                                                                                       // 137
}                                                                                                                      // 138
                                                                                                                       // 139
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/requestAnimationFrame.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// adds requestAnimationFrame functionality                                                                            // 1
// Source: http://strd6.com/2011/05/better-window-requestanimationframe-shim/                                          // 2
                                                                                                                       // 3
window.requestAnimationFrame || (window.requestAnimationFrame =                                                        // 4
  window.webkitRequestAnimationFrame ||                                                                                // 5
  window.mozRequestAnimationFrame    ||                                                                                // 6
  window.oRequestAnimationFrame      ||                                                                                // 7
  window.msRequestAnimationFrame     ||                                                                                // 8
  function(callback, element) {                                                                                        // 9
    return window.setTimeout(function() {                                                                              // 10
      callback(+new Date());                                                                                           // 11
  }, 1000 / 60);                                                                                                       // 12
});                                                                                                                    // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/famous-global.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.famous=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 3
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4
 *                                                                                                                     // 5
 * Owner: mark@famo.us                                                                                                 // 6
 * @license MPL 2.0                                                                                                    // 7
 * @copyright Famous Industries, Inc. 2014                                                                             // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
var RenderNode = require('./RenderNode');                                                                              // 11
var EventHandler = require('./EventHandler');                                                                          // 12
var ElementAllocator = require('./ElementAllocator');                                                                  // 13
var Transform = require('./Transform');                                                                                // 14
var Transitionable = require('../transitions/Transitionable');                                                         // 15
                                                                                                                       // 16
var _zeroZero = [0, 0];                                                                                                // 17
var usePrefix = !('perspective' in document.documentElement.style);                                                    // 18
                                                                                                                       // 19
function _getElementSize(element) {                                                                                    // 20
    return [element.clientWidth, element.clientHeight];                                                                // 21
}                                                                                                                      // 22
                                                                                                                       // 23
var _setPerspective = usePrefix ? function(element, perspective) {                                                     // 24
    element.style.webkitPerspective = perspective ? perspective.toFixed() + 'px' : '';                                 // 25
} : function(element, perspective) {                                                                                   // 26
    element.style.perspective = perspective ? perspective.toFixed() + 'px' : '';                                       // 27
};                                                                                                                     // 28
                                                                                                                       // 29
/**                                                                                                                    // 30
 * The top-level container for a Famous-renderable piece of the document.                                              // 31
 *   It is directly updated by the process-wide Engine object, and manages one                                         // 32
 *   render tree root, which can contain other renderables.                                                            // 33
 *                                                                                                                     // 34
 * @class Context                                                                                                      // 35
 * @constructor                                                                                                        // 36
 * @private                                                                                                            // 37
 * @param {Node} container Element in which content will be inserted                                                   // 38
 */                                                                                                                    // 39
function Context(container) {                                                                                          // 40
    this.container = container;                                                                                        // 41
    this._allocator = new ElementAllocator(container);                                                                 // 42
                                                                                                                       // 43
    this._node = new RenderNode();                                                                                     // 44
    this._eventOutput = new EventHandler();                                                                            // 45
    this._size = _getElementSize(this.container);                                                                      // 46
                                                                                                                       // 47
    this._perspectiveState = new Transitionable(0);                                                                    // 48
    this._perspective = undefined;                                                                                     // 49
                                                                                                                       // 50
    this._nodeContext = {                                                                                              // 51
        allocator: this._allocator,                                                                                    // 52
        transform: Transform.identity,                                                                                 // 53
        opacity: 1,                                                                                                    // 54
        origin: _zeroZero,                                                                                             // 55
        align: _zeroZero,                                                                                              // 56
        size: this._size                                                                                               // 57
    };                                                                                                                 // 58
                                                                                                                       // 59
    this._eventOutput.on('resize', function() {                                                                        // 60
        this.setSize(_getElementSize(this.container));                                                                 // 61
    }.bind(this));                                                                                                     // 62
                                                                                                                       // 63
}                                                                                                                      // 64
                                                                                                                       // 65
// Note: Unused                                                                                                        // 66
Context.prototype.getAllocator = function getAllocator() {                                                             // 67
    return this._allocator;                                                                                            // 68
};                                                                                                                     // 69
                                                                                                                       // 70
/**                                                                                                                    // 71
 * Add renderables to this Context's render tree.                                                                      // 72
 *                                                                                                                     // 73
 * @method add                                                                                                         // 74
 *                                                                                                                     // 75
 * @param {Object} obj renderable object                                                                               // 76
 * @return {RenderNode} RenderNode wrapping this object, if not already a RenderNode                                   // 77
 */                                                                                                                    // 78
Context.prototype.add = function add(obj) {                                                                            // 79
    return this._node.add(obj);                                                                                        // 80
};                                                                                                                     // 81
                                                                                                                       // 82
/**                                                                                                                    // 83
 * Move this Context to another containing document element.                                                           // 84
 *                                                                                                                     // 85
 * @method migrate                                                                                                     // 86
 *                                                                                                                     // 87
 * @param {Node} container Element to which content will be migrated                                                   // 88
 */                                                                                                                    // 89
Context.prototype.migrate = function migrate(container) {                                                              // 90
    if (container === this.container) return;                                                                          // 91
    this.container = container;                                                                                        // 92
    this._allocator.migrate(container);                                                                                // 93
};                                                                                                                     // 94
                                                                                                                       // 95
/**                                                                                                                    // 96
 * Gets viewport size for Context.                                                                                     // 97
 *                                                                                                                     // 98
 * @method getSize                                                                                                     // 99
 *                                                                                                                     // 100
 * @return {Array.Number} viewport size as [width, height]                                                             // 101
 */                                                                                                                    // 102
Context.prototype.getSize = function getSize() {                                                                       // 103
    return this._size;                                                                                                 // 104
};                                                                                                                     // 105
                                                                                                                       // 106
/**                                                                                                                    // 107
 * Sets viewport size for Context.                                                                                     // 108
 *                                                                                                                     // 109
 * @method setSize                                                                                                     // 110
 *                                                                                                                     // 111
 * @param {Array.Number} size [width, height].  If unspecified, use size of root document element.                     // 112
 */                                                                                                                    // 113
Context.prototype.setSize = function setSize(size) {                                                                   // 114
    if (!size) size = _getElementSize(this.container);                                                                 // 115
    this._size[0] = size[0];                                                                                           // 116
    this._size[1] = size[1];                                                                                           // 117
};                                                                                                                     // 118
                                                                                                                       // 119
/**                                                                                                                    // 120
 * Commit this Context's content changes to the document.                                                              // 121
 *                                                                                                                     // 122
 * @private                                                                                                            // 123
 * @method update                                                                                                      // 124
 * @param {Object} contextParameters engine commit specification                                                       // 125
 */                                                                                                                    // 126
Context.prototype.update = function update(contextParameters) {                                                        // 127
    if (contextParameters) {                                                                                           // 128
        if (contextParameters.transform) this._nodeContext.transform = contextParameters.transform;                    // 129
        if (contextParameters.opacity) this._nodeContext.opacity = contextParameters.opacity;                          // 130
        if (contextParameters.origin) this._nodeContext.origin = contextParameters.origin;                             // 131
        if (contextParameters.align) this._nodeContext.align = contextParameters.align;                                // 132
        if (contextParameters.size) this._nodeContext.size = contextParameters.size;                                   // 133
    }                                                                                                                  // 134
    var perspective = this._perspectiveState.get();                                                                    // 135
    if (perspective !== this._perspective) {                                                                           // 136
        _setPerspective(this.container, perspective);                                                                  // 137
        this._perspective = perspective;                                                                               // 138
    }                                                                                                                  // 139
                                                                                                                       // 140
    this._node.commit(this._nodeContext);                                                                              // 141
};                                                                                                                     // 142
                                                                                                                       // 143
/**                                                                                                                    // 144
 * Get current perspective of this context in pixels.                                                                  // 145
 *                                                                                                                     // 146
 * @method getPerspective                                                                                              // 147
 * @return {Number} depth perspective in pixels                                                                        // 148
 */                                                                                                                    // 149
Context.prototype.getPerspective = function getPerspective() {                                                         // 150
    return this._perspectiveState.get();                                                                               // 151
};                                                                                                                     // 152
                                                                                                                       // 153
/**                                                                                                                    // 154
 * Set current perspective of this context in pixels.                                                                  // 155
 *                                                                                                                     // 156
 * @method setPerspective                                                                                              // 157
 * @param {Number} perspective in pixels                                                                               // 158
 * @param {Object} [transition] Transitionable object for applying the change                                          // 159
 * @param {function(Object)} callback function called on completion of transition                                      // 160
 */                                                                                                                    // 161
Context.prototype.setPerspective = function setPerspective(perspective, transition, callback) {                        // 162
    return this._perspectiveState.set(perspective, transition, callback);                                              // 163
};                                                                                                                     // 164
                                                                                                                       // 165
/**                                                                                                                    // 166
 * Trigger an event, sending to all downstream handlers                                                                // 167
 *   listening for provided 'type' key.                                                                                // 168
 *                                                                                                                     // 169
 * @method emit                                                                                                        // 170
 *                                                                                                                     // 171
 * @param {string} type event type key (for example, 'click')                                                          // 172
 * @param {Object} event event data                                                                                    // 173
 * @return {EventHandler} this                                                                                         // 174
 */                                                                                                                    // 175
Context.prototype.emit = function emit(type, event) {                                                                  // 176
    return this._eventOutput.emit(type, event);                                                                        // 177
};                                                                                                                     // 178
                                                                                                                       // 179
/**                                                                                                                    // 180
 * Bind a callback function to an event type handled by this object.                                                   // 181
 *                                                                                                                     // 182
 * @method "on"                                                                                                        // 183
 *                                                                                                                     // 184
 * @param {string} type event type key (for example, 'click')                                                          // 185
 * @param {function(string, Object)} handler callback                                                                  // 186
 * @return {EventHandler} this                                                                                         // 187
 */                                                                                                                    // 188
Context.prototype.on = function on(type, handler) {                                                                    // 189
    return this._eventOutput.on(type, handler);                                                                        // 190
};                                                                                                                     // 191
                                                                                                                       // 192
/**                                                                                                                    // 193
 * Unbind an event by type and handler.                                                                                // 194
 *   This undoes the work of "on".                                                                                     // 195
 *                                                                                                                     // 196
 * @method removeListener                                                                                              // 197
 *                                                                                                                     // 198
 * @param {string} type event type key (for example, 'click')                                                          // 199
 * @param {function} handler function object to remove                                                                 // 200
 * @return {EventHandler} internal event handler object (for chaining)                                                 // 201
 */                                                                                                                    // 202
Context.prototype.removeListener = function removeListener(type, handler) {                                            // 203
    return this._eventOutput.removeListener(type, handler);                                                            // 204
};                                                                                                                     // 205
                                                                                                                       // 206
/**                                                                                                                    // 207
 * Add event handler object to set of downstream handlers.                                                             // 208
 *                                                                                                                     // 209
 * @method pipe                                                                                                        // 210
 *                                                                                                                     // 211
 * @param {EventHandler} target event handler target object                                                            // 212
 * @return {EventHandler} passed event handler                                                                         // 213
 */                                                                                                                    // 214
Context.prototype.pipe = function pipe(target) {                                                                       // 215
    return this._eventOutput.pipe(target);                                                                             // 216
};                                                                                                                     // 217
                                                                                                                       // 218
/**                                                                                                                    // 219
 * Remove handler object from set of downstream handlers.                                                              // 220
 *   Undoes work of "pipe".                                                                                            // 221
 *                                                                                                                     // 222
 * @method unpipe                                                                                                      // 223
 *                                                                                                                     // 224
 * @param {EventHandler} target target handler object                                                                  // 225
 * @return {EventHandler} provided target                                                                              // 226
 */                                                                                                                    // 227
Context.prototype.unpipe = function unpipe(target) {                                                                   // 228
    return this._eventOutput.unpipe(target);                                                                           // 229
};                                                                                                                     // 230
                                                                                                                       // 231
module.exports = Context;                                                                                              // 232
},{"../transitions/Transitionable":88,"./ElementAllocator":2,"./EventHandler":7,"./RenderNode":11,"./Transform":15}],2:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 234
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 235
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 236
 *                                                                                                                     // 237
 * Owner: mark@famo.us                                                                                                 // 238
 * @license MPL 2.0                                                                                                    // 239
 * @copyright Famous Industries, Inc. 2014                                                                             // 240
 */                                                                                                                    // 241
                                                                                                                       // 242
                                                                                                                       // 243
                                                                                                                       // 244
                                                                                                                       // 245
/**                                                                                                                    // 246
 * Internal helper object to Context that handles the process of                                                       // 247
 *   creating and allocating DOM elements within a managed div.                                                        // 248
 *   Private.                                                                                                          // 249
 *                                                                                                                     // 250
 * @class ElementAllocator                                                                                             // 251
 * @constructor                                                                                                        // 252
 * @private                                                                                                            // 253
 * @param {Node} container document element in which Famo.us content will be inserted                                  // 254
 */                                                                                                                    // 255
function ElementAllocator(container) {                                                                                 // 256
    if (!container) container = document.createDocumentFragment();                                                     // 257
    this.container = container;                                                                                        // 258
    this.detachedNodes = {};                                                                                           // 259
    this.nodeCount = 0;                                                                                                // 260
}                                                                                                                      // 261
                                                                                                                       // 262
/**                                                                                                                    // 263
 * Move the document elements from their original container to a new one.                                              // 264
 *                                                                                                                     // 265
 * @private                                                                                                            // 266
 * @method migrate                                                                                                     // 267
 *                                                                                                                     // 268
 * @param {Node} container document element to which Famo.us content will be migrated                                  // 269
 */                                                                                                                    // 270
ElementAllocator.prototype.migrate = function migrate(container) {                                                     // 271
    var oldContainer = this.container;                                                                                 // 272
    if (container === oldContainer) return;                                                                            // 273
                                                                                                                       // 274
    if (oldContainer instanceof DocumentFragment) {                                                                    // 275
        container.appendChild(oldContainer);                                                                           // 276
    }                                                                                                                  // 277
    else {                                                                                                             // 278
        while (oldContainer.hasChildNodes()) {                                                                         // 279
            container.appendChild(oldContainer.removeChild(oldContainer.firstChild));                                  // 280
        }                                                                                                              // 281
    }                                                                                                                  // 282
                                                                                                                       // 283
    this.container = container;                                                                                        // 284
};                                                                                                                     // 285
                                                                                                                       // 286
/**                                                                                                                    // 287
 * Allocate an element of specified type from the pool.                                                                // 288
 *                                                                                                                     // 289
 * @private                                                                                                            // 290
 * @method allocate                                                                                                    // 291
 *                                                                                                                     // 292
 * @param {string} type type of element, e.g. 'div'                                                                    // 293
 * @return {Node} allocated document element                                                                           // 294
 */                                                                                                                    // 295
ElementAllocator.prototype.allocate = function allocate(type) {                                                        // 296
    type = type.toLowerCase();                                                                                         // 297
    if (!(type in this.detachedNodes)) this.detachedNodes[type] = [];                                                  // 298
    var nodeStore = this.detachedNodes[type];                                                                          // 299
    var result;                                                                                                        // 300
    if (nodeStore.length > 0) {                                                                                        // 301
        result = nodeStore.pop();                                                                                      // 302
    }                                                                                                                  // 303
    else {                                                                                                             // 304
        result = document.createElement(type);                                                                         // 305
        this.container.appendChild(result);                                                                            // 306
    }                                                                                                                  // 307
    this.nodeCount++;                                                                                                  // 308
    return result;                                                                                                     // 309
};                                                                                                                     // 310
                                                                                                                       // 311
/**                                                                                                                    // 312
 * De-allocate an element of specified type to the pool.                                                               // 313
 *                                                                                                                     // 314
 * @private                                                                                                            // 315
 * @method deallocate                                                                                                  // 316
 *                                                                                                                     // 317
 * @param {Node} element document element to deallocate                                                                // 318
 */                                                                                                                    // 319
ElementAllocator.prototype.deallocate = function deallocate(element) {                                                 // 320
    var nodeType = element.nodeName.toLowerCase();                                                                     // 321
    var nodeStore = this.detachedNodes[nodeType];                                                                      // 322
    nodeStore.push(element);                                                                                           // 323
    this.nodeCount--;                                                                                                  // 324
};                                                                                                                     // 325
                                                                                                                       // 326
/**                                                                                                                    // 327
 * Get count of total allocated nodes in the document.                                                                 // 328
 *                                                                                                                     // 329
 * @private                                                                                                            // 330
 * @method getNodeCount                                                                                                // 331
 *                                                                                                                     // 332
 * @return {Number} total node count                                                                                   // 333
 */                                                                                                                    // 334
ElementAllocator.prototype.getNodeCount = function getNodeCount() {                                                    // 335
    return this.nodeCount;                                                                                             // 336
};                                                                                                                     // 337
                                                                                                                       // 338
module.exports = ElementAllocator;                                                                                     // 339
},{}],3:[function(require,module,exports){                                                                             // 340
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 341
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 342
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 343
 *                                                                                                                     // 344
 * Owner: mark@famo.us                                                                                                 // 345
 * @license MPL 2.0                                                                                                    // 346
 * @copyright Famous Industries, Inc. 2014                                                                             // 347
 */                                                                                                                    // 348
                                                                                                                       // 349
var Entity = require('./Entity');                                                                                      // 350
var EventHandler = require('./EventHandler');                                                                          // 351
var Transform = require('./Transform');                                                                                // 352
                                                                                                                       // 353
var usePrefix = !('transform' in document.documentElement.style);                                                      // 354
var devicePixelRatio = window.devicePixelRatio || 1;                                                                   // 355
                                                                                                                       // 356
/**                                                                                                                    // 357
 * A base class for viewable content and event                                                                         // 358
 *   targets inside a Famo.us application, containing a renderable document                                            // 359
 *   fragment. Like an HTML div, it can accept internal markup,                                                        // 360
 *   properties, classes, and handle events.                                                                           // 361
 *                                                                                                                     // 362
 * @class ElementOutput                                                                                                // 363
 * @constructor                                                                                                        // 364
 *                                                                                                                     // 365
 * @param {Node} element document parent of this container                                                             // 366
 */                                                                                                                    // 367
function ElementOutput(element) {                                                                                      // 368
    this._matrix = null;                                                                                               // 369
    this._opacity = 1;                                                                                                 // 370
    this._origin = null;                                                                                               // 371
    this._size = null;                                                                                                 // 372
                                                                                                                       // 373
    this._eventOutput = new EventHandler();                                                                            // 374
    this._eventOutput.bindThis(this);                                                                                  // 375
                                                                                                                       // 376
    /** @ignore */                                                                                                     // 377
    this.eventForwarder = function eventForwarder(event) {                                                             // 378
        this._eventOutput.emit(event.type, event);                                                                     // 379
    }.bind(this);                                                                                                      // 380
                                                                                                                       // 381
    this.id = Entity.register(this);                                                                                   // 382
    this._element = null;                                                                                              // 383
    this._sizeDirty = false;                                                                                           // 384
    this._originDirty = false;                                                                                         // 385
    this._transformDirty = false;                                                                                      // 386
                                                                                                                       // 387
    this._invisible = false;                                                                                           // 388
    if (element) this.attach(element);                                                                                 // 389
}                                                                                                                      // 390
                                                                                                                       // 391
/**                                                                                                                    // 392
 * Bind a callback function to an event type handled by this object.                                                   // 393
 *                                                                                                                     // 394
 * @method "on"                                                                                                        // 395
 *                                                                                                                     // 396
 * @param {string} type event type key (for example, 'click')                                                          // 397
 * @param {function(string, Object)} fn handler callback                                                               // 398
 * @return {EventHandler} this                                                                                         // 399
 */                                                                                                                    // 400
ElementOutput.prototype.on = function on(type, fn) {                                                                   // 401
    if (this._element) this._element.addEventListener(type, this.eventForwarder);                                      // 402
    this._eventOutput.on(type, fn);                                                                                    // 403
};                                                                                                                     // 404
                                                                                                                       // 405
/**                                                                                                                    // 406
 * Unbind an event by type and handler.                                                                                // 407
 *   This undoes the work of "on"                                                                                      // 408
 *                                                                                                                     // 409
 * @method removeListener                                                                                              // 410
 * @param {string} type event type key (for example, 'click')                                                          // 411
 * @param {function(string, Object)} fn handler                                                                        // 412
 */                                                                                                                    // 413
ElementOutput.prototype.removeListener = function removeListener(type, fn) {                                           // 414
    this._eventOutput.removeListener(type, fn);                                                                        // 415
};                                                                                                                     // 416
                                                                                                                       // 417
/**                                                                                                                    // 418
 * Trigger an event, sending to all downstream handlers                                                                // 419
 *   listening for provided 'type' key.                                                                                // 420
 *                                                                                                                     // 421
 * @method emit                                                                                                        // 422
 *                                                                                                                     // 423
 * @param {string} type event type key (for example, 'click')                                                          // 424
 * @param {Object} [event] event data                                                                                  // 425
 * @return {EventHandler} this                                                                                         // 426
 */                                                                                                                    // 427
ElementOutput.prototype.emit = function emit(type, event) {                                                            // 428
    if (event && !event.origin) event.origin = this;                                                                   // 429
    var handled = this._eventOutput.emit(type, event);                                                                 // 430
    if (handled && event && event.stopPropagation) event.stopPropagation();                                            // 431
    return handled;                                                                                                    // 432
};                                                                                                                     // 433
                                                                                                                       // 434
/**                                                                                                                    // 435
 * Add event handler object to set of downstream handlers.                                                             // 436
 *                                                                                                                     // 437
 * @method pipe                                                                                                        // 438
 *                                                                                                                     // 439
 * @param {EventHandler} target event handler target object                                                            // 440
 * @return {EventHandler} passed event handler                                                                         // 441
 */                                                                                                                    // 442
ElementOutput.prototype.pipe = function pipe(target) {                                                                 // 443
    return this._eventOutput.pipe(target);                                                                             // 444
};                                                                                                                     // 445
                                                                                                                       // 446
/**                                                                                                                    // 447
 * Remove handler object from set of downstream handlers.                                                              // 448
 *   Undoes work of "pipe"                                                                                             // 449
 *                                                                                                                     // 450
 * @method unpipe                                                                                                      // 451
 *                                                                                                                     // 452
 * @param {EventHandler} target target handler object                                                                  // 453
 * @return {EventHandler} provided target                                                                              // 454
 */                                                                                                                    // 455
ElementOutput.prototype.unpipe = function unpipe(target) {                                                             // 456
    return this._eventOutput.unpipe(target);                                                                           // 457
};                                                                                                                     // 458
                                                                                                                       // 459
/**                                                                                                                    // 460
 * Return spec for this surface. Note that for a base surface, this is                                                 // 461
 *    simply an id.                                                                                                    // 462
 *                                                                                                                     // 463
 * @method render                                                                                                      // 464
 * @private                                                                                                            // 465
 * @return {Object} render spec for this surface (spec id)                                                             // 466
 */                                                                                                                    // 467
ElementOutput.prototype.render = function render() {                                                                   // 468
    return this.id;                                                                                                    // 469
};                                                                                                                     // 470
                                                                                                                       // 471
//  Attach Famous event handling to document events emanating from target                                              // 472
//    document element.  This occurs just after attachment to the document.                                            // 473
//    Calling this enables methods like #on and #pipe.                                                                 // 474
function _addEventListeners(target) {                                                                                  // 475
    for (var i in this._eventOutput.listeners) {                                                                       // 476
        target.addEventListener(i, this.eventForwarder);                                                               // 477
    }                                                                                                                  // 478
}                                                                                                                      // 479
                                                                                                                       // 480
//  Detach Famous event handling from document events emanating from target                                            // 481
//  document element.  This occurs just before detach from the document.                                               // 482
function _removeEventListeners(target) {                                                                               // 483
    for (var i in this._eventOutput.listeners) {                                                                       // 484
        target.removeEventListener(i, this.eventForwarder);                                                            // 485
    }                                                                                                                  // 486
}                                                                                                                      // 487
                                                                                                                       // 488
/**                                                                                                                    // 489
 * Return a Matrix's webkit css representation to be used with the                                                     // 490
 *    CSS3 -webkit-transform style.                                                                                    // 491
 *    Example: -webkit-transform: matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,716,243,0,1)                                        // 492
 *                                                                                                                     // 493
 * @method _formatCSSTransform                                                                                         // 494
 * @private                                                                                                            // 495
 * @param {FamousMatrix} m matrix                                                                                      // 496
 * @return {string} matrix3d CSS style representation of the transform                                                 // 497
 */                                                                                                                    // 498
function _formatCSSTransform(m) {                                                                                      // 499
    m[12] = Math.round(m[12] * devicePixelRatio) / devicePixelRatio;                                                   // 500
    m[13] = Math.round(m[13] * devicePixelRatio) / devicePixelRatio;                                                   // 501
                                                                                                                       // 502
    var result = 'matrix3d(';                                                                                          // 503
    for (var i = 0; i < 15; i++) {                                                                                     // 504
        result += (m[i] < 0.000001 && m[i] > -0.000001) ? '0,' : m[i] + ',';                                           // 505
    }                                                                                                                  // 506
    result += m[15] + ')';                                                                                             // 507
    return result;                                                                                                     // 508
}                                                                                                                      // 509
                                                                                                                       // 510
/**                                                                                                                    // 511
 * Directly apply given FamousMatrix to the document element as the                                                    // 512
 *   appropriate webkit CSS style.                                                                                     // 513
 *                                                                                                                     // 514
 * @method setMatrix                                                                                                   // 515
 *                                                                                                                     // 516
 * @static                                                                                                             // 517
 * @private                                                                                                            // 518
 * @param {Element} element document element                                                                           // 519
 * @param {FamousMatrix} matrix                                                                                        // 520
 */                                                                                                                    // 521
                                                                                                                       // 522
var _setMatrix;                                                                                                        // 523
if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {                                                       // 524
    _setMatrix = function(element, matrix) {                                                                           // 525
        element.style.zIndex = (matrix[14] * 1000000) | 0;    // fix for Firefox z-buffer issues                       // 526
        element.style.transform = _formatCSSTransform(matrix);                                                         // 527
    };                                                                                                                 // 528
}                                                                                                                      // 529
else if (usePrefix) {                                                                                                  // 530
    _setMatrix = function(element, matrix) {                                                                           // 531
        element.style.webkitTransform = _formatCSSTransform(matrix);                                                   // 532
    };                                                                                                                 // 533
}                                                                                                                      // 534
else {                                                                                                                 // 535
    _setMatrix = function(element, matrix) {                                                                           // 536
        element.style.transform = _formatCSSTransform(matrix);                                                         // 537
    };                                                                                                                 // 538
}                                                                                                                      // 539
                                                                                                                       // 540
// format origin as CSS percentage string                                                                              // 541
function _formatCSSOrigin(origin) {                                                                                    // 542
    return (100 * origin[0]) + '% ' + (100 * origin[1]) + '%';                                                         // 543
}                                                                                                                      // 544
                                                                                                                       // 545
// Directly apply given origin coordinates to the document element as the                                              // 546
// appropriate webkit CSS style.                                                                                       // 547
var _setOrigin = usePrefix ? function(element, origin) {                                                               // 548
    element.style.webkitTransformOrigin = _formatCSSOrigin(origin);                                                    // 549
} : function(element, origin) {                                                                                        // 550
    element.style.transformOrigin = _formatCSSOrigin(origin);                                                          // 551
};                                                                                                                     // 552
                                                                                                                       // 553
// Shrink given document element until it is effectively invisible.                                                    // 554
var _setInvisible = usePrefix ? function(element) {                                                                    // 555
    element.style.webkitTransform = 'scale3d(0.0001,0.0001,0.0001)';                                                   // 556
    element.style.opacity = 0;                                                                                         // 557
} : function(element) {                                                                                                // 558
    element.style.transform = 'scale3d(0.0001,0.0001,0.0001)';                                                         // 559
    element.style.opacity = 0;                                                                                         // 560
};                                                                                                                     // 561
                                                                                                                       // 562
function _xyNotEquals(a, b) {                                                                                          // 563
    return (a && b) ? (a[0] !== b[0] || a[1] !== b[1]) : a !== b;                                                      // 564
}                                                                                                                      // 565
                                                                                                                       // 566
/**                                                                                                                    // 567
 * Apply changes from this component to the corresponding document element.                                            // 568
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 569
 * and matrix transforms.                                                                                              // 570
 *                                                                                                                     // 571
 * @private                                                                                                            // 572
 * @method commit                                                                                                      // 573
 * @param {Context} context commit context                                                                             // 574
 */                                                                                                                    // 575
ElementOutput.prototype.commit = function commit(context) {                                                            // 576
    var target = this._element;                                                                                        // 577
    if (!target) return;                                                                                               // 578
                                                                                                                       // 579
    var matrix = context.transform;                                                                                    // 580
    var opacity = context.opacity;                                                                                     // 581
    var origin = context.origin;                                                                                       // 582
    var size = context.size;                                                                                           // 583
                                                                                                                       // 584
    if (!matrix && this._matrix) {                                                                                     // 585
        this._matrix = null;                                                                                           // 586
        this._opacity = 0;                                                                                             // 587
        _setInvisible(target);                                                                                         // 588
        return;                                                                                                        // 589
    }                                                                                                                  // 590
                                                                                                                       // 591
    if (_xyNotEquals(this._origin, origin)) this._originDirty = true;                                                  // 592
    if (Transform.notEquals(this._matrix, matrix)) this._transformDirty = true;                                        // 593
                                                                                                                       // 594
    if (this._invisible) {                                                                                             // 595
        this._invisible = false;                                                                                       // 596
        this._element.style.display = '';                                                                              // 597
    }                                                                                                                  // 598
                                                                                                                       // 599
    if (this._opacity !== opacity) {                                                                                   // 600
        this._opacity = opacity;                                                                                       // 601
        target.style.opacity = (opacity >= 1) ? '0.999999' : opacity;                                                  // 602
    }                                                                                                                  // 603
                                                                                                                       // 604
    if (this._transformDirty || this._originDirty || this._sizeDirty) {                                                // 605
        if (this._sizeDirty) this._sizeDirty = false;                                                                  // 606
                                                                                                                       // 607
        if (this._originDirty) {                                                                                       // 608
            if (origin) {                                                                                              // 609
                if (!this._origin) this._origin = [0, 0];                                                              // 610
                this._origin[0] = origin[0];                                                                           // 611
                this._origin[1] = origin[1];                                                                           // 612
            }                                                                                                          // 613
            else this._origin = null;                                                                                  // 614
            _setOrigin(target, this._origin);                                                                          // 615
            this._originDirty = false;                                                                                 // 616
        }                                                                                                              // 617
                                                                                                                       // 618
        if (!matrix) matrix = Transform.identity;                                                                      // 619
        this._matrix = matrix;                                                                                         // 620
        var aaMatrix = this._size ? Transform.thenMove(matrix, [-this._size[0]*origin[0], -this._size[1]*origin[1], 0]) : matrix;
        _setMatrix(target, aaMatrix);                                                                                  // 622
        this._transformDirty = false;                                                                                  // 623
    }                                                                                                                  // 624
};                                                                                                                     // 625
                                                                                                                       // 626
ElementOutput.prototype.cleanup = function cleanup() {                                                                 // 627
    if (this._element) {                                                                                               // 628
        this._invisible = true;                                                                                        // 629
        this._element.style.display = 'none';                                                                          // 630
    }                                                                                                                  // 631
};                                                                                                                     // 632
                                                                                                                       // 633
/**                                                                                                                    // 634
 * Place the document element that this component manages into the document.                                           // 635
 *                                                                                                                     // 636
 * @private                                                                                                            // 637
 * @method attach                                                                                                      // 638
 * @param {Node} target document parent of this container                                                              // 639
 */                                                                                                                    // 640
ElementOutput.prototype.attach = function attach(target) {                                                             // 641
    this._element = target;                                                                                            // 642
    _addEventListeners.call(this, target);                                                                             // 643
};                                                                                                                     // 644
                                                                                                                       // 645
/**                                                                                                                    // 646
 * Remove any contained document content associated with this surface                                                  // 647
 *   from the actual document.                                                                                         // 648
 *                                                                                                                     // 649
 * @private                                                                                                            // 650
 * @method detach                                                                                                      // 651
 */                                                                                                                    // 652
ElementOutput.prototype.detach = function detach() {                                                                   // 653
    var target = this._element;                                                                                        // 654
    if (target) {                                                                                                      // 655
        _removeEventListeners.call(this, target);                                                                      // 656
        if (this._invisible) {                                                                                         // 657
            this._invisible = false;                                                                                   // 658
            this._element.style.display = '';                                                                          // 659
        }                                                                                                              // 660
    }                                                                                                                  // 661
    this._element = null;                                                                                              // 662
    return target;                                                                                                     // 663
};                                                                                                                     // 664
                                                                                                                       // 665
module.exports = ElementOutput;                                                                                        // 666
},{"./Entity":5,"./EventHandler":7,"./Transform":15}],4:[function(require,module,exports){                             // 667
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 668
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 669
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 670
 *                                                                                                                     // 671
 * Owner: mark@famo.us                                                                                                 // 672
 * @license MPL 2.0                                                                                                    // 673
 * @copyright Famous Industries, Inc. 2014                                                                             // 674
 */                                                                                                                    // 675
                                                                                                                       // 676
/**                                                                                                                    // 677
 * The singleton object initiated upon process                                                                         // 678
 *   startup which manages all active Context instances, runs                                                          // 679
 *   the render dispatch loop, and acts as a listener and dispatcher                                                   // 680
 *   for events.  All methods are therefore static.                                                                    // 681
 *                                                                                                                     // 682
 *   On static initialization, window.requestAnimationFrame is called with                                             // 683
 *     the event loop function.                                                                                        // 684
 *                                                                                                                     // 685
 *   Note: Any window in which Engine runs will prevent default                                                        // 686
 *     scrolling behavior on the 'touchmove' event.                                                                    // 687
 *                                                                                                                     // 688
 * @static                                                                                                             // 689
 * @class Engine                                                                                                       // 690
 */                                                                                                                    // 691
var Context = require('./Context');                                                                                    // 692
var EventHandler = require('./EventHandler');                                                                          // 693
var OptionsManager = require('./OptionsManager');                                                                      // 694
                                                                                                                       // 695
var Engine = {};                                                                                                       // 696
                                                                                                                       // 697
var contexts = [];                                                                                                     // 698
var nextTickQueue = [];                                                                                                // 699
var deferQueue = [];                                                                                                   // 700
                                                                                                                       // 701
var lastTime = Date.now();                                                                                             // 702
var frameTime;                                                                                                         // 703
var frameTimeLimit;                                                                                                    // 704
var loopEnabled = true;                                                                                                // 705
var eventForwarders = {};                                                                                              // 706
var eventHandler = new EventHandler();                                                                                 // 707
                                                                                                                       // 708
var options = {                                                                                                        // 709
    containerType: 'div',                                                                                              // 710
    containerClass: 'famous-container',                                                                                // 711
    fpsCap: undefined,                                                                                                 // 712
    runLoop: true,                                                                                                     // 713
    appMode: true                                                                                                      // 714
};                                                                                                                     // 715
var optionsManager = new OptionsManager(options);                                                                      // 716
                                                                                                                       // 717
/** @const */                                                                                                          // 718
var MAX_DEFER_FRAME_TIME = 10;                                                                                         // 719
                                                                                                                       // 720
/**                                                                                                                    // 721
 * Inside requestAnimationFrame loop, step() is called, which:                                                         // 722
 *   calculates current FPS (throttling loop if it is over limit set in setFPSCap),                                    // 723
 *   emits dataless 'prerender' event on start of loop,                                                                // 724
 *   calls in order any one-shot functions registered by nextTick on last loop,                                        // 725
 *   calls Context.update on all Context objects registered,                                                           // 726
 *   and emits dataless 'postrender' event on end of loop.                                                             // 727
 *                                                                                                                     // 728
 * @static                                                                                                             // 729
 * @private                                                                                                            // 730
 * @method step                                                                                                        // 731
 */                                                                                                                    // 732
Engine.step = function step() {                                                                                        // 733
    var currentTime = Date.now();                                                                                      // 734
                                                                                                                       // 735
    // skip frame if we're over our framerate cap                                                                      // 736
    if (frameTimeLimit && currentTime - lastTime < frameTimeLimit) return;                                             // 737
                                                                                                                       // 738
    var i = 0;                                                                                                         // 739
                                                                                                                       // 740
    frameTime = currentTime - lastTime;                                                                                // 741
    lastTime = currentTime;                                                                                            // 742
                                                                                                                       // 743
    eventHandler.emit('prerender');                                                                                    // 744
                                                                                                                       // 745
    // empty the queue                                                                                                 // 746
    for (i = 0; i < nextTickQueue.length; i++) nextTickQueue[i].call(this);                                            // 747
    nextTickQueue.splice(0);                                                                                           // 748
                                                                                                                       // 749
    // limit total execution time for deferrable functions                                                             // 750
    while (deferQueue.length && (Date.now() - currentTime) < MAX_DEFER_FRAME_TIME) {                                   // 751
        deferQueue.shift().call(this);                                                                                 // 752
    }                                                                                                                  // 753
                                                                                                                       // 754
    for (i = 0; i < contexts.length; i++) contexts[i].update();                                                        // 755
                                                                                                                       // 756
    eventHandler.emit('postrender');                                                                                   // 757
};                                                                                                                     // 758
                                                                                                                       // 759
// engage requestAnimationFrame                                                                                        // 760
function loop() {                                                                                                      // 761
    if (options.runLoop) {                                                                                             // 762
        Engine.step();                                                                                                 // 763
        window.requestAnimationFrame(loop);                                                                            // 764
    }                                                                                                                  // 765
    else loopEnabled = false;                                                                                          // 766
}                                                                                                                      // 767
window.requestAnimationFrame(loop);                                                                                    // 768
                                                                                                                       // 769
//                                                                                                                     // 770
// Upon main document window resize (unless on an "input" HTML element):                                               // 771
//   scroll to the top left corner of the window,                                                                      // 772
//   and for each managed Context: emit the 'resize' event and update its size.                                        // 773
// @param {Object=} event document event                                                                               // 774
//                                                                                                                     // 775
function handleResize(event) {                                                                                         // 776
    for (var i = 0; i < contexts.length; i++) {                                                                        // 777
        contexts[i].emit('resize');                                                                                    // 778
    }                                                                                                                  // 779
    eventHandler.emit('resize');                                                                                       // 780
}                                                                                                                      // 781
window.addEventListener('resize', handleResize, false);                                                                // 782
handleResize();                                                                                                        // 783
                                                                                                                       // 784
/**                                                                                                                    // 785
 * Initialize famous for app mode                                                                                      // 786
 *                                                                                                                     // 787
 * @static                                                                                                             // 788
 * @private                                                                                                            // 789
 * @method initialize                                                                                                  // 790
 */                                                                                                                    // 791
function initialize() {                                                                                                // 792
    // prevent scrolling via browser                                                                                   // 793
    window.addEventListener('touchmove', function(event) {                                                             // 794
        event.preventDefault();                                                                                        // 795
    }, true);                                                                                                          // 796
    document.body.classList.add('famous-root');                                                                        // 797
    document.documentElement.classList.add('famous-root');                                                             // 798
}                                                                                                                      // 799
var initialized = false;                                                                                               // 800
                                                                                                                       // 801
/**                                                                                                                    // 802
 * Add event handler object to set of downstream handlers.                                                             // 803
 *                                                                                                                     // 804
 * @method pipe                                                                                                        // 805
 *                                                                                                                     // 806
 * @param {EventHandler} target event handler target object                                                            // 807
 * @return {EventHandler} passed event handler                                                                         // 808
 */                                                                                                                    // 809
Engine.pipe = function pipe(target) {                                                                                  // 810
    if (target.subscribe instanceof Function) return target.subscribe(Engine);                                         // 811
    else return eventHandler.pipe(target);                                                                             // 812
};                                                                                                                     // 813
                                                                                                                       // 814
/**                                                                                                                    // 815
 * Remove handler object from set of downstream handlers.                                                              // 816
 *   Undoes work of "pipe".                                                                                            // 817
 *                                                                                                                     // 818
 * @method unpipe                                                                                                      // 819
 *                                                                                                                     // 820
 * @param {EventHandler} target target handler object                                                                  // 821
 * @return {EventHandler} provided target                                                                              // 822
 */                                                                                                                    // 823
Engine.unpipe = function unpipe(target) {                                                                              // 824
    if (target.unsubscribe instanceof Function) return target.unsubscribe(Engine);                                     // 825
    else return eventHandler.unpipe(target);                                                                           // 826
};                                                                                                                     // 827
                                                                                                                       // 828
/**                                                                                                                    // 829
 * Bind a callback function to an event type handled by this object.                                                   // 830
 *                                                                                                                     // 831
 * @static                                                                                                             // 832
 * @method "on"                                                                                                        // 833
 *                                                                                                                     // 834
 * @param {string} type event type key (for example, 'click')                                                          // 835
 * @param {function(string, Object)} handler callback                                                                  // 836
 * @return {EventHandler} this                                                                                         // 837
 */                                                                                                                    // 838
Engine.on = function on(type, handler) {                                                                               // 839
    if (!(type in eventForwarders)) {                                                                                  // 840
        eventForwarders[type] = eventHandler.emit.bind(eventHandler, type);                                            // 841
        if (document.body) {                                                                                           // 842
            document.body.addEventListener(type, eventForwarders[type]);                                               // 843
        }                                                                                                              // 844
        else {                                                                                                         // 845
            Engine.nextTick(function(type, forwarder) {                                                                // 846
                document.body.addEventListener(type, forwarder);                                                       // 847
            }.bind(this, type, eventForwarders[type]));                                                                // 848
        }                                                                                                              // 849
    }                                                                                                                  // 850
    return eventHandler.on(type, handler);                                                                             // 851
};                                                                                                                     // 852
                                                                                                                       // 853
/**                                                                                                                    // 854
 * Trigger an event, sending to all downstream handlers                                                                // 855
 *   listening for provided 'type' key.                                                                                // 856
 *                                                                                                                     // 857
 * @method emit                                                                                                        // 858
 *                                                                                                                     // 859
 * @param {string} type event type key (for example, 'click')                                                          // 860
 * @param {Object} event event data                                                                                    // 861
 * @return {EventHandler} this                                                                                         // 862
 */                                                                                                                    // 863
Engine.emit = function emit(type, event) {                                                                             // 864
    return eventHandler.emit(type, event);                                                                             // 865
};                                                                                                                     // 866
                                                                                                                       // 867
/**                                                                                                                    // 868
 * Unbind an event by type and handler.                                                                                // 869
 *   This undoes the work of "on".                                                                                     // 870
 *                                                                                                                     // 871
 * @static                                                                                                             // 872
 * @method removeListener                                                                                              // 873
 *                                                                                                                     // 874
 * @param {string} type event type key (for example, 'click')                                                          // 875
 * @param {function} handler function object to remove                                                                 // 876
 * @return {EventHandler} internal event handler object (for chaining)                                                 // 877
 */                                                                                                                    // 878
Engine.removeListener = function removeListener(type, handler) {                                                       // 879
    return eventHandler.removeListener(type, handler);                                                                 // 880
};                                                                                                                     // 881
                                                                                                                       // 882
/**                                                                                                                    // 883
 * Return the current calculated frames per second of the Engine.                                                      // 884
 *                                                                                                                     // 885
 * @static                                                                                                             // 886
 * @method getFPS                                                                                                      // 887
 *                                                                                                                     // 888
 * @return {Number} calculated fps                                                                                     // 889
 */                                                                                                                    // 890
Engine.getFPS = function getFPS() {                                                                                    // 891
    return 1000 / frameTime;                                                                                           // 892
};                                                                                                                     // 893
                                                                                                                       // 894
/**                                                                                                                    // 895
 * Set the maximum fps at which the system should run. If internal render                                              // 896
 *    loop is called at a greater frequency than this FPSCap, Engine will                                              // 897
 *    throttle render and update until this rate is achieved.                                                          // 898
 *                                                                                                                     // 899
 * @static                                                                                                             // 900
 * @method setFPSCap                                                                                                   // 901
 *                                                                                                                     // 902
 * @param {Number} fps maximum frames per second                                                                       // 903
 */                                                                                                                    // 904
Engine.setFPSCap = function setFPSCap(fps) {                                                                           // 905
    frameTimeLimit = Math.floor(1000 / fps);                                                                           // 906
};                                                                                                                     // 907
                                                                                                                       // 908
/**                                                                                                                    // 909
 * Return engine options.                                                                                              // 910
 *                                                                                                                     // 911
 * @static                                                                                                             // 912
 * @method getOptions                                                                                                  // 913
 * @param {string} key                                                                                                 // 914
 * @return {Object} engine options                                                                                     // 915
 */                                                                                                                    // 916
Engine.getOptions = function getOptions(key) {                                                                         // 917
    return optionsManager.getOptions(key);                                                                             // 918
};                                                                                                                     // 919
                                                                                                                       // 920
/**                                                                                                                    // 921
 * Set engine options                                                                                                  // 922
 *                                                                                                                     // 923
 * @static                                                                                                             // 924
 * @method setOptions                                                                                                  // 925
 *                                                                                                                     // 926
 * @param {Object} [options] overrides of default options                                                              // 927
 * @param {Number} [options.fpsCap]  maximum fps at which the system should run                                        // 928
 * @param {boolean} [options.runLoop=true] whether the run loop should continue                                        // 929
 * @param {string} [options.containerType="div"] type of container element.  Defaults to 'div'.                        // 930
 * @param {string} [options.containerClass="famous-container"] type of container element.  Defaults to 'famous-container'.
 */                                                                                                                    // 932
Engine.setOptions = function setOptions(options) {                                                                     // 933
    return optionsManager.setOptions.apply(optionsManager, arguments);                                                 // 934
};                                                                                                                     // 935
                                                                                                                       // 936
/**                                                                                                                    // 937
 * Creates a new Context for rendering and event handling with                                                         // 938
 *    provided document element as top of each tree. This will be tracked by the                                       // 939
 *    process-wide Engine.                                                                                             // 940
 *                                                                                                                     // 941
 * @static                                                                                                             // 942
 * @method createContext                                                                                               // 943
 *                                                                                                                     // 944
 * @param {Node} el will be top of Famo.us document element tree                                                       // 945
 * @return {Context} new Context within el                                                                             // 946
 */                                                                                                                    // 947
Engine.createContext = function createContext(el) {                                                                    // 948
    if (!initialized && options.appMode) Engine.nextTick(initialize);                                                  // 949
                                                                                                                       // 950
    var needMountContainer = false;                                                                                    // 951
    if (!el) {                                                                                                         // 952
        el = document.createElement(options.containerType);                                                            // 953
        el.classList.add(options.containerClass);                                                                      // 954
        needMountContainer = true;                                                                                     // 955
    }                                                                                                                  // 956
    var context = new Context(el);                                                                                     // 957
    Engine.registerContext(context);                                                                                   // 958
    if (needMountContainer) {                                                                                          // 959
        Engine.nextTick(function(context, el) {                                                                        // 960
            document.body.appendChild(el);                                                                             // 961
            context.emit('resize');                                                                                    // 962
        }.bind(this, context, el));                                                                                    // 963
    }                                                                                                                  // 964
    return context;                                                                                                    // 965
};                                                                                                                     // 966
                                                                                                                       // 967
/**                                                                                                                    // 968
 * Registers an existing context to be updated within the run loop.                                                    // 969
 *                                                                                                                     // 970
 * @static                                                                                                             // 971
 * @method registerContext                                                                                             // 972
 *                                                                                                                     // 973
 * @param {Context} context Context to register                                                                        // 974
 * @return {FamousContext} provided context                                                                            // 975
 */                                                                                                                    // 976
Engine.registerContext = function registerContext(context) {                                                           // 977
    contexts.push(context);                                                                                            // 978
    return context;                                                                                                    // 979
};                                                                                                                     // 980
                                                                                                                       // 981
/**                                                                                                                    // 982
 * Returns a list of all contexts.                                                                                     // 983
 *                                                                                                                     // 984
 * @static                                                                                                             // 985
 * @method getContexts                                                                                                 // 986
 * @return {Array} contexts that are updated on each tick                                                              // 987
 */                                                                                                                    // 988
Engine.getContexts = function getContexts() {                                                                          // 989
    return contexts;                                                                                                   // 990
};                                                                                                                     // 991
                                                                                                                       // 992
/**                                                                                                                    // 993
 * Removes a context from the run loop. Note: this does not do any                                                     // 994
 *     cleanup.                                                                                                        // 995
 *                                                                                                                     // 996
 * @static                                                                                                             // 997
 * @method deregisterContext                                                                                           // 998
 *                                                                                                                     // 999
 * @param {Context} context Context to deregister                                                                      // 1000
 */                                                                                                                    // 1001
Engine.deregisterContext = function deregisterContext(context) {                                                       // 1002
    var i = contexts.indexOf(context);                                                                                 // 1003
    if (i >= 0) contexts.splice(i, 1);                                                                                 // 1004
};                                                                                                                     // 1005
                                                                                                                       // 1006
/**                                                                                                                    // 1007
 * Queue a function to be executed on the next tick of the                                                             // 1008
 *    Engine.                                                                                                          // 1009
 *                                                                                                                     // 1010
 * @static                                                                                                             // 1011
 * @method nextTick                                                                                                    // 1012
 *                                                                                                                     // 1013
 * @param {function(Object)} fn function accepting window object                                                       // 1014
 */                                                                                                                    // 1015
Engine.nextTick = function nextTick(fn) {                                                                              // 1016
    nextTickQueue.push(fn);                                                                                            // 1017
};                                                                                                                     // 1018
                                                                                                                       // 1019
/**                                                                                                                    // 1020
 * Queue a function to be executed sometime soon, at a time that is                                                    // 1021
 *    unlikely to affect frame rate.                                                                                   // 1022
 *                                                                                                                     // 1023
 * @static                                                                                                             // 1024
 * @method defer                                                                                                       // 1025
 *                                                                                                                     // 1026
 * @param {Function} fn                                                                                                // 1027
 */                                                                                                                    // 1028
Engine.defer = function defer(fn) {                                                                                    // 1029
    deferQueue.push(fn);                                                                                               // 1030
};                                                                                                                     // 1031
                                                                                                                       // 1032
optionsManager.on('change', function(data) {                                                                           // 1033
    if (data.id === 'fpsCap') Engine.setFPSCap(data.value);                                                            // 1034
    else if (data.id === 'runLoop') {                                                                                  // 1035
        // kick off the loop only if it was stopped                                                                    // 1036
        if (!loopEnabled && data.value) {                                                                              // 1037
            loopEnabled = true;                                                                                        // 1038
            window.requestAnimationFrame(loop);                                                                        // 1039
        }                                                                                                              // 1040
    }                                                                                                                  // 1041
});                                                                                                                    // 1042
                                                                                                                       // 1043
module.exports = Engine;                                                                                               // 1044
},{"./Context":1,"./EventHandler":7,"./OptionsManager":10}],5:[function(require,module,exports){                       // 1045
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1046
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1047
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1048
 *                                                                                                                     // 1049
 * Owner: mark@famo.us                                                                                                 // 1050
 * @license MPL 2.0                                                                                                    // 1051
 * @copyright Famous Industries, Inc. 2014                                                                             // 1052
 */                                                                                                                    // 1053
                                                                                                                       // 1054
                                                                                                                       // 1055
                                                                                                                       // 1056
/**                                                                                                                    // 1057
 * A singleton that maintains a global registry of Surfaces.                                                           // 1058
 *   Private.                                                                                                          // 1059
 *                                                                                                                     // 1060
 * @private                                                                                                            // 1061
 * @static                                                                                                             // 1062
 * @class Entity                                                                                                       // 1063
 */                                                                                                                    // 1064
                                                                                                                       // 1065
var entities = [];                                                                                                     // 1066
                                                                                                                       // 1067
/**                                                                                                                    // 1068
 * Get entity from global index.                                                                                       // 1069
 *                                                                                                                     // 1070
 * @private                                                                                                            // 1071
 * @method get                                                                                                         // 1072
 * @param {Number} id entity registration id                                                                           // 1073
 * @return {Surface} entity in the global index                                                                        // 1074
 */                                                                                                                    // 1075
function get(id) {                                                                                                     // 1076
    return entities[id];                                                                                               // 1077
}                                                                                                                      // 1078
                                                                                                                       // 1079
/**                                                                                                                    // 1080
 * Overwrite entity in the global index                                                                                // 1081
 *                                                                                                                     // 1082
 * @private                                                                                                            // 1083
 * @method set                                                                                                         // 1084
 * @param {Number} id entity registration id                                                                           // 1085
 * @param {Surface} entity to add to the global index                                                                  // 1086
 */                                                                                                                    // 1087
function set(id, entity) {                                                                                             // 1088
    entities[id] = entity;                                                                                             // 1089
}                                                                                                                      // 1090
                                                                                                                       // 1091
/**                                                                                                                    // 1092
 * Add entity to global index                                                                                          // 1093
 *                                                                                                                     // 1094
 * @private                                                                                                            // 1095
 * @method register                                                                                                    // 1096
 * @param {Surface} entity to add to global index                                                                      // 1097
 * @return {Number} new id                                                                                             // 1098
 */                                                                                                                    // 1099
function register(entity) {                                                                                            // 1100
    var id = entities.length;                                                                                          // 1101
    set(id, entity);                                                                                                   // 1102
    return id;                                                                                                         // 1103
}                                                                                                                      // 1104
                                                                                                                       // 1105
/**                                                                                                                    // 1106
 * Remove entity from global index                                                                                     // 1107
 *                                                                                                                     // 1108
 * @private                                                                                                            // 1109
 * @method unregister                                                                                                  // 1110
 * @param {Number} id entity registration id                                                                           // 1111
 */                                                                                                                    // 1112
function unregister(id) {                                                                                              // 1113
    set(id, null);                                                                                                     // 1114
}                                                                                                                      // 1115
                                                                                                                       // 1116
module.exports = {                                                                                                     // 1117
    register: register,                                                                                                // 1118
    unregister: unregister,                                                                                            // 1119
    get: get,                                                                                                          // 1120
    set: set                                                                                                           // 1121
};                                                                                                                     // 1122
},{}],6:[function(require,module,exports){                                                                             // 1123
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1124
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1125
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1126
 *                                                                                                                     // 1127
 * Owner: mark@famo.us                                                                                                 // 1128
 * @license MPL 2.0                                                                                                    // 1129
 * @copyright Famous Industries, Inc. 2014                                                                             // 1130
 */                                                                                                                    // 1131
                                                                                                                       // 1132
                                                                                                                       // 1133
                                                                                                                       // 1134
/**                                                                                                                    // 1135
 * EventEmitter represents a channel for events.                                                                       // 1136
 *                                                                                                                     // 1137
 * @class EventEmitter                                                                                                 // 1138
 * @constructor                                                                                                        // 1139
 */                                                                                                                    // 1140
function EventEmitter() {                                                                                              // 1141
    this.listeners = {};                                                                                               // 1142
    this._owner = this;                                                                                                // 1143
}                                                                                                                      // 1144
                                                                                                                       // 1145
/**                                                                                                                    // 1146
 * Trigger an event, sending to all downstream handlers                                                                // 1147
 *   listening for provided 'type' key.                                                                                // 1148
 *                                                                                                                     // 1149
 * @method emit                                                                                                        // 1150
 *                                                                                                                     // 1151
 * @param {string} type event type key (for example, 'click')                                                          // 1152
 * @param {Object} event event data                                                                                    // 1153
 * @return {EventHandler} this                                                                                         // 1154
 */                                                                                                                    // 1155
EventEmitter.prototype.emit = function emit(type, event) {                                                             // 1156
    var handlers = this.listeners[type];                                                                               // 1157
    if (handlers) {                                                                                                    // 1158
        for (var i = 0; i < handlers.length; i++) {                                                                    // 1159
            handlers[i].call(this._owner, event);                                                                      // 1160
        }                                                                                                              // 1161
    }                                                                                                                  // 1162
    return this;                                                                                                       // 1163
};                                                                                                                     // 1164
                                                                                                                       // 1165
/**                                                                                                                    // 1166
 * Bind a callback function to an event type handled by this object.                                                   // 1167
 *                                                                                                                     // 1168
 * @method "on"                                                                                                        // 1169
 *                                                                                                                     // 1170
 * @param {string} type event type key (for example, 'click')                                                          // 1171
 * @param {function(string, Object)} handler callback                                                                  // 1172
 * @return {EventHandler} this                                                                                         // 1173
 */                                                                                                                    // 1174
   EventEmitter.prototype.on = function on(type, handler) {                                                            // 1175
    if (!(type in this.listeners)) this.listeners[type] = [];                                                          // 1176
    var index = this.listeners[type].indexOf(handler);                                                                 // 1177
    if (index < 0) this.listeners[type].push(handler);                                                                 // 1178
    return this;                                                                                                       // 1179
};                                                                                                                     // 1180
                                                                                                                       // 1181
/**                                                                                                                    // 1182
 * Alias for "on".                                                                                                     // 1183
 * @method addListener                                                                                                 // 1184
 */                                                                                                                    // 1185
EventEmitter.prototype.addListener = EventEmitter.prototype.on;                                                        // 1186
                                                                                                                       // 1187
   /**                                                                                                                 // 1188
 * Unbind an event by type and handler.                                                                                // 1189
 *   This undoes the work of "on".                                                                                     // 1190
 *                                                                                                                     // 1191
 * @method removeListener                                                                                              // 1192
 *                                                                                                                     // 1193
 * @param {string} type event type key (for example, 'click')                                                          // 1194
 * @param {function} handler function object to remove                                                                 // 1195
 * @return {EventEmitter} this                                                                                         // 1196
 */                                                                                                                    // 1197
EventEmitter.prototype.removeListener = function removeListener(type, handler) {                                       // 1198
    var listener = this.listeners[type];                                                                               // 1199
    if (listener !== undefined) {                                                                                      // 1200
        var index = listener.indexOf(handler);                                                                         // 1201
        if (index >= 0) listener.splice(index, 1);                                                                     // 1202
    }                                                                                                                  // 1203
    return this;                                                                                                       // 1204
};                                                                                                                     // 1205
                                                                                                                       // 1206
/**                                                                                                                    // 1207
 * Call event handlers with this set to owner.                                                                         // 1208
 *                                                                                                                     // 1209
 * @method bindThis                                                                                                    // 1210
 *                                                                                                                     // 1211
 * @param {Object} owner object this EventEmitter belongs to                                                           // 1212
 */                                                                                                                    // 1213
EventEmitter.prototype.bindThis = function bindThis(owner) {                                                           // 1214
    this._owner = owner;                                                                                               // 1215
};                                                                                                                     // 1216
                                                                                                                       // 1217
module.exports = EventEmitter;                                                                                         // 1218
},{}],7:[function(require,module,exports){                                                                             // 1219
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1220
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1221
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1222
 *                                                                                                                     // 1223
 * Owner: mark@famo.us                                                                                                 // 1224
 * @license MPL 2.0                                                                                                    // 1225
 * @copyright Famous Industries, Inc. 2014                                                                             // 1226
 */                                                                                                                    // 1227
                                                                                                                       // 1228
var EventEmitter = require('./EventEmitter');                                                                          // 1229
                                                                                                                       // 1230
/**                                                                                                                    // 1231
 * EventHandler forwards received events to a set of provided callback functions.                                      // 1232
 * It allows events to be captured, processed, and optionally piped through to other event handlers.                   // 1233
 *                                                                                                                     // 1234
 * @class EventHandler                                                                                                 // 1235
 * @extends EventEmitter                                                                                               // 1236
 * @constructor                                                                                                        // 1237
 */                                                                                                                    // 1238
function EventHandler() {                                                                                              // 1239
    EventEmitter.apply(this, arguments);                                                                               // 1240
                                                                                                                       // 1241
    this.downstream = []; // downstream event handlers                                                                 // 1242
    this.downstreamFn = []; // downstream functions                                                                    // 1243
                                                                                                                       // 1244
    this.upstream = []; // upstream event handlers                                                                     // 1245
    this.upstreamListeners = {}; // upstream listeners                                                                 // 1246
}                                                                                                                      // 1247
EventHandler.prototype = Object.create(EventEmitter.prototype);                                                        // 1248
EventHandler.prototype.constructor = EventHandler;                                                                     // 1249
                                                                                                                       // 1250
/**                                                                                                                    // 1251
 * Assign an event handler to receive an object's input events.                                                        // 1252
 *                                                                                                                     // 1253
 * @method setInputHandler                                                                                             // 1254
 * @static                                                                                                             // 1255
 *                                                                                                                     // 1256
 * @param {Object} object object to mix trigger, subscribe, and unsubscribe functions into                             // 1257
 * @param {EventHandler} handler assigned event handler                                                                // 1258
 */                                                                                                                    // 1259
EventHandler.setInputHandler = function setInputHandler(object, handler) {                                             // 1260
    object.trigger = handler.trigger.bind(handler);                                                                    // 1261
    if (handler.subscribe && handler.unsubscribe) {                                                                    // 1262
        object.subscribe = handler.subscribe.bind(handler);                                                            // 1263
        object.unsubscribe = handler.unsubscribe.bind(handler);                                                        // 1264
    }                                                                                                                  // 1265
};                                                                                                                     // 1266
                                                                                                                       // 1267
/**                                                                                                                    // 1268
 * Assign an event handler to receive an object's output events.                                                       // 1269
 *                                                                                                                     // 1270
 * @method setOutputHandler                                                                                            // 1271
 * @static                                                                                                             // 1272
 *                                                                                                                     // 1273
 * @param {Object} object object to mix pipe, unpipe, on, addListener, and removeListener functions into               // 1274
 * @param {EventHandler} handler assigned event handler                                                                // 1275
 */                                                                                                                    // 1276
EventHandler.setOutputHandler = function setOutputHandler(object, handler) {                                           // 1277
    if (handler instanceof EventHandler) handler.bindThis(object);                                                     // 1278
    object.pipe = handler.pipe.bind(handler);                                                                          // 1279
    object.unpipe = handler.unpipe.bind(handler);                                                                      // 1280
    object.on = handler.on.bind(handler);                                                                              // 1281
    object.addListener = object.on;                                                                                    // 1282
    object.removeListener = handler.removeListener.bind(handler);                                                      // 1283
};                                                                                                                     // 1284
                                                                                                                       // 1285
/**                                                                                                                    // 1286
 * Trigger an event, sending to all downstream handlers                                                                // 1287
 *   listening for provided 'type' key.                                                                                // 1288
 *                                                                                                                     // 1289
 * @method emit                                                                                                        // 1290
 *                                                                                                                     // 1291
 * @param {string} type event type key (for example, 'click')                                                          // 1292
 * @param {Object} event event data                                                                                    // 1293
 * @return {EventHandler} this                                                                                         // 1294
 */                                                                                                                    // 1295
EventHandler.prototype.emit = function emit(type, event) {                                                             // 1296
    EventEmitter.prototype.emit.apply(this, arguments);                                                                // 1297
    var i = 0;                                                                                                         // 1298
    for (i = 0; i < this.downstream.length; i++) {                                                                     // 1299
        if (this.downstream[i].trigger) this.downstream[i].trigger(type, event);                                       // 1300
    }                                                                                                                  // 1301
    for (i = 0; i < this.downstreamFn.length; i++) {                                                                   // 1302
        this.downstreamFn[i](type, event);                                                                             // 1303
    }                                                                                                                  // 1304
    return this;                                                                                                       // 1305
};                                                                                                                     // 1306
                                                                                                                       // 1307
/**                                                                                                                    // 1308
 * Alias for emit                                                                                                      // 1309
 * @method addListener                                                                                                 // 1310
 */                                                                                                                    // 1311
EventHandler.prototype.trigger = EventHandler.prototype.emit;                                                          // 1312
                                                                                                                       // 1313
/**                                                                                                                    // 1314
 * Add event handler object to set of downstream handlers.                                                             // 1315
 *                                                                                                                     // 1316
 * @method pipe                                                                                                        // 1317
 *                                                                                                                     // 1318
 * @param {EventHandler} target event handler target object                                                            // 1319
 * @return {EventHandler} passed event handler                                                                         // 1320
 */                                                                                                                    // 1321
EventHandler.prototype.pipe = function pipe(target) {                                                                  // 1322
    if (target.subscribe instanceof Function) return target.subscribe(this);                                           // 1323
                                                                                                                       // 1324
    var downstreamCtx = (target instanceof Function) ? this.downstreamFn : this.downstream;                            // 1325
    var index = downstreamCtx.indexOf(target);                                                                         // 1326
    if (index < 0) downstreamCtx.push(target);                                                                         // 1327
                                                                                                                       // 1328
    if (target instanceof Function) target('pipe', null);                                                              // 1329
    else if (target.trigger) target.trigger('pipe', null);                                                             // 1330
                                                                                                                       // 1331
    return target;                                                                                                     // 1332
};                                                                                                                     // 1333
                                                                                                                       // 1334
/**                                                                                                                    // 1335
 * Remove handler object from set of downstream handlers.                                                              // 1336
 *   Undoes work of "pipe".                                                                                            // 1337
 *                                                                                                                     // 1338
 * @method unpipe                                                                                                      // 1339
 *                                                                                                                     // 1340
 * @param {EventHandler} target target handler object                                                                  // 1341
 * @return {EventHandler} provided target                                                                              // 1342
 */                                                                                                                    // 1343
EventHandler.prototype.unpipe = function unpipe(target) {                                                              // 1344
    if (target.unsubscribe instanceof Function) return target.unsubscribe(this);                                       // 1345
                                                                                                                       // 1346
    var downstreamCtx = (target instanceof Function) ? this.downstreamFn : this.downstream;                            // 1347
    var index = downstreamCtx.indexOf(target);                                                                         // 1348
    if (index >= 0) {                                                                                                  // 1349
        downstreamCtx.splice(index, 1);                                                                                // 1350
        if (target instanceof Function) target('unpipe', null);                                                        // 1351
        else if (target.trigger) target.trigger('unpipe', null);                                                       // 1352
        return target;                                                                                                 // 1353
    }                                                                                                                  // 1354
    else return false;                                                                                                 // 1355
};                                                                                                                     // 1356
                                                                                                                       // 1357
/**                                                                                                                    // 1358
 * Bind a callback function to an event type handled by this object.                                                   // 1359
 *                                                                                                                     // 1360
 * @method "on"                                                                                                        // 1361
 *                                                                                                                     // 1362
 * @param {string} type event type key (for example, 'click')                                                          // 1363
 * @param {function(string, Object)} handler callback                                                                  // 1364
 * @return {EventHandler} this                                                                                         // 1365
 */                                                                                                                    // 1366
EventHandler.prototype.on = function on(type, handler) {                                                               // 1367
    EventEmitter.prototype.on.apply(this, arguments);                                                                  // 1368
    if (!(type in this.upstreamListeners)) {                                                                           // 1369
        var upstreamListener = this.trigger.bind(this, type);                                                          // 1370
        this.upstreamListeners[type] = upstreamListener;                                                               // 1371
        for (var i = 0; i < this.upstream.length; i++) {                                                               // 1372
            this.upstream[i].on(type, upstreamListener);                                                               // 1373
        }                                                                                                              // 1374
    }                                                                                                                  // 1375
    return this;                                                                                                       // 1376
};                                                                                                                     // 1377
                                                                                                                       // 1378
/**                                                                                                                    // 1379
 * Alias for "on"                                                                                                      // 1380
 * @method addListener                                                                                                 // 1381
 */                                                                                                                    // 1382
EventHandler.prototype.addListener = EventHandler.prototype.on;                                                        // 1383
                                                                                                                       // 1384
/**                                                                                                                    // 1385
 * Listen for events from an upstream event handler.                                                                   // 1386
 *                                                                                                                     // 1387
 * @method subscribe                                                                                                   // 1388
 *                                                                                                                     // 1389
 * @param {EventEmitter} source source emitter object                                                                  // 1390
 * @return {EventHandler} this                                                                                         // 1391
 */                                                                                                                    // 1392
EventHandler.prototype.subscribe = function subscribe(source) {                                                        // 1393
    var index = this.upstream.indexOf(source);                                                                         // 1394
    if (index < 0) {                                                                                                   // 1395
        this.upstream.push(source);                                                                                    // 1396
        for (var type in this.upstreamListeners) {                                                                     // 1397
            source.on(type, this.upstreamListeners[type]);                                                             // 1398
        }                                                                                                              // 1399
    }                                                                                                                  // 1400
    return this;                                                                                                       // 1401
};                                                                                                                     // 1402
                                                                                                                       // 1403
/**                                                                                                                    // 1404
 * Stop listening to events from an upstream event handler.                                                            // 1405
 *                                                                                                                     // 1406
 * @method unsubscribe                                                                                                 // 1407
 *                                                                                                                     // 1408
 * @param {EventEmitter} source source emitter object                                                                  // 1409
 * @return {EventHandler} this                                                                                         // 1410
 */                                                                                                                    // 1411
EventHandler.prototype.unsubscribe = function unsubscribe(source) {                                                    // 1412
    var index = this.upstream.indexOf(source);                                                                         // 1413
    if (index >= 0) {                                                                                                  // 1414
        this.upstream.splice(index, 1);                                                                                // 1415
        for (var type in this.upstreamListeners) {                                                                     // 1416
            source.removeListener(type, this.upstreamListeners[type]);                                                 // 1417
        }                                                                                                              // 1418
    }                                                                                                                  // 1419
    return this;                                                                                                       // 1420
};                                                                                                                     // 1421
                                                                                                                       // 1422
module.exports = EventHandler;                                                                                         // 1423
},{"./EventEmitter":6}],8:[function(require,module,exports){                                                           // 1424
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1425
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1426
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1427
 *                                                                                                                     // 1428
 * Owner: mark@famo.us                                                                                                 // 1429
 * @license MPL 2.0                                                                                                    // 1430
 * @copyright Famous Industries, Inc. 2014                                                                             // 1431
 */                                                                                                                    // 1432
                                                                                                                       // 1433
var Context = require('./Context');                                                                                    // 1434
var Transform = require('./Transform');                                                                                // 1435
var Surface = require('./Surface');                                                                                    // 1436
                                                                                                                       // 1437
/**                                                                                                                    // 1438
 * A Context designed to contain surfaces and set properties                                                           // 1439
 *   to be applied to all of them at once.                                                                             // 1440
 *   This is primarily used for specific performance improvements in the rendering engine.                             // 1441
 *   Private.                                                                                                          // 1442
 *                                                                                                                     // 1443
 * @private                                                                                                            // 1444
 * @class Group                                                                                                        // 1445
 * @extends Surface                                                                                                    // 1446
 * @constructor                                                                                                        // 1447
 * @param {Object} [options] Surface options array (see Surface})                                                      // 1448
 */                                                                                                                    // 1449
function Group(options) {                                                                                              // 1450
    Surface.call(this, options);                                                                                       // 1451
    this._shouldRecalculateSize = false;                                                                               // 1452
    this._container = document.createDocumentFragment();                                                               // 1453
    this.context = new Context(this._container);                                                                       // 1454
    this.setContent(this._container);                                                                                  // 1455
    this._groupSize = [undefined, undefined];                                                                          // 1456
}                                                                                                                      // 1457
                                                                                                                       // 1458
/** @const */                                                                                                          // 1459
Group.SIZE_ZERO = [0, 0];                                                                                              // 1460
                                                                                                                       // 1461
Group.prototype = Object.create(Surface.prototype);                                                                    // 1462
Group.prototype.elementType = 'div';                                                                                   // 1463
Group.prototype.elementClass = 'famous-group';                                                                         // 1464
                                                                                                                       // 1465
/**                                                                                                                    // 1466
 * Add renderables to this component's render tree.                                                                    // 1467
 *                                                                                                                     // 1468
 * @method add                                                                                                         // 1469
 * @private                                                                                                            // 1470
 * @param {Object} obj renderable object                                                                               // 1471
 * @return {RenderNode} Render wrapping provided object, if not already a RenderNode                                   // 1472
 */                                                                                                                    // 1473
Group.prototype.add = function add() {                                                                                 // 1474
    return this.context.add.apply(this.context, arguments);                                                            // 1475
};                                                                                                                     // 1476
                                                                                                                       // 1477
/**                                                                                                                    // 1478
 * Generate a render spec from the contents of this component.                                                         // 1479
 *                                                                                                                     // 1480
 * @private                                                                                                            // 1481
 * @method render                                                                                                      // 1482
 * @return {Number} Render spec for this component                                                                     // 1483
 */                                                                                                                    // 1484
Group.prototype.render = function render() {                                                                           // 1485
    return Surface.prototype.render.call(this);                                                                        // 1486
};                                                                                                                     // 1487
                                                                                                                       // 1488
/**                                                                                                                    // 1489
 * Place the document element this component manages into the document.                                                // 1490
 *                                                                                                                     // 1491
 * @private                                                                                                            // 1492
 * @method deploy                                                                                                      // 1493
 * @param {Node} target document parent of this container                                                              // 1494
 */                                                                                                                    // 1495
Group.prototype.deploy = function deploy(target) {                                                                     // 1496
    this.context.migrate(target);                                                                                      // 1497
};                                                                                                                     // 1498
                                                                                                                       // 1499
/**                                                                                                                    // 1500
 * Remove this component and contained content from the document                                                       // 1501
 *                                                                                                                     // 1502
 * @private                                                                                                            // 1503
 * @method recall                                                                                                      // 1504
 *                                                                                                                     // 1505
 * @param {Node} target node to which the component was deployed                                                       // 1506
 */                                                                                                                    // 1507
Group.prototype.recall = function recall(target) {                                                                     // 1508
    this._container = document.createDocumentFragment();                                                               // 1509
    this.context.migrate(this._container);                                                                             // 1510
};                                                                                                                     // 1511
                                                                                                                       // 1512
/**                                                                                                                    // 1513
 * Apply changes from this component to the corresponding document element.                                            // 1514
 *                                                                                                                     // 1515
 * @private                                                                                                            // 1516
 * @method commit                                                                                                      // 1517
 *                                                                                                                     // 1518
 * @param {Object} context update spec passed in from above in the render tree.                                        // 1519
 */                                                                                                                    // 1520
Group.prototype.commit = function commit(context) {                                                                    // 1521
    var transform = context.transform;                                                                                 // 1522
    var origin = context.origin;                                                                                       // 1523
    var opacity = context.opacity;                                                                                     // 1524
    var size = context.size;                                                                                           // 1525
    var result = Surface.prototype.commit.call(this, {                                                                 // 1526
        allocator: context.allocator,                                                                                  // 1527
        transform: Transform.thenMove(transform, [-origin[0] * size[0], -origin[1] * size[1], 0]),                     // 1528
        opacity: opacity,                                                                                              // 1529
        origin: origin,                                                                                                // 1530
        size: Group.SIZE_ZERO                                                                                          // 1531
    });                                                                                                                // 1532
    if (size[0] !== this._groupSize[0] || size[1] !== this._groupSize[1]) {                                            // 1533
        this._groupSize[0] = size[0];                                                                                  // 1534
        this._groupSize[1] = size[1];                                                                                  // 1535
        this.context.setSize(size);                                                                                    // 1536
    }                                                                                                                  // 1537
    this.context.update({                                                                                              // 1538
        transform: Transform.translate(-origin[0] * size[0], -origin[1] * size[1], 0),                                 // 1539
        origin: origin,                                                                                                // 1540
        size: size                                                                                                     // 1541
    });                                                                                                                // 1542
    return result;                                                                                                     // 1543
};                                                                                                                     // 1544
                                                                                                                       // 1545
module.exports = Group;                                                                                                // 1546
},{"./Context":1,"./Surface":14,"./Transform":15}],9:[function(require,module,exports){                                // 1547
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1548
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1549
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1550
 *                                                                                                                     // 1551
 * Owner: mark@famo.us                                                                                                 // 1552
 * @license MPL 2.0                                                                                                    // 1553
 * @copyright Famous Industries, Inc. 2014                                                                             // 1554
 */                                                                                                                    // 1555
                                                                                                                       // 1556
var Transform = require('./Transform');                                                                                // 1557
var Transitionable = require('../transitions/Transitionable');                                                         // 1558
var TransitionableTransform = require('../transitions/TransitionableTransform');                                       // 1559
                                                                                                                       // 1560
/**                                                                                                                    // 1561
 *                                                                                                                     // 1562
 *  A collection of visual changes to be                                                                               // 1563
 *    applied to another renderable component. This collection includes a                                              // 1564
 *    transform matrix, an opacity constant, a size, an origin specifier.                                              // 1565
 *    Modifier objects can be added to any RenderNode or object                                                        // 1566
 *    capable of displaying renderables.  The Modifier's children and descendants                                      // 1567
 *    are transformed by the amounts specified in the Modifier's properties.                                           // 1568
 *                                                                                                                     // 1569
 * @class Modifier                                                                                                     // 1570
 * @constructor                                                                                                        // 1571
 * @param {Object} [options] overrides of default options                                                              // 1572
 * @param {Transform} [options.transform] affine transformation matrix                                                 // 1573
 * @param {Number} [options.opacity]                                                                                   // 1574
 * @param {Array.Number} [options.origin] origin adjustment                                                            // 1575
 * @param {Array.Number} [options.size] size to apply to descendants                                                   // 1576
 */                                                                                                                    // 1577
function Modifier(options) {                                                                                           // 1578
    this._transformGetter = null;                                                                                      // 1579
    this._opacityGetter = null;                                                                                        // 1580
    this._originGetter = null;                                                                                         // 1581
    this._alignGetter = null;                                                                                          // 1582
    this._sizeGetter = null;                                                                                           // 1583
    this._proportionGetter = null;                                                                                     // 1584
                                                                                                                       // 1585
    /* TODO: remove this when deprecation complete */                                                                  // 1586
    this._legacyStates = {};                                                                                           // 1587
                                                                                                                       // 1588
    this._output = {                                                                                                   // 1589
        transform: Transform.identity,                                                                                 // 1590
        opacity: 1,                                                                                                    // 1591
        origin: null,                                                                                                  // 1592
        align: null,                                                                                                   // 1593
        size: null,                                                                                                    // 1594
        proportions: null,                                                                                             // 1595
        target: null                                                                                                   // 1596
    };                                                                                                                 // 1597
                                                                                                                       // 1598
    if (options) {                                                                                                     // 1599
        if (options.transform) this.transformFrom(options.transform);                                                  // 1600
        if (options.opacity !== undefined) this.opacityFrom(options.opacity);                                          // 1601
        if (options.origin) this.originFrom(options.origin);                                                           // 1602
        if (options.align) this.alignFrom(options.align);                                                              // 1603
        if (options.size) this.sizeFrom(options.size);                                                                 // 1604
        if (options.proportions) this.proportionsFrom(options.proportions);                                            // 1605
    }                                                                                                                  // 1606
}                                                                                                                      // 1607
                                                                                                                       // 1608
/**                                                                                                                    // 1609
 * Function, object, or static transform matrix which provides the transform.                                          // 1610
 *   This is evaluated on every tick of the engine.                                                                    // 1611
 *                                                                                                                     // 1612
 * @method transformFrom                                                                                               // 1613
 *                                                                                                                     // 1614
 * @param {Object} transform transform provider object                                                                 // 1615
 * @return {Modifier} this                                                                                             // 1616
 */                                                                                                                    // 1617
Modifier.prototype.transformFrom = function transformFrom(transform) {                                                 // 1618
    if (transform instanceof Function) this._transformGetter = transform;                                              // 1619
    else if (transform instanceof Object && transform.get) this._transformGetter = transform.get.bind(transform);      // 1620
    else {                                                                                                             // 1621
        this._transformGetter = null;                                                                                  // 1622
        this._output.transform = transform;                                                                            // 1623
    }                                                                                                                  // 1624
    return this;                                                                                                       // 1625
};                                                                                                                     // 1626
                                                                                                                       // 1627
/**                                                                                                                    // 1628
 * Set function, object, or number to provide opacity, in range [0,1].                                                 // 1629
 *                                                                                                                     // 1630
 * @method opacityFrom                                                                                                 // 1631
 *                                                                                                                     // 1632
 * @param {Object} opacity provider object                                                                             // 1633
 * @return {Modifier} this                                                                                             // 1634
 */                                                                                                                    // 1635
Modifier.prototype.opacityFrom = function opacityFrom(opacity) {                                                       // 1636
    if (opacity instanceof Function) this._opacityGetter = opacity;                                                    // 1637
    else if (opacity instanceof Object && opacity.get) this._opacityGetter = opacity.get.bind(opacity);                // 1638
    else {                                                                                                             // 1639
        this._opacityGetter = null;                                                                                    // 1640
        this._output.opacity = opacity;                                                                                // 1641
    }                                                                                                                  // 1642
    return this;                                                                                                       // 1643
};                                                                                                                     // 1644
                                                                                                                       // 1645
/**                                                                                                                    // 1646
 * Set function, object, or numerical array to provide origin, as [x,y],                                               // 1647
 *   where x and y are in the range [0,1].                                                                             // 1648
 *                                                                                                                     // 1649
 * @method originFrom                                                                                                  // 1650
 *                                                                                                                     // 1651
 * @param {Object} origin provider object                                                                              // 1652
 * @return {Modifier} this                                                                                             // 1653
 */                                                                                                                    // 1654
Modifier.prototype.originFrom = function originFrom(origin) {                                                          // 1655
    if (origin instanceof Function) this._originGetter = origin;                                                       // 1656
    else if (origin instanceof Object && origin.get) this._originGetter = origin.get.bind(origin);                     // 1657
    else {                                                                                                             // 1658
        this._originGetter = null;                                                                                     // 1659
        this._output.origin = origin;                                                                                  // 1660
    }                                                                                                                  // 1661
    return this;                                                                                                       // 1662
};                                                                                                                     // 1663
                                                                                                                       // 1664
/**                                                                                                                    // 1665
 * Set function, object, or numerical array to provide align, as [x,y],                                                // 1666
 *   where x and y are in the range [0,1].                                                                             // 1667
 *                                                                                                                     // 1668
 * @method alignFrom                                                                                                   // 1669
 *                                                                                                                     // 1670
 * @param {Object} align provider object                                                                               // 1671
 * @return {Modifier} this                                                                                             // 1672
 */                                                                                                                    // 1673
Modifier.prototype.alignFrom = function alignFrom(align) {                                                             // 1674
    if (align instanceof Function) this._alignGetter = align;                                                          // 1675
    else if (align instanceof Object && align.get) this._alignGetter = align.get.bind(align);                          // 1676
    else {                                                                                                             // 1677
        this._alignGetter = null;                                                                                      // 1678
        this._output.align = align;                                                                                    // 1679
    }                                                                                                                  // 1680
    return this;                                                                                                       // 1681
};                                                                                                                     // 1682
                                                                                                                       // 1683
/**                                                                                                                    // 1684
 * Set function, object, or numerical array to provide size, as [width, height].                                       // 1685
 *                                                                                                                     // 1686
 * @method sizeFrom                                                                                                    // 1687
 *                                                                                                                     // 1688
 * @param {Object} size provider object                                                                                // 1689
 * @return {Modifier} this                                                                                             // 1690
 */                                                                                                                    // 1691
Modifier.prototype.sizeFrom = function sizeFrom(size) {                                                                // 1692
    if (size instanceof Function) this._sizeGetter = size;                                                             // 1693
    else if (size instanceof Object && size.get) this._sizeGetter = size.get.bind(size);                               // 1694
    else {                                                                                                             // 1695
        this._sizeGetter = null;                                                                                       // 1696
        this._output.size = size;                                                                                      // 1697
    }                                                                                                                  // 1698
    return this;                                                                                                       // 1699
};                                                                                                                     // 1700
                                                                                                                       // 1701
/**                                                                                                                    // 1702
 * Set function, object, or numerical array to provide proportions, as [percent of width, percent of height].          // 1703
 *                                                                                                                     // 1704
 * @method proportionsFrom                                                                                             // 1705
 *                                                                                                                     // 1706
 * @param {Object} proportions provider object                                                                         // 1707
 * @return {Modifier} this                                                                                             // 1708
 */                                                                                                                    // 1709
Modifier.prototype.proportionsFrom = function proportionsFrom(proportions) {                                           // 1710
    if (proportions instanceof Function) this._proportionGetter = proportions;                                         // 1711
    else if (proportions instanceof Object && proportions.get) this._proportionGetter = proportions.get.bind(proportions);
    else {                                                                                                             // 1713
        this._proportionGetter = null;                                                                                 // 1714
        this._output.proportions = proportions;                                                                        // 1715
    }                                                                                                                  // 1716
    return this;                                                                                                       // 1717
};                                                                                                                     // 1718
                                                                                                                       // 1719
 /**                                                                                                                   // 1720
 * Deprecated: Prefer transformFrom with static Transform, or use a TransitionableTransform.                           // 1721
 * @deprecated                                                                                                         // 1722
 * @method setTransform                                                                                                // 1723
 *                                                                                                                     // 1724
 * @param {Transform} transform Transform to transition to                                                             // 1725
 * @param {Transitionable} transition Valid transitionable object                                                      // 1726
 * @param {Function} callback callback to call after transition completes                                              // 1727
 * @return {Modifier} this                                                                                             // 1728
 */                                                                                                                    // 1729
Modifier.prototype.setTransform = function setTransform(transform, transition, callback) {                             // 1730
    if (transition || this._legacyStates.transform) {                                                                  // 1731
        if (!this._legacyStates.transform) {                                                                           // 1732
            this._legacyStates.transform = new TransitionableTransform(this._output.transform);                        // 1733
        }                                                                                                              // 1734
        if (!this._transformGetter) this.transformFrom(this._legacyStates.transform);                                  // 1735
                                                                                                                       // 1736
        this._legacyStates.transform.set(transform, transition, callback);                                             // 1737
        return this;                                                                                                   // 1738
    }                                                                                                                  // 1739
    else return this.transformFrom(transform);                                                                         // 1740
};                                                                                                                     // 1741
                                                                                                                       // 1742
/**                                                                                                                    // 1743
 * Deprecated: Prefer opacityFrom with static opacity array, or use a Transitionable with that opacity.                // 1744
 * @deprecated                                                                                                         // 1745
 * @method setOpacity                                                                                                  // 1746
 *                                                                                                                     // 1747
 * @param {Number} opacity Opacity value to transition to.                                                             // 1748
 * @param {Transitionable} transition Valid transitionable object                                                      // 1749
 * @param {Function} callback callback to call after transition completes                                              // 1750
 * @return {Modifier} this                                                                                             // 1751
 */                                                                                                                    // 1752
Modifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {                                   // 1753
    if (transition || this._legacyStates.opacity) {                                                                    // 1754
        if (!this._legacyStates.opacity) {                                                                             // 1755
            this._legacyStates.opacity = new Transitionable(this._output.opacity);                                     // 1756
        }                                                                                                              // 1757
        if (!this._opacityGetter) this.opacityFrom(this._legacyStates.opacity);                                        // 1758
                                                                                                                       // 1759
        return this._legacyStates.opacity.set(opacity, transition, callback);                                          // 1760
    }                                                                                                                  // 1761
    else return this.opacityFrom(opacity);                                                                             // 1762
};                                                                                                                     // 1763
                                                                                                                       // 1764
/**                                                                                                                    // 1765
 * Deprecated: Prefer originFrom with static origin array, or use a Transitionable with that origin.                   // 1766
 * @deprecated                                                                                                         // 1767
 * @method setOrigin                                                                                                   // 1768
 *                                                                                                                     // 1769
 * @param {Array.Number} origin two element array with values between 0 and 1.                                         // 1770
 * @param {Transitionable} transition Valid transitionable object                                                      // 1771
 * @param {Function} callback callback to call after transition completes                                              // 1772
 * @return {Modifier} this                                                                                             // 1773
 */                                                                                                                    // 1774
Modifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {                                      // 1775
    /* TODO: remove this if statement when deprecation complete */                                                     // 1776
    if (transition || this._legacyStates.origin) {                                                                     // 1777
                                                                                                                       // 1778
        if (!this._legacyStates.origin) {                                                                              // 1779
            this._legacyStates.origin = new Transitionable(this._output.origin || [0, 0]);                             // 1780
        }                                                                                                              // 1781
        if (!this._originGetter) this.originFrom(this._legacyStates.origin);                                           // 1782
                                                                                                                       // 1783
        this._legacyStates.origin.set(origin, transition, callback);                                                   // 1784
        return this;                                                                                                   // 1785
    }                                                                                                                  // 1786
    else return this.originFrom(origin);                                                                               // 1787
};                                                                                                                     // 1788
                                                                                                                       // 1789
/**                                                                                                                    // 1790
 * Deprecated: Prefer alignFrom with static align array, or use a Transitionable with that align.                      // 1791
 * @deprecated                                                                                                         // 1792
 * @method setAlign                                                                                                    // 1793
 *                                                                                                                     // 1794
 * @param {Array.Number} align two element array with values between 0 and 1.                                          // 1795
 * @param {Transitionable} transition Valid transitionable object                                                      // 1796
 * @param {Function} callback callback to call after transition completes                                              // 1797
 * @return {Modifier} this                                                                                             // 1798
 */                                                                                                                    // 1799
Modifier.prototype.setAlign = function setAlign(align, transition, callback) {                                         // 1800
    /* TODO: remove this if statement when deprecation complete */                                                     // 1801
    if (transition || this._legacyStates.align) {                                                                      // 1802
                                                                                                                       // 1803
        if (!this._legacyStates.align) {                                                                               // 1804
            this._legacyStates.align = new Transitionable(this._output.align || [0, 0]);                               // 1805
        }                                                                                                              // 1806
        if (!this._alignGetter) this.alignFrom(this._legacyStates.align);                                              // 1807
                                                                                                                       // 1808
        this._legacyStates.align.set(align, transition, callback);                                                     // 1809
        return this;                                                                                                   // 1810
    }                                                                                                                  // 1811
    else return this.alignFrom(align);                                                                                 // 1812
};                                                                                                                     // 1813
                                                                                                                       // 1814
/**                                                                                                                    // 1815
 * Deprecated: Prefer sizeFrom with static origin array, or use a Transitionable with that size.                       // 1816
 * @deprecated                                                                                                         // 1817
 * @method setSize                                                                                                     // 1818
 * @param {Array.Number} size two element array of [width, height]                                                     // 1819
 * @param {Transitionable} transition Valid transitionable object                                                      // 1820
 * @param {Function} callback callback to call after transition completes                                              // 1821
 * @return {Modifier} this                                                                                             // 1822
 */                                                                                                                    // 1823
Modifier.prototype.setSize = function setSize(size, transition, callback) {                                            // 1824
    if (size && (transition || this._legacyStates.size)) {                                                             // 1825
        if (!this._legacyStates.size) {                                                                                // 1826
            this._legacyStates.size = new Transitionable(this._output.size || [0, 0]);                                 // 1827
        }                                                                                                              // 1828
        if (!this._sizeGetter) this.sizeFrom(this._legacyStates.size);                                                 // 1829
                                                                                                                       // 1830
        this._legacyStates.size.set(size, transition, callback);                                                       // 1831
        return this;                                                                                                   // 1832
    }                                                                                                                  // 1833
    else return this.sizeFrom(size);                                                                                   // 1834
};                                                                                                                     // 1835
                                                                                                                       // 1836
/**                                                                                                                    // 1837
 * Deprecated: Prefer proportionsFrom with static origin array, or use a Transitionable with those proportions.        // 1838
 * @deprecated                                                                                                         // 1839
 * @method setProportions                                                                                              // 1840
 * @param {Array.Number} proportions two element array of [percent of width, percent of height]                        // 1841
 * @param {Transitionable} transition Valid transitionable object                                                      // 1842
 * @param {Function} callback callback to call after transition completes                                              // 1843
 * @return {Modifier} this                                                                                             // 1844
 */                                                                                                                    // 1845
Modifier.prototype.setProportions = function setProportions(proportions, transition, callback) {                       // 1846
    if (proportions && (transition || this._legacyStates.proportions)) {                                               // 1847
        if (!this._legacyStates.proportions) {                                                                         // 1848
            this._legacyStates.proportions = new Transitionable(this._output.proportions || [0, 0]);                   // 1849
        }                                                                                                              // 1850
        if (!this._proportionGetter) this.proportionsFrom(this._legacyStates.proportions);                             // 1851
                                                                                                                       // 1852
        this._legacyStates.proportions.set(proportions, transition, callback);                                         // 1853
        return this;                                                                                                   // 1854
    }                                                                                                                  // 1855
    else return this.proportionsFrom(proportions);                                                                     // 1856
};                                                                                                                     // 1857
                                                                                                                       // 1858
/**                                                                                                                    // 1859
 * Deprecated: Prefer to stop transform in your provider object.                                                       // 1860
 * @deprecated                                                                                                         // 1861
 * @method halt                                                                                                        // 1862
 */                                                                                                                    // 1863
Modifier.prototype.halt = function halt() {                                                                            // 1864
    if (this._legacyStates.transform) this._legacyStates.transform.halt();                                             // 1865
    if (this._legacyStates.opacity) this._legacyStates.opacity.halt();                                                 // 1866
    if (this._legacyStates.origin) this._legacyStates.origin.halt();                                                   // 1867
    if (this._legacyStates.align) this._legacyStates.align.halt();                                                     // 1868
    if (this._legacyStates.size) this._legacyStates.size.halt();                                                       // 1869
    if (this._legacyStates.proportions) this._legacyStates.proportions.halt();                                         // 1870
    this._transformGetter = null;                                                                                      // 1871
    this._opacityGetter = null;                                                                                        // 1872
    this._originGetter = null;                                                                                         // 1873
    this._alignGetter = null;                                                                                          // 1874
    this._sizeGetter = null;                                                                                           // 1875
    this._proportionGetter = null;                                                                                     // 1876
};                                                                                                                     // 1877
                                                                                                                       // 1878
/**                                                                                                                    // 1879
 * Deprecated: Prefer to use your provided transform or output of your transform provider.                             // 1880
 * @deprecated                                                                                                         // 1881
 * @method getTransform                                                                                                // 1882
 * @return {Object} transform provider object                                                                          // 1883
 */                                                                                                                    // 1884
Modifier.prototype.getTransform = function getTransform() {                                                            // 1885
    return this._transformGetter();                                                                                    // 1886
};                                                                                                                     // 1887
                                                                                                                       // 1888
/**                                                                                                                    // 1889
 * Deprecated: Prefer to determine the end state of your transform from your transform provider                        // 1890
 * @deprecated                                                                                                         // 1891
 * @method getFinalTransform                                                                                           // 1892
 * @return {Transform} transform matrix                                                                                // 1893
 */                                                                                                                    // 1894
Modifier.prototype.getFinalTransform = function getFinalTransform() {                                                  // 1895
    return this._legacyStates.transform ? this._legacyStates.transform.getFinal() : this._output.transform;            // 1896
};                                                                                                                     // 1897
                                                                                                                       // 1898
/**                                                                                                                    // 1899
 * Deprecated: Prefer to use your provided opacity or output of your opacity provider.                                 // 1900
 * @deprecated                                                                                                         // 1901
 * @method getOpacity                                                                                                  // 1902
 * @return {Object} opacity provider object                                                                            // 1903
 */                                                                                                                    // 1904
Modifier.prototype.getOpacity = function getOpacity() {                                                                // 1905
    return this._opacityGetter();                                                                                      // 1906
};                                                                                                                     // 1907
                                                                                                                       // 1908
/**                                                                                                                    // 1909
 * Deprecated: Prefer to use your provided origin or output of your origin provider.                                   // 1910
 * @deprecated                                                                                                         // 1911
 * @method getOrigin                                                                                                   // 1912
 * @return {Object} origin provider object                                                                             // 1913
 */                                                                                                                    // 1914
Modifier.prototype.getOrigin = function getOrigin() {                                                                  // 1915
    return this._originGetter();                                                                                       // 1916
};                                                                                                                     // 1917
                                                                                                                       // 1918
/**                                                                                                                    // 1919
 * Deprecated: Prefer to use your provided align or output of your align provider.                                     // 1920
 * @deprecated                                                                                                         // 1921
 * @method getAlign                                                                                                    // 1922
 * @return {Object} align provider object                                                                              // 1923
 */                                                                                                                    // 1924
Modifier.prototype.getAlign = function getAlign() {                                                                    // 1925
    return this._alignGetter();                                                                                        // 1926
};                                                                                                                     // 1927
                                                                                                                       // 1928
/**                                                                                                                    // 1929
 * Deprecated: Prefer to use your provided size or output of your size provider.                                       // 1930
 * @deprecated                                                                                                         // 1931
 * @method getSize                                                                                                     // 1932
 * @return {Object} size provider object                                                                               // 1933
 */                                                                                                                    // 1934
Modifier.prototype.getSize = function getSize() {                                                                      // 1935
    return this._sizeGetter ? this._sizeGetter() : this._output.size;                                                  // 1936
};                                                                                                                     // 1937
                                                                                                                       // 1938
/**                                                                                                                    // 1939
 * Deprecated: Prefer to use your provided proportions or output of your proportions provider.                         // 1940
 * @deprecated                                                                                                         // 1941
 * @method getProportions                                                                                              // 1942
 * @return {Object} proportions provider object                                                                        // 1943
 */                                                                                                                    // 1944
Modifier.prototype.getProportions = function getProportions() {                                                        // 1945
    return this._proportionGetter ? this._proportionGetter() : this._output.proportions;                               // 1946
};                                                                                                                     // 1947
                                                                                                                       // 1948
// call providers on tick to receive render spec elements to apply                                                     // 1949
function _update() {                                                                                                   // 1950
    if (this._transformGetter) this._output.transform = this._transformGetter();                                       // 1951
    if (this._opacityGetter) this._output.opacity = this._opacityGetter();                                             // 1952
    if (this._originGetter) this._output.origin = this._originGetter();                                                // 1953
    if (this._alignGetter) this._output.align = this._alignGetter();                                                   // 1954
    if (this._sizeGetter) this._output.size = this._sizeGetter();                                                      // 1955
    if (this._proportionGetter) this._output.proportions = this._proportionGetter();                                   // 1956
}                                                                                                                      // 1957
                                                                                                                       // 1958
/**                                                                                                                    // 1959
 * Return render spec for this Modifier, applying to the provided                                                      // 1960
 *    target component.  This is similar to render() for Surfaces.                                                     // 1961
 *                                                                                                                     // 1962
 * @private                                                                                                            // 1963
 * @method modify                                                                                                      // 1964
 *                                                                                                                     // 1965
 * @param {Object} target (already rendered) render spec to                                                            // 1966
 *    which to apply the transform.                                                                                    // 1967
 * @return {Object} render spec for this Modifier, including the                                                       // 1968
 *    provided target                                                                                                  // 1969
 */                                                                                                                    // 1970
Modifier.prototype.modify = function modify(target) {                                                                  // 1971
    _update.call(this);                                                                                                // 1972
    this._output.target = target;                                                                                      // 1973
    return this._output;                                                                                               // 1974
};                                                                                                                     // 1975
                                                                                                                       // 1976
module.exports = Modifier;                                                                                             // 1977
},{"../transitions/Transitionable":88,"../transitions/TransitionableTransform":89,"./Transform":15}],10:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1979
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1980
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1981
 *                                                                                                                     // 1982
 * Owner: mark@famo.us                                                                                                 // 1983
 * @license MPL 2.0                                                                                                    // 1984
 * @copyright Famous Industries, Inc. 2014                                                                             // 1985
 */                                                                                                                    // 1986
                                                                                                                       // 1987
var EventHandler = require('./EventHandler');                                                                          // 1988
                                                                                                                       // 1989
/**                                                                                                                    // 1990
 *  A collection of methods for setting options which can be extended                                                  // 1991
 *  onto other classes.                                                                                                // 1992
 *                                                                                                                     // 1993
 *                                                                                                                     // 1994
 *  **** WARNING ****                                                                                                  // 1995
 *  You can only pass through objects that will compile into valid JSON.                                               // 1996
 *                                                                                                                     // 1997
 *  Valid options:                                                                                                     // 1998
 *      Strings,                                                                                                       // 1999
 *      Arrays,                                                                                                        // 2000
 *      Objects,                                                                                                       // 2001
 *      Numbers,                                                                                                       // 2002
 *      Nested Objects,                                                                                                // 2003
 *      Nested Arrays.                                                                                                 // 2004
 *                                                                                                                     // 2005
 *    This excludes:                                                                                                   // 2006
 *        Document Fragments,                                                                                          // 2007
 *        Functions                                                                                                    // 2008
 * @class OptionsManager                                                                                               // 2009
 * @constructor                                                                                                        // 2010
 * @param {Object} value options dictionary                                                                            // 2011
 */                                                                                                                    // 2012
function OptionsManager(value) {                                                                                       // 2013
    this._value = value;                                                                                               // 2014
    this.eventOutput = null;                                                                                           // 2015
}                                                                                                                      // 2016
                                                                                                                       // 2017
/**                                                                                                                    // 2018
 * Create options manager from source dictionary with arguments overriden by patch dictionary.                         // 2019
 *                                                                                                                     // 2020
 * @static                                                                                                             // 2021
 * @method OptionsManager.patch                                                                                        // 2022
 *                                                                                                                     // 2023
 * @param {Object} source source arguments                                                                             // 2024
 * @param {...Object} data argument additions and overwrites                                                           // 2025
 * @return {Object} source object                                                                                      // 2026
 */                                                                                                                    // 2027
OptionsManager.patch = function patchObject(source, data) {                                                            // 2028
    var manager = new OptionsManager(source);                                                                          // 2029
    for (var i = 1; i < arguments.length; i++) manager.patch(arguments[i]);                                            // 2030
    return source;                                                                                                     // 2031
};                                                                                                                     // 2032
                                                                                                                       // 2033
function _createEventOutput() {                                                                                        // 2034
    this.eventOutput = new EventHandler();                                                                             // 2035
    this.eventOutput.bindThis(this);                                                                                   // 2036
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 2037
}                                                                                                                      // 2038
                                                                                                                       // 2039
/**                                                                                                                    // 2040
 * Create OptionsManager from source with arguments overriden by patches.                                              // 2041
 *   Triggers 'change' event on this object's event handler if the state of                                            // 2042
 *   the OptionsManager changes as a result.                                                                           // 2043
 *                                                                                                                     // 2044
 * @method patch                                                                                                       // 2045
 *                                                                                                                     // 2046
 * @param {...Object} arguments list of patch objects                                                                  // 2047
 * @return {OptionsManager} this                                                                                       // 2048
 */                                                                                                                    // 2049
OptionsManager.prototype.patch = function patch() {                                                                    // 2050
    var myState = this._value;                                                                                         // 2051
    for (var i = 0; i < arguments.length; i++) {                                                                       // 2052
        var data = arguments[i];                                                                                       // 2053
        for (var k in data) {                                                                                          // 2054
            if ((k in myState) && (data[k] && data[k].constructor === Object) && (myState[k] && myState[k].constructor === Object)) {
                if (!myState.hasOwnProperty(k)) myState[k] = Object.create(myState[k]);                                // 2056
                this.key(k).patch(data[k]);                                                                            // 2057
                if (this.eventOutput) this.eventOutput.emit('change', {id: k, value: this.key(k).value()});            // 2058
            }                                                                                                          // 2059
            else this.set(k, data[k]);                                                                                 // 2060
        }                                                                                                              // 2061
    }                                                                                                                  // 2062
    return this;                                                                                                       // 2063
};                                                                                                                     // 2064
                                                                                                                       // 2065
/**                                                                                                                    // 2066
 * Alias for patch                                                                                                     // 2067
 *                                                                                                                     // 2068
 * @method setOptions                                                                                                  // 2069
 *                                                                                                                     // 2070
 */                                                                                                                    // 2071
OptionsManager.prototype.setOptions = OptionsManager.prototype.patch;                                                  // 2072
                                                                                                                       // 2073
/**                                                                                                                    // 2074
 * Return OptionsManager based on sub-object retrieved by key                                                          // 2075
 *                                                                                                                     // 2076
 * @method key                                                                                                         // 2077
 *                                                                                                                     // 2078
 * @param {string} identifier key                                                                                      // 2079
 * @return {OptionsManager} new options manager with the value                                                         // 2080
 */                                                                                                                    // 2081
OptionsManager.prototype.key = function key(identifier) {                                                              // 2082
    var result = new OptionsManager(this._value[identifier]);                                                          // 2083
    if (!(result._value instanceof Object) || result._value instanceof Array) result._value = {};                      // 2084
    return result;                                                                                                     // 2085
};                                                                                                                     // 2086
                                                                                                                       // 2087
/**                                                                                                                    // 2088
 * Look up value by key or get the full options hash                                                                   // 2089
 * @method get                                                                                                         // 2090
 *                                                                                                                     // 2091
 * @param {string} key key                                                                                             // 2092
 * @return {Object} associated object or full options hash                                                             // 2093
 */                                                                                                                    // 2094
OptionsManager.prototype.get = function get(key) {                                                                     // 2095
    return key ? this._value[key] : this._value;                                                                       // 2096
};                                                                                                                     // 2097
                                                                                                                       // 2098
/**                                                                                                                    // 2099
 * Alias for get                                                                                                       // 2100
 * @method getOptions                                                                                                  // 2101
 */                                                                                                                    // 2102
OptionsManager.prototype.getOptions = OptionsManager.prototype.get;                                                    // 2103
                                                                                                                       // 2104
/**                                                                                                                    // 2105
 * Set key to value.  Outputs 'change' event if a value is overwritten.                                                // 2106
 *                                                                                                                     // 2107
 * @method set                                                                                                         // 2108
 *                                                                                                                     // 2109
 * @param {string} key key string                                                                                      // 2110
 * @param {Object} value value object                                                                                  // 2111
 * @return {OptionsManager} new options manager based on the value object                                              // 2112
 */                                                                                                                    // 2113
OptionsManager.prototype.set = function set(key, value) {                                                              // 2114
    var originalValue = this.get(key);                                                                                 // 2115
    this._value[key] = value;                                                                                          // 2116
    if (this.eventOutput && value !== originalValue) this.eventOutput.emit('change', {id: key, value: value});         // 2117
    return this;                                                                                                       // 2118
};                                                                                                                     // 2119
                                                                                                                       // 2120
/**                                                                                                                    // 2121
 * Bind a callback function to an event type handled by this object.                                                   // 2122
 *                                                                                                                     // 2123
 * @method "on"                                                                                                        // 2124
 *                                                                                                                     // 2125
 * @param {string} type event type key (for example, 'change')                                                         // 2126
 * @param {function(string, Object)} handler callback                                                                  // 2127
 * @return {EventHandler} this                                                                                         // 2128
 */                                                                                                                    // 2129
OptionsManager.prototype.on = function on() {                                                                          // 2130
    _createEventOutput.call(this);                                                                                     // 2131
    return this.on.apply(this, arguments);                                                                             // 2132
};                                                                                                                     // 2133
                                                                                                                       // 2134
/**                                                                                                                    // 2135
 * Unbind an event by type and handler.                                                                                // 2136
 *   This undoes the work of "on".                                                                                     // 2137
 *                                                                                                                     // 2138
 * @method removeListener                                                                                              // 2139
 *                                                                                                                     // 2140
 * @param {string} type event type key (for example, 'change')                                                         // 2141
 * @param {function} handler function object to remove                                                                 // 2142
 * @return {EventHandler} internal event handler object (for chaining)                                                 // 2143
 */                                                                                                                    // 2144
OptionsManager.prototype.removeListener = function removeListener() {                                                  // 2145
    _createEventOutput.call(this);                                                                                     // 2146
    return this.removeListener.apply(this, arguments);                                                                 // 2147
};                                                                                                                     // 2148
                                                                                                                       // 2149
/**                                                                                                                    // 2150
 * Add event handler object to set of downstream handlers.                                                             // 2151
 *                                                                                                                     // 2152
 * @method pipe                                                                                                        // 2153
 *                                                                                                                     // 2154
 * @param {EventHandler} target event handler target object                                                            // 2155
 * @return {EventHandler} passed event handler                                                                         // 2156
 */                                                                                                                    // 2157
OptionsManager.prototype.pipe = function pipe() {                                                                      // 2158
    _createEventOutput.call(this);                                                                                     // 2159
    return this.pipe.apply(this, arguments);                                                                           // 2160
};                                                                                                                     // 2161
                                                                                                                       // 2162
/**                                                                                                                    // 2163
 * Remove handler object from set of downstream handlers.                                                              // 2164
 * Undoes work of "pipe"                                                                                               // 2165
 *                                                                                                                     // 2166
 * @method unpipe                                                                                                      // 2167
 *                                                                                                                     // 2168
 * @param {EventHandler} target target handler object                                                                  // 2169
 * @return {EventHandler} provided target                                                                              // 2170
 */                                                                                                                    // 2171
OptionsManager.prototype.unpipe = function unpipe() {                                                                  // 2172
    _createEventOutput.call(this);                                                                                     // 2173
    return this.unpipe.apply(this, arguments);                                                                         // 2174
};                                                                                                                     // 2175
                                                                                                                       // 2176
module.exports = OptionsManager;                                                                                       // 2177
},{"./EventHandler":7}],11:[function(require,module,exports){                                                          // 2178
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2179
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2180
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2181
 *                                                                                                                     // 2182
 * Owner: mark@famo.us                                                                                                 // 2183
 * @license MPL 2.0                                                                                                    // 2184
 * @copyright Famous Industries, Inc. 2014                                                                             // 2185
 */                                                                                                                    // 2186
                                                                                                                       // 2187
var Entity = require('./Entity');                                                                                      // 2188
var SpecParser = require('./SpecParser');                                                                              // 2189
                                                                                                                       // 2190
/**                                                                                                                    // 2191
 * A wrapper for inserting a renderable component (like a Modifer or                                                   // 2192
 *   Surface) into the render tree.                                                                                    // 2193
 *                                                                                                                     // 2194
 * @class RenderNode                                                                                                   // 2195
 * @constructor                                                                                                        // 2196
 *                                                                                                                     // 2197
 * @param {Object} object Target renderable component                                                                  // 2198
 */                                                                                                                    // 2199
function RenderNode(object) {                                                                                          // 2200
    this._object = null;                                                                                               // 2201
    this._child = null;                                                                                                // 2202
    this._hasMultipleChildren = false;                                                                                 // 2203
    this._isRenderable = false;                                                                                        // 2204
    this._isModifier = false;                                                                                          // 2205
                                                                                                                       // 2206
    this._resultCache = {};                                                                                            // 2207
    this._prevResults = {};                                                                                            // 2208
                                                                                                                       // 2209
    this._childResult = null;                                                                                          // 2210
                                                                                                                       // 2211
    if (object) this.set(object);                                                                                      // 2212
}                                                                                                                      // 2213
                                                                                                                       // 2214
/**                                                                                                                    // 2215
 * Append a renderable to the list of this node's children.                                                            // 2216
 *   This produces a new RenderNode in the tree.                                                                       // 2217
 *   Note: Does not double-wrap if child is a RenderNode already.                                                      // 2218
 *                                                                                                                     // 2219
 * @method add                                                                                                         // 2220
 * @param {Object} child renderable object                                                                             // 2221
 * @return {RenderNode} new render node wrapping child                                                                 // 2222
 */                                                                                                                    // 2223
RenderNode.prototype.add = function add(child) {                                                                       // 2224
    var childNode = (child instanceof RenderNode) ? child : new RenderNode(child);                                     // 2225
    if (this._child instanceof Array) this._child.push(childNode);                                                     // 2226
    else if (this._child) {                                                                                            // 2227
        this._child = [this._child, childNode];                                                                        // 2228
        this._hasMultipleChildren = true;                                                                              // 2229
        this._childResult = []; // to be used later                                                                    // 2230
    }                                                                                                                  // 2231
    else this._child = childNode;                                                                                      // 2232
                                                                                                                       // 2233
    return childNode;                                                                                                  // 2234
};                                                                                                                     // 2235
                                                                                                                       // 2236
/**                                                                                                                    // 2237
 * Return the single wrapped object.  Returns null if this node has multiple child nodes.                              // 2238
 *                                                                                                                     // 2239
 * @method get                                                                                                         // 2240
 *                                                                                                                     // 2241
 * @return {Ojbect} contained renderable object                                                                        // 2242
 */                                                                                                                    // 2243
RenderNode.prototype.get = function get() {                                                                            // 2244
    return this._object || (this._hasMultipleChildren ? null : (this._child ? this._child.get() : null));              // 2245
};                                                                                                                     // 2246
                                                                                                                       // 2247
/**                                                                                                                    // 2248
 * Overwrite the list of children to contain the single provided object                                                // 2249
 *                                                                                                                     // 2250
 * @method set                                                                                                         // 2251
 * @param {Object} child renderable object                                                                             // 2252
 * @return {RenderNode} this render node, or child if it is a RenderNode                                               // 2253
 */                                                                                                                    // 2254
RenderNode.prototype.set = function set(child) {                                                                       // 2255
    this._childResult = null;                                                                                          // 2256
    this._hasMultipleChildren = false;                                                                                 // 2257
    this._isRenderable = child.render ? true : false;                                                                  // 2258
    this._isModifier = child.modify ? true : false;                                                                    // 2259
    this._object = child;                                                                                              // 2260
    this._child = null;                                                                                                // 2261
    if (child instanceof RenderNode) return child;                                                                     // 2262
    else return this;                                                                                                  // 2263
};                                                                                                                     // 2264
                                                                                                                       // 2265
/**                                                                                                                    // 2266
 * Get render size of contained object.                                                                                // 2267
 *                                                                                                                     // 2268
 * @method getSize                                                                                                     // 2269
 * @return {Array.Number} size of this or size of single child.                                                        // 2270
 */                                                                                                                    // 2271
RenderNode.prototype.getSize = function getSize() {                                                                    // 2272
    var result = null;                                                                                                 // 2273
    var target = this.get();                                                                                           // 2274
    if (target && target.getSize) result = target.getSize();                                                           // 2275
    if (!result && this._child && this._child.getSize) result = this._child.getSize();                                 // 2276
    return result;                                                                                                     // 2277
};                                                                                                                     // 2278
                                                                                                                       // 2279
// apply results of rendering this subtree to the document                                                             // 2280
function _applyCommit(spec, context, cacheStorage) {                                                                   // 2281
    var result = SpecParser.parse(spec, context);                                                                      // 2282
    var keys = Object.keys(result);                                                                                    // 2283
    for (var i = 0; i < keys.length; i++) {                                                                            // 2284
        var id = keys[i];                                                                                              // 2285
        var childNode = Entity.get(id);                                                                                // 2286
        var commitParams = result[id];                                                                                 // 2287
        commitParams.allocator = context.allocator;                                                                    // 2288
        var commitResult = childNode.commit(commitParams);                                                             // 2289
        if (commitResult) _applyCommit(commitResult, context, cacheStorage);                                           // 2290
        else cacheStorage[id] = commitParams;                                                                          // 2291
    }                                                                                                                  // 2292
}                                                                                                                      // 2293
                                                                                                                       // 2294
/**                                                                                                                    // 2295
 * Commit the content change from this node to the document.                                                           // 2296
 *                                                                                                                     // 2297
 * @private                                                                                                            // 2298
 * @method commit                                                                                                      // 2299
 * @param {Context} context render context                                                                             // 2300
 */                                                                                                                    // 2301
RenderNode.prototype.commit = function commit(context) {                                                               // 2302
    // free up some divs from the last loop                                                                            // 2303
    var prevKeys = Object.keys(this._prevResults);                                                                     // 2304
    for (var i = 0; i < prevKeys.length; i++) {                                                                        // 2305
        var id = prevKeys[i];                                                                                          // 2306
        if (this._resultCache[id] === undefined) {                                                                     // 2307
            var object = Entity.get(id);                                                                               // 2308
            if (object.cleanup) object.cleanup(context.allocator);                                                     // 2309
        }                                                                                                              // 2310
    }                                                                                                                  // 2311
                                                                                                                       // 2312
    this._prevResults = this._resultCache;                                                                             // 2313
    this._resultCache = {};                                                                                            // 2314
    _applyCommit(this.render(), context, this._resultCache);                                                           // 2315
};                                                                                                                     // 2316
                                                                                                                       // 2317
/**                                                                                                                    // 2318
 * Generate a render spec from the contents of the wrapped component.                                                  // 2319
 *                                                                                                                     // 2320
 * @private                                                                                                            // 2321
 * @method render                                                                                                      // 2322
 *                                                                                                                     // 2323
 * @return {Object} render specification for the component subtree                                                     // 2324
 *    only under this node.                                                                                            // 2325
 */                                                                                                                    // 2326
RenderNode.prototype.render = function render() {                                                                      // 2327
    if (this._isRenderable) return this._object.render();                                                              // 2328
                                                                                                                       // 2329
    var result = null;                                                                                                 // 2330
    if (this._hasMultipleChildren) {                                                                                   // 2331
        result = this._childResult;                                                                                    // 2332
        var children = this._child;                                                                                    // 2333
        for (var i = 0; i < children.length; i++) {                                                                    // 2334
            result[i] = children[i].render();                                                                          // 2335
        }                                                                                                              // 2336
    }                                                                                                                  // 2337
    else if (this._child) result = this._child.render();                                                               // 2338
                                                                                                                       // 2339
    return this._isModifier ? this._object.modify(result) : result;                                                    // 2340
};                                                                                                                     // 2341
                                                                                                                       // 2342
module.exports = RenderNode;                                                                                           // 2343
},{"./Entity":5,"./SpecParser":13}],12:[function(require,module,exports){                                              // 2344
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2345
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2346
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2347
 *                                                                                                                     // 2348
 * Owner: mark@famo.us                                                                                                 // 2349
 * @license MPL 2.0                                                                                                    // 2350
 * @copyright Famous Industries, Inc. 2014                                                                             // 2351
 */                                                                                                                    // 2352
                                                                                                                       // 2353
var Transform = require('./Transform');                                                                                // 2354
var Modifier = require('./Modifier');                                                                                  // 2355
var RenderNode = require('./RenderNode');                                                                              // 2356
                                                                                                                       // 2357
/**                                                                                                                    // 2358
 * Builds and renders a scene graph based on a declarative structure definition.                                       // 2359
 * See the Scene examples in the examples distribution (http://github.com/Famous/examples.git).                        // 2360
 *                                                                                                                     // 2361
 * @class Scene                                                                                                        // 2362
 * @constructor                                                                                                        // 2363
 * @param {Object|Array|Spec} definition in the format of a render spec.                                               // 2364
 */                                                                                                                    // 2365
function Scene(definition) {                                                                                           // 2366
    this.id = null;                                                                                                    // 2367
    this._objects = null;                                                                                              // 2368
                                                                                                                       // 2369
    this.node = new RenderNode();                                                                                      // 2370
    this._definition = null;                                                                                           // 2371
                                                                                                                       // 2372
    if (definition) this.load(definition);                                                                             // 2373
}                                                                                                                      // 2374
                                                                                                                       // 2375
var _MATRIX_GENERATORS = {                                                                                             // 2376
    'translate': Transform.translate,                                                                                  // 2377
    'rotate': Transform.rotate,                                                                                        // 2378
    'rotateX': Transform.rotateX,                                                                                      // 2379
    'rotateY': Transform.rotateY,                                                                                      // 2380
    'rotateZ': Transform.rotateZ,                                                                                      // 2381
    'rotateAxis': Transform.rotateAxis,                                                                                // 2382
    'scale': Transform.scale,                                                                                          // 2383
    'skew': Transform.skew,                                                                                            // 2384
    'matrix3d': function() {                                                                                           // 2385
        return arguments;                                                                                              // 2386
    }                                                                                                                  // 2387
};                                                                                                                     // 2388
                                                                                                                       // 2389
/**                                                                                                                    // 2390
 * Clone this scene                                                                                                    // 2391
 *                                                                                                                     // 2392
 * @method create                                                                                                      // 2393
 * @return {Scene} deep copy of this scene                                                                             // 2394
 */                                                                                                                    // 2395
Scene.prototype.create = function create() {                                                                           // 2396
    return new Scene(this._definition);                                                                                // 2397
};                                                                                                                     // 2398
                                                                                                                       // 2399
function _resolveTransformMatrix(matrixDefinition) {                                                                   // 2400
    for (var type in _MATRIX_GENERATORS) {                                                                             // 2401
        if (type in matrixDefinition) {                                                                                // 2402
            var args = matrixDefinition[type];                                                                         // 2403
            if (!(args instanceof Array)) args = [args];                                                               // 2404
            return _MATRIX_GENERATORS[type].apply(this, args);                                                         // 2405
        }                                                                                                              // 2406
    }                                                                                                                  // 2407
}                                                                                                                      // 2408
                                                                                                                       // 2409
// parse transform into tree of render nodes, doing matrix multiplication                                              // 2410
// when available                                                                                                      // 2411
function _parseTransform(definition) {                                                                                 // 2412
    var transformDefinition = definition.transform;                                                                    // 2413
    var opacity = definition.opacity;                                                                                  // 2414
    var origin = definition.origin;                                                                                    // 2415
    var align = definition.align;                                                                                      // 2416
    var size = definition.size;                                                                                        // 2417
    var transform = Transform.identity;                                                                                // 2418
    if (transformDefinition instanceof Array) {                                                                        // 2419
        if (transformDefinition.length === 16 && typeof transformDefinition[0] === 'number') {                         // 2420
            transform = transformDefinition;                                                                           // 2421
        }                                                                                                              // 2422
        else {                                                                                                         // 2423
            for (var i = 0; i < transformDefinition.length; i++) {                                                     // 2424
                transform = Transform.multiply(transform, _resolveTransformMatrix(transformDefinition[i]));            // 2425
            }                                                                                                          // 2426
        }                                                                                                              // 2427
    }                                                                                                                  // 2428
    else if (transformDefinition instanceof Function) {                                                                // 2429
        transform = transformDefinition;                                                                               // 2430
    }                                                                                                                  // 2431
    else if (transformDefinition instanceof Object) {                                                                  // 2432
        transform = _resolveTransformMatrix(transformDefinition);                                                      // 2433
    }                                                                                                                  // 2434
                                                                                                                       // 2435
    var result = new Modifier({                                                                                        // 2436
        transform: transform,                                                                                          // 2437
        opacity: opacity,                                                                                              // 2438
        origin: origin,                                                                                                // 2439
        align: align,                                                                                                  // 2440
        size: size                                                                                                     // 2441
    });                                                                                                                // 2442
    return result;                                                                                                     // 2443
}                                                                                                                      // 2444
                                                                                                                       // 2445
function _parseArray(definition) {                                                                                     // 2446
    var result = new RenderNode();                                                                                     // 2447
    for (var i = 0; i < definition.length; i++) {                                                                      // 2448
        var obj = _parse.call(this, definition[i]);                                                                    // 2449
        if (obj) result.add(obj);                                                                                      // 2450
    }                                                                                                                  // 2451
    return result;                                                                                                     // 2452
}                                                                                                                      // 2453
                                                                                                                       // 2454
// parse object directly into tree of RenderNodes                                                                      // 2455
function _parse(definition) {                                                                                          // 2456
    var result;                                                                                                        // 2457
    var id;                                                                                                            // 2458
    if (definition instanceof Array) {                                                                                 // 2459
        result = _parseArray.call(this, definition);                                                                   // 2460
    }                                                                                                                  // 2461
    else {                                                                                                             // 2462
        id = this._objects.length;                                                                                     // 2463
        if (definition.render && (definition.render instanceof Function)) {                                            // 2464
            result = definition;                                                                                       // 2465
        }                                                                                                              // 2466
        else if (definition.target) {                                                                                  // 2467
            var targetObj = _parse.call(this, definition.target);                                                      // 2468
            var obj = _parseTransform.call(this, definition);                                                          // 2469
                                                                                                                       // 2470
            result = new RenderNode(obj);                                                                              // 2471
            result.add(targetObj);                                                                                     // 2472
            if (definition.id) this.id[definition.id] = obj;                                                           // 2473
        }                                                                                                              // 2474
        else if (definition.id) {                                                                                      // 2475
            result = new RenderNode();                                                                                 // 2476
            this.id[definition.id] = result;                                                                           // 2477
        }                                                                                                              // 2478
    }                                                                                                                  // 2479
    this._objects[id] = result;                                                                                        // 2480
    return result;                                                                                                     // 2481
}                                                                                                                      // 2482
                                                                                                                       // 2483
/**                                                                                                                    // 2484
 * Builds and renders a scene graph based on a canonical declarative scene definition.                                 // 2485
 * See examples/Scene/example.js.                                                                                      // 2486
 *                                                                                                                     // 2487
 * @method load                                                                                                        // 2488
 * @param {Object} definition definition in the format of a render spec.                                               // 2489
 */                                                                                                                    // 2490
Scene.prototype.load = function load(definition) {                                                                     // 2491
    this._definition = definition;                                                                                     // 2492
    this.id = {};                                                                                                      // 2493
    this._objects = [];                                                                                                // 2494
    this.node.set(_parse.call(this, definition));                                                                      // 2495
};                                                                                                                     // 2496
                                                                                                                       // 2497
/**                                                                                                                    // 2498
 * Add renderables to this component's render tree                                                                     // 2499
 *                                                                                                                     // 2500
 * @method add                                                                                                         // 2501
 *                                                                                                                     // 2502
 * @param {Object} obj renderable object                                                                               // 2503
 * @return {RenderNode} Render wrapping provided object, if not already a RenderNode                                   // 2504
 */                                                                                                                    // 2505
Scene.prototype.add = function add() {                                                                                 // 2506
    return this.node.add.apply(this.node, arguments);                                                                  // 2507
};                                                                                                                     // 2508
                                                                                                                       // 2509
/**                                                                                                                    // 2510
 * Generate a render spec from the contents of this component.                                                         // 2511
 *                                                                                                                     // 2512
 * @private                                                                                                            // 2513
 * @method render                                                                                                      // 2514
 * @return {number} Render spec for this component                                                                     // 2515
 */                                                                                                                    // 2516
Scene.prototype.render = function render() {                                                                           // 2517
    return this.node.render.apply(this.node, arguments);                                                               // 2518
};                                                                                                                     // 2519
                                                                                                                       // 2520
module.exports = Scene;                                                                                                // 2521
},{"./Modifier":9,"./RenderNode":11,"./Transform":15}],13:[function(require,module,exports){                           // 2522
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2523
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2524
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2525
 *                                                                                                                     // 2526
 * Owner: mark@famo.us                                                                                                 // 2527
 * @license MPL 2.0                                                                                                    // 2528
 * @copyright Famous Industries, Inc. 2014                                                                             // 2529
 */                                                                                                                    // 2530
                                                                                                                       // 2531
var Transform = require('./Transform');                                                                                // 2532
                                                                                                                       // 2533
/**                                                                                                                    // 2534
 *                                                                                                                     // 2535
 * This object translates the rendering instructions ("render specs")                                                  // 2536
 *   that renderable components generate into document update                                                          // 2537
 *   instructions ("update specs").  Private.                                                                          // 2538
 *                                                                                                                     // 2539
 * @private                                                                                                            // 2540
 * @class SpecParser                                                                                                   // 2541
 * @constructor                                                                                                        // 2542
 */                                                                                                                    // 2543
function SpecParser() {                                                                                                // 2544
    this.result = {};                                                                                                  // 2545
}                                                                                                                      // 2546
SpecParser._instance = new SpecParser();                                                                               // 2547
                                                                                                                       // 2548
/**                                                                                                                    // 2549
 * Convert a render spec coming from the context's render chain to an                                                  // 2550
 *    update spec for the update chain. This is the only major entry point                                             // 2551
 *    for a consumer of this class.                                                                                    // 2552
 *                                                                                                                     // 2553
 * @method parse                                                                                                       // 2554
 * @static                                                                                                             // 2555
 * @private                                                                                                            // 2556
 *                                                                                                                     // 2557
 * @param {renderSpec} spec input render spec                                                                          // 2558
 * @param {Object} context context to do the parse in                                                                  // 2559
 * @return {Object} the resulting update spec (if no callback                                                          // 2560
 *   specified, else none)                                                                                             // 2561
 */                                                                                                                    // 2562
SpecParser.parse = function parse(spec, context) {                                                                     // 2563
    return SpecParser._instance.parse(spec, context);                                                                  // 2564
};                                                                                                                     // 2565
                                                                                                                       // 2566
/**                                                                                                                    // 2567
 * Convert a renderSpec coming from the context's render chain to an update                                            // 2568
 *    spec for the update chain. This is the only major entrypoint for a                                               // 2569
 *    consumer of this class.                                                                                          // 2570
 *                                                                                                                     // 2571
 * @method parse                                                                                                       // 2572
 *                                                                                                                     // 2573
 * @private                                                                                                            // 2574
 * @param {renderSpec} spec input render spec                                                                          // 2575
 * @param {Context} context                                                                                            // 2576
 * @return {updateSpec} the resulting update spec                                                                      // 2577
 */                                                                                                                    // 2578
SpecParser.prototype.parse = function parse(spec, context) {                                                           // 2579
    this.reset();                                                                                                      // 2580
    this._parseSpec(spec, context, Transform.identity);                                                                // 2581
    return this.result;                                                                                                // 2582
};                                                                                                                     // 2583
                                                                                                                       // 2584
/**                                                                                                                    // 2585
 * Prepare SpecParser for re-use (or first use) by setting internal state                                              // 2586
 *  to blank.                                                                                                          // 2587
 *                                                                                                                     // 2588
 * @private                                                                                                            // 2589
 * @method reset                                                                                                       // 2590
 */                                                                                                                    // 2591
SpecParser.prototype.reset = function reset() {                                                                        // 2592
    this.result = {};                                                                                                  // 2593
};                                                                                                                     // 2594
                                                                                                                       // 2595
// Multiply matrix M by vector v                                                                                       // 2596
function _vecInContext(v, m) {                                                                                         // 2597
    return [                                                                                                           // 2598
        v[0] * m[0] + v[1] * m[4] + v[2] * m[8],                                                                       // 2599
        v[0] * m[1] + v[1] * m[5] + v[2] * m[9],                                                                       // 2600
        v[0] * m[2] + v[1] * m[6] + v[2] * m[10]                                                                       // 2601
    ];                                                                                                                 // 2602
}                                                                                                                      // 2603
                                                                                                                       // 2604
var _zeroZero = [0, 0];                                                                                                // 2605
                                                                                                                       // 2606
// From the provided renderSpec tree, recursively compose opacities,                                                   // 2607
//    origins, transforms, and sizes corresponding to each surface id from                                             // 2608
//    the provided renderSpec tree structure. On completion, those                                                     // 2609
//    properties of 'this' object should be ready to use to build an                                                   // 2610
//    updateSpec.                                                                                                      // 2611
SpecParser.prototype._parseSpec = function _parseSpec(spec, parentContext, sizeContext) {                              // 2612
    var id;                                                                                                            // 2613
    var target;                                                                                                        // 2614
    var transform;                                                                                                     // 2615
    var opacity;                                                                                                       // 2616
    var origin;                                                                                                        // 2617
    var align;                                                                                                         // 2618
    var size;                                                                                                          // 2619
                                                                                                                       // 2620
    if (typeof spec === 'number') {                                                                                    // 2621
        id = spec;                                                                                                     // 2622
        transform = parentContext.transform;                                                                           // 2623
        align = parentContext.align || _zeroZero;                                                                      // 2624
        if (parentContext.size && align && (align[0] || align[1])) {                                                   // 2625
            var alignAdjust = [align[0] * parentContext.size[0], align[1] * parentContext.size[1], 0];                 // 2626
            transform = Transform.thenMove(transform, _vecInContext(alignAdjust, sizeContext));                        // 2627
        }                                                                                                              // 2628
        this.result[id] = {                                                                                            // 2629
            transform: transform,                                                                                      // 2630
            opacity: parentContext.opacity,                                                                            // 2631
            origin: parentContext.origin || _zeroZero,                                                                 // 2632
            align: parentContext.align || _zeroZero,                                                                   // 2633
            size: parentContext.size                                                                                   // 2634
        };                                                                                                             // 2635
    }                                                                                                                  // 2636
    else if (!spec) { // placed here so 0 will be cached earlier                                                       // 2637
        return;                                                                                                        // 2638
    }                                                                                                                  // 2639
    else if (spec instanceof Array) {                                                                                  // 2640
        for (var i = 0; i < spec.length; i++) {                                                                        // 2641
            this._parseSpec(spec[i], parentContext, sizeContext);                                                      // 2642
        }                                                                                                              // 2643
    }                                                                                                                  // 2644
    else {                                                                                                             // 2645
        target = spec.target;                                                                                          // 2646
        transform = parentContext.transform;                                                                           // 2647
        opacity = parentContext.opacity;                                                                               // 2648
        origin = parentContext.origin;                                                                                 // 2649
        align = parentContext.align;                                                                                   // 2650
        size = parentContext.size;                                                                                     // 2651
        var nextSizeContext = sizeContext;                                                                             // 2652
                                                                                                                       // 2653
        if (spec.opacity !== undefined) opacity = parentContext.opacity * spec.opacity;                                // 2654
        if (spec.transform) transform = Transform.multiply(parentContext.transform, spec.transform);                   // 2655
        if (spec.origin) {                                                                                             // 2656
            origin = spec.origin;                                                                                      // 2657
            nextSizeContext = parentContext.transform;                                                                 // 2658
        }                                                                                                              // 2659
        if (spec.align) align = spec.align;                                                                            // 2660
                                                                                                                       // 2661
        if (spec.size || spec.proportions) {                                                                           // 2662
            var parentSize = size;                                                                                     // 2663
            size = [size[0], size[1]];                                                                                 // 2664
                                                                                                                       // 2665
            if (spec.size) {                                                                                           // 2666
                if (spec.size[0] !== undefined) size[0] = spec.size[0];                                                // 2667
                if (spec.size[1] !== undefined) size[1] = spec.size[1];                                                // 2668
            }                                                                                                          // 2669
                                                                                                                       // 2670
            if (spec.proportions) {                                                                                    // 2671
                if (spec.proportions[0] !== undefined) size[0] = size[0] * spec.proportions[0];                        // 2672
                if (spec.proportions[1] !== undefined) size[1] = size[1] * spec.proportions[1];                        // 2673
            }                                                                                                          // 2674
                                                                                                                       // 2675
            if (parentSize) {                                                                                          // 2676
                if (align && (align[0] || align[1])) transform = Transform.thenMove(transform, _vecInContext([align[0] * parentSize[0], align[1] * parentSize[1], 0], sizeContext));
                if (origin && (origin[0] || origin[1])) transform = Transform.moveThen([-origin[0] * size[0], -origin[1] * size[1], 0], transform);
            }                                                                                                          // 2679
                                                                                                                       // 2680
            nextSizeContext = parentContext.transform;                                                                 // 2681
            origin = null;                                                                                             // 2682
            align = null;                                                                                              // 2683
        }                                                                                                              // 2684
                                                                                                                       // 2685
        this._parseSpec(target, {                                                                                      // 2686
            transform: transform,                                                                                      // 2687
            opacity: opacity,                                                                                          // 2688
            origin: origin,                                                                                            // 2689
            align: align,                                                                                              // 2690
            size: size                                                                                                 // 2691
        }, nextSizeContext);                                                                                           // 2692
    }                                                                                                                  // 2693
};                                                                                                                     // 2694
                                                                                                                       // 2695
module.exports = SpecParser;                                                                                           // 2696
},{"./Transform":15}],14:[function(require,module,exports){                                                            // 2697
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2698
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2699
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2700
 *                                                                                                                     // 2701
 * Owner: mark@famo.us                                                                                                 // 2702
 * @license MPL 2.0                                                                                                    // 2703
 * @copyright Famous Industries, Inc. 2014                                                                             // 2704
 */                                                                                                                    // 2705
                                                                                                                       // 2706
var ElementOutput = require('./ElementOutput');                                                                        // 2707
                                                                                                                       // 2708
/**                                                                                                                    // 2709
 * A base class for viewable content and event                                                                         // 2710
 *   targets inside a Famo.us application, containing a renderable document                                            // 2711
 *   fragment. Like an HTML div, it can accept internal markup,                                                        // 2712
 *   properties, classes, and handle events.                                                                           // 2713
 *                                                                                                                     // 2714
 * @class Surface                                                                                                      // 2715
 * @constructor                                                                                                        // 2716
 *                                                                                                                     // 2717
 * @param {Object} [options] default option overrides                                                                  // 2718
 * @param {Array.Number} [options.size] [width, height] in pixels                                                      // 2719
 * @param {Array.string} [options.classes] CSS classes to set on target div                                            // 2720
 * @param {Array} [options.properties] string dictionary of HTML attributes to set on target div                       // 2721
 * @param {string} [options.content] inner (HTML) content of surface                                                   // 2722
 */                                                                                                                    // 2723
function Surface(options) {                                                                                            // 2724
    ElementOutput.call(this);                                                                                          // 2725
                                                                                                                       // 2726
    this.options = {};                                                                                                 // 2727
                                                                                                                       // 2728
    this.properties = {};                                                                                              // 2729
    this.attributes = {};                                                                                              // 2730
    this.content = '';                                                                                                 // 2731
    this.classList = [];                                                                                               // 2732
    this.size = null;                                                                                                  // 2733
                                                                                                                       // 2734
    this._classesDirty = true;                                                                                         // 2735
    this._stylesDirty = true;                                                                                          // 2736
    this._attributesDirty = true;                                                                                      // 2737
    this._sizeDirty = true;                                                                                            // 2738
    this._contentDirty = true;                                                                                         // 2739
    this._trueSizeCheck = true;                                                                                        // 2740
                                                                                                                       // 2741
    this._dirtyClasses = [];                                                                                           // 2742
                                                                                                                       // 2743
    if (options) this.setOptions(options);                                                                             // 2744
                                                                                                                       // 2745
    this._currentTarget = null;                                                                                        // 2746
}                                                                                                                      // 2747
Surface.prototype = Object.create(ElementOutput.prototype);                                                            // 2748
Surface.prototype.constructor = Surface;                                                                               // 2749
Surface.prototype.elementType = 'div';                                                                                 // 2750
Surface.prototype.elementClass = 'famous-surface';                                                                     // 2751
                                                                                                                       // 2752
/**                                                                                                                    // 2753
 * Set HTML attributes on this Surface. Note that this will cause                                                      // 2754
 *    dirtying and thus re-rendering, even if values do not change.                                                    // 2755
 *                                                                                                                     // 2756
 * @method setAttributes                                                                                               // 2757
* @param {Object} attributes property dictionary of "key" => "value"                                                   // 2758
 */                                                                                                                    // 2759
Surface.prototype.setAttributes = function setAttributes(attributes) {                                                 // 2760
    for (var n in attributes) {                                                                                        // 2761
        if (n === 'style') throw new Error('Cannot set styles via "setAttributes" as it will break Famo.us.  Use "setProperties" instead.');
        this.attributes[n] = attributes[n];                                                                            // 2763
    }                                                                                                                  // 2764
    this._attributesDirty = true;                                                                                      // 2765
};                                                                                                                     // 2766
                                                                                                                       // 2767
/**                                                                                                                    // 2768
 * Get HTML attributes on this Surface.                                                                                // 2769
 *                                                                                                                     // 2770
 * @method getAttributes                                                                                               // 2771
 *                                                                                                                     // 2772
 * @return {Object} Dictionary of this Surface's attributes.                                                           // 2773
 */                                                                                                                    // 2774
Surface.prototype.getAttributes = function getAttributes() {                                                           // 2775
    return this.attributes;                                                                                            // 2776
};                                                                                                                     // 2777
                                                                                                                       // 2778
/**                                                                                                                    // 2779
 * Set CSS-style properties on this Surface. Note that this will cause                                                 // 2780
 *    dirtying and thus re-rendering, even if values do not change.                                                    // 2781
 *                                                                                                                     // 2782
 * @method setProperties                                                                                               // 2783
 * @chainable                                                                                                          // 2784
 * @param {Object} properties property dictionary of "key" => "value"                                                  // 2785
 */                                                                                                                    // 2786
Surface.prototype.setProperties = function setProperties(properties) {                                                 // 2787
    for (var n in properties) {                                                                                        // 2788
        this.properties[n] = properties[n];                                                                            // 2789
    }                                                                                                                  // 2790
    this._stylesDirty = true;                                                                                          // 2791
    return this;                                                                                                       // 2792
};                                                                                                                     // 2793
                                                                                                                       // 2794
/**                                                                                                                    // 2795
 * Get CSS-style properties on this Surface.                                                                           // 2796
 *                                                                                                                     // 2797
 * @method getProperties                                                                                               // 2798
 *                                                                                                                     // 2799
 * @return {Object} Dictionary of this Surface's properties.                                                           // 2800
 */                                                                                                                    // 2801
Surface.prototype.getProperties = function getProperties() {                                                           // 2802
    return this.properties;                                                                                            // 2803
};                                                                                                                     // 2804
                                                                                                                       // 2805
/**                                                                                                                    // 2806
 * Add CSS-style class to the list of classes on this Surface. Note                                                    // 2807
 *   this will map directly to the HTML property of the actual                                                         // 2808
 *   corresponding rendered <div>.                                                                                     // 2809
 *                                                                                                                     // 2810
 * @method addClass                                                                                                    // 2811
 * @chainable                                                                                                          // 2812
 * @param {string} className name of class to add                                                                      // 2813
 */                                                                                                                    // 2814
Surface.prototype.addClass = function addClass(className) {                                                            // 2815
    if (this.classList.indexOf(className) < 0) {                                                                       // 2816
        this.classList.push(className);                                                                                // 2817
        this._classesDirty = true;                                                                                     // 2818
    }                                                                                                                  // 2819
    return this;                                                                                                       // 2820
};                                                                                                                     // 2821
                                                                                                                       // 2822
/**                                                                                                                    // 2823
 * Remove CSS-style class from the list of classes on this Surface.                                                    // 2824
 *   Note this will map directly to the HTML property of the actual                                                    // 2825
 *   corresponding rendered <div>.                                                                                     // 2826
 *                                                                                                                     // 2827
 * @method removeClass                                                                                                 // 2828
 * @chainable                                                                                                          // 2829
 * @param {string} className name of class to remove                                                                   // 2830
 */                                                                                                                    // 2831
Surface.prototype.removeClass = function removeClass(className) {                                                      // 2832
    var i = this.classList.indexOf(className);                                                                         // 2833
    if (i >= 0) {                                                                                                      // 2834
        this._dirtyClasses.push(this.classList.splice(i, 1)[0]);                                                       // 2835
        this._classesDirty = true;                                                                                     // 2836
    }                                                                                                                  // 2837
    return this;                                                                                                       // 2838
};                                                                                                                     // 2839
                                                                                                                       // 2840
/**                                                                                                                    // 2841
 * Toggle CSS-style class from the list of classes on this Surface.                                                    // 2842
 *   Note this will map directly to the HTML property of the actual                                                    // 2843
 *   corresponding rendered <div>.                                                                                     // 2844
 *                                                                                                                     // 2845
 * @method toggleClass                                                                                                 // 2846
 * @param {string} className name of class to toggle                                                                   // 2847
 */                                                                                                                    // 2848
Surface.prototype.toggleClass = function toggleClass(className) {                                                      // 2849
    var i = this.classList.indexOf(className);                                                                         // 2850
    if (i >= 0) {                                                                                                      // 2851
        this.removeClass(className);                                                                                   // 2852
    } else {                                                                                                           // 2853
        this.addClass(className);                                                                                      // 2854
    }                                                                                                                  // 2855
    return this;                                                                                                       // 2856
};                                                                                                                     // 2857
                                                                                                                       // 2858
/**                                                                                                                    // 2859
 * Reset class list to provided dictionary.                                                                            // 2860
 * @method setClasses                                                                                                  // 2861
 * @chainable                                                                                                          // 2862
 * @param {Array.string} classList                                                                                     // 2863
 */                                                                                                                    // 2864
Surface.prototype.setClasses = function setClasses(classList) {                                                        // 2865
    var i = 0;                                                                                                         // 2866
    var removal = [];                                                                                                  // 2867
    for (i = 0; i < this.classList.length; i++) {                                                                      // 2868
        if (classList.indexOf(this.classList[i]) < 0) removal.push(this.classList[i]);                                 // 2869
    }                                                                                                                  // 2870
    for (i = 0; i < removal.length; i++) this.removeClass(removal[i]);                                                 // 2871
    // duplicates are already checked by addClass()                                                                    // 2872
    for (i = 0; i < classList.length; i++) this.addClass(classList[i]);                                                // 2873
    return this;                                                                                                       // 2874
};                                                                                                                     // 2875
                                                                                                                       // 2876
/**                                                                                                                    // 2877
 * Get array of CSS-style classes attached to this div.                                                                // 2878
 *                                                                                                                     // 2879
 * @method getClasslist                                                                                                // 2880
 * @return {Array.string} array of class names                                                                         // 2881
 */                                                                                                                    // 2882
Surface.prototype.getClassList = function getClassList() {                                                             // 2883
    return this.classList;                                                                                             // 2884
};                                                                                                                     // 2885
                                                                                                                       // 2886
/**                                                                                                                    // 2887
 * Set or overwrite inner (HTML) content of this surface. Note that this                                               // 2888
 *    causes a re-rendering if the content has changed.                                                                // 2889
 *                                                                                                                     // 2890
 * @method setContent                                                                                                  // 2891
 * @chainable                                                                                                          // 2892
 * @param {string|Document Fragment} content HTML content                                                              // 2893
 */                                                                                                                    // 2894
Surface.prototype.setContent = function setContent(content) {                                                          // 2895
    if (this.content !== content) {                                                                                    // 2896
        this.content = content;                                                                                        // 2897
        this._contentDirty = true;                                                                                     // 2898
    }                                                                                                                  // 2899
    return this;                                                                                                       // 2900
};                                                                                                                     // 2901
                                                                                                                       // 2902
/**                                                                                                                    // 2903
 * Return inner (HTML) content of this surface.                                                                        // 2904
 *                                                                                                                     // 2905
 * @method getContent                                                                                                  // 2906
 *                                                                                                                     // 2907
 * @return {string} inner (HTML) content                                                                               // 2908
 */                                                                                                                    // 2909
Surface.prototype.getContent = function getContent() {                                                                 // 2910
    return this.content;                                                                                               // 2911
};                                                                                                                     // 2912
                                                                                                                       // 2913
/**                                                                                                                    // 2914
 * Set options for this surface                                                                                        // 2915
 *                                                                                                                     // 2916
 * @method setOptions                                                                                                  // 2917
 * @chainable                                                                                                          // 2918
 * @param {Object} [options] overrides for default options.  See constructor.                                          // 2919
 */                                                                                                                    // 2920
Surface.prototype.setOptions = function setOptions(options) {                                                          // 2921
    if (options.size) this.setSize(options.size);                                                                      // 2922
    if (options.classes) this.setClasses(options.classes);                                                             // 2923
    if (options.properties) this.setProperties(options.properties);                                                    // 2924
    if (options.attributes) this.setAttributes(options.attributes);                                                    // 2925
    if (options.content) this.setContent(options.content);                                                             // 2926
    return this;                                                                                                       // 2927
};                                                                                                                     // 2928
                                                                                                                       // 2929
//  Apply to document all changes from removeClass() since last setup().                                               // 2930
function _cleanupClasses(target) {                                                                                     // 2931
    for (var i = 0; i < this._dirtyClasses.length; i++) target.classList.remove(this._dirtyClasses[i]);                // 2932
    this._dirtyClasses = [];                                                                                           // 2933
}                                                                                                                      // 2934
                                                                                                                       // 2935
// Apply values of all Famous-managed styles to the document element.                                                  // 2936
//  These will be deployed to the document on call to #setup().                                                        // 2937
function _applyStyles(target) {                                                                                        // 2938
    for (var n in this.properties) {                                                                                   // 2939
        target.style[n] = this.properties[n];                                                                          // 2940
    }                                                                                                                  // 2941
}                                                                                                                      // 2942
                                                                                                                       // 2943
// Clear all Famous-managed styles from the document element.                                                          // 2944
// These will be deployed to the document on call to #setup().                                                         // 2945
function _cleanupStyles(target) {                                                                                      // 2946
    for (var n in this.properties) {                                                                                   // 2947
        target.style[n] = '';                                                                                          // 2948
    }                                                                                                                  // 2949
}                                                                                                                      // 2950
                                                                                                                       // 2951
// Apply values of all Famous-managed attributes to the document element.                                              // 2952
//  These will be deployed to the document on call to #setup().                                                        // 2953
function _applyAttributes(target) {                                                                                    // 2954
    for (var n in this.attributes) {                                                                                   // 2955
        target.setAttribute(n, this.attributes[n]);                                                                    // 2956
    }                                                                                                                  // 2957
}                                                                                                                      // 2958
                                                                                                                       // 2959
// Clear all Famous-managed attributes from the document element.                                                      // 2960
// These will be deployed to the document on call to #setup().                                                         // 2961
function _cleanupAttributes(target) {                                                                                  // 2962
    for (var n in this.attributes) {                                                                                   // 2963
        target.removeAttribute(n);                                                                                     // 2964
    }                                                                                                                  // 2965
}                                                                                                                      // 2966
                                                                                                                       // 2967
function _xyNotEquals(a, b) {                                                                                          // 2968
    return (a && b) ? (a[0] !== b[0] || a[1] !== b[1]) : a !== b;                                                      // 2969
}                                                                                                                      // 2970
                                                                                                                       // 2971
/**                                                                                                                    // 2972
 * One-time setup for an element to be ready for commits to document.                                                  // 2973
 *                                                                                                                     // 2974
 * @private                                                                                                            // 2975
 * @method setup                                                                                                       // 2976
 *                                                                                                                     // 2977
 * @param {ElementAllocator} allocator document element pool for this context                                          // 2978
 */                                                                                                                    // 2979
Surface.prototype.setup = function setup(allocator) {                                                                  // 2980
    var target = allocator.allocate(this.elementType);                                                                 // 2981
    if (this.elementClass) {                                                                                           // 2982
        if (this.elementClass instanceof Array) {                                                                      // 2983
            for (var i = 0; i < this.elementClass.length; i++) {                                                       // 2984
                target.classList.add(this.elementClass[i]);                                                            // 2985
            }                                                                                                          // 2986
        }                                                                                                              // 2987
        else {                                                                                                         // 2988
            target.classList.add(this.elementClass);                                                                   // 2989
        }                                                                                                              // 2990
    }                                                                                                                  // 2991
    target.style.display = '';                                                                                         // 2992
    this.attach(target);                                                                                               // 2993
    this._opacity = null;                                                                                              // 2994
    this._currentTarget = target;                                                                                      // 2995
    this._stylesDirty = true;                                                                                          // 2996
    this._classesDirty = true;                                                                                         // 2997
    this._attributesDirty = true;                                                                                      // 2998
    this._sizeDirty = true;                                                                                            // 2999
    this._contentDirty = true;                                                                                         // 3000
    this._originDirty = true;                                                                                          // 3001
    this._transformDirty = true;                                                                                       // 3002
};                                                                                                                     // 3003
                                                                                                                       // 3004
/**                                                                                                                    // 3005
 * Apply changes from this component to the corresponding document element.                                            // 3006
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 3007
 * and matrix transforms.                                                                                              // 3008
 *                                                                                                                     // 3009
 * @private                                                                                                            // 3010
 * @method commit                                                                                                      // 3011
 * @param {Context} context commit context                                                                             // 3012
 */                                                                                                                    // 3013
Surface.prototype.commit = function commit(context) {                                                                  // 3014
    if (!this._currentTarget) this.setup(context.allocator);                                                           // 3015
    var target = this._currentTarget;                                                                                  // 3016
    var size = context.size;                                                                                           // 3017
                                                                                                                       // 3018
    if (this._classesDirty) {                                                                                          // 3019
        _cleanupClasses.call(this, target);                                                                            // 3020
        var classList = this.getClassList();                                                                           // 3021
        for (var i = 0; i < classList.length; i++) target.classList.add(classList[i]);                                 // 3022
        this._classesDirty = false;                                                                                    // 3023
        this._trueSizeCheck = true;                                                                                    // 3024
    }                                                                                                                  // 3025
                                                                                                                       // 3026
    if (this._stylesDirty) {                                                                                           // 3027
        _applyStyles.call(this, target);                                                                               // 3028
        this._stylesDirty = false;                                                                                     // 3029
        this._trueSizeCheck = true;                                                                                    // 3030
    }                                                                                                                  // 3031
                                                                                                                       // 3032
    if (this._attributesDirty) {                                                                                       // 3033
        _applyAttributes.call(this, target);                                                                           // 3034
        this._attributesDirty = false;                                                                                 // 3035
        this._trueSizeCheck = true;                                                                                    // 3036
    }                                                                                                                  // 3037
                                                                                                                       // 3038
    if (this.size) {                                                                                                   // 3039
        var origSize = context.size;                                                                                   // 3040
        size = [this.size[0], this.size[1]];                                                                           // 3041
        if (size[0] === undefined) size[0] = origSize[0];                                                              // 3042
        if (size[1] === undefined) size[1] = origSize[1];                                                              // 3043
        if (size[0] === true || size[1] === true) {                                                                    // 3044
            if (size[0] === true && (this._trueSizeCheck || this._size[0] === 0)) {                                    // 3045
                var width = target.offsetWidth;                                                                        // 3046
                if (this._size && this._size[0] !== width) {                                                           // 3047
                    this._size[0] = width;                                                                             // 3048
                    this._sizeDirty = true;                                                                            // 3049
                }                                                                                                      // 3050
                size[0] = width;                                                                                       // 3051
            } else {                                                                                                   // 3052
                if (this._size) size[0] = this._size[0];                                                               // 3053
            }                                                                                                          // 3054
            if (size[1] === true && (this._trueSizeCheck || this._size[1] === 0)) {                                    // 3055
                var height = target.offsetHeight;                                                                      // 3056
                if (this._size && this._size[1] !== height) {                                                          // 3057
                    this._size[1] = height;                                                                            // 3058
                    this._sizeDirty = true;                                                                            // 3059
                }                                                                                                      // 3060
                size[1] = height;                                                                                      // 3061
            } else {                                                                                                   // 3062
                if (this._size) size[1] = this._size[1];                                                               // 3063
            }                                                                                                          // 3064
            this._trueSizeCheck = false;                                                                               // 3065
        }                                                                                                              // 3066
    }                                                                                                                  // 3067
                                                                                                                       // 3068
    if (_xyNotEquals(this._size, size)) {                                                                              // 3069
        if (!this._size) this._size = [0, 0];                                                                          // 3070
        this._size[0] = size[0];                                                                                       // 3071
        this._size[1] = size[1];                                                                                       // 3072
                                                                                                                       // 3073
        this._sizeDirty = true;                                                                                        // 3074
    }                                                                                                                  // 3075
                                                                                                                       // 3076
    if (this._sizeDirty) {                                                                                             // 3077
        if (this._size) {                                                                                              // 3078
            target.style.width = (this.size && this.size[0] === true) ? '' : this._size[0] + 'px';                     // 3079
            target.style.height = (this.size && this.size[1] === true) ?  '' : this._size[1] + 'px';                   // 3080
        }                                                                                                              // 3081
                                                                                                                       // 3082
        this._eventOutput.emit('resize');                                                                              // 3083
    }                                                                                                                  // 3084
                                                                                                                       // 3085
    if (this._contentDirty) {                                                                                          // 3086
        this.deploy(target);                                                                                           // 3087
        this._eventOutput.emit('deploy');                                                                              // 3088
        this._contentDirty = false;                                                                                    // 3089
        this._trueSizeCheck = true;                                                                                    // 3090
    }                                                                                                                  // 3091
                                                                                                                       // 3092
    ElementOutput.prototype.commit.call(this, context);                                                                // 3093
};                                                                                                                     // 3094
                                                                                                                       // 3095
/**                                                                                                                    // 3096
 *  Remove all Famous-relevant attributes from a document element.                                                     // 3097
 *    This is called by SurfaceManager's detach().                                                                     // 3098
 *    This is in some sense the reverse of .deploy().                                                                  // 3099
 *                                                                                                                     // 3100
 * @private                                                                                                            // 3101
 * @method cleanup                                                                                                     // 3102
 * @param {ElementAllocator} allocator                                                                                 // 3103
 */                                                                                                                    // 3104
Surface.prototype.cleanup = function cleanup(allocator) {                                                              // 3105
    var i = 0;                                                                                                         // 3106
    var target = this._currentTarget;                                                                                  // 3107
    this._eventOutput.emit('recall');                                                                                  // 3108
    this.recall(target);                                                                                               // 3109
    target.style.display = 'none';                                                                                     // 3110
    target.style.opacity = '';                                                                                         // 3111
    target.style.width = '';                                                                                           // 3112
    target.style.height = '';                                                                                          // 3113
    _cleanupStyles.call(this, target);                                                                                 // 3114
    _cleanupAttributes.call(this, target);                                                                             // 3115
    var classList = this.getClassList();                                                                               // 3116
    _cleanupClasses.call(this, target);                                                                                // 3117
    for (i = 0; i < classList.length; i++) target.classList.remove(classList[i]);                                      // 3118
    if (this.elementClass) {                                                                                           // 3119
        if (this.elementClass instanceof Array) {                                                                      // 3120
            for (i = 0; i < this.elementClass.length; i++) {                                                           // 3121
                target.classList.remove(this.elementClass[i]);                                                         // 3122
            }                                                                                                          // 3123
        }                                                                                                              // 3124
        else {                                                                                                         // 3125
            target.classList.remove(this.elementClass);                                                                // 3126
        }                                                                                                              // 3127
    }                                                                                                                  // 3128
    this.detach(target);                                                                                               // 3129
    this._currentTarget = null;                                                                                        // 3130
    allocator.deallocate(target);                                                                                      // 3131
};                                                                                                                     // 3132
                                                                                                                       // 3133
/**                                                                                                                    // 3134
 * Place the document element that this component manages into the document.                                           // 3135
 *                                                                                                                     // 3136
 * @private                                                                                                            // 3137
 * @method deploy                                                                                                      // 3138
 * @param {Node} target document parent of this container                                                              // 3139
 */                                                                                                                    // 3140
Surface.prototype.deploy = function deploy(target) {                                                                   // 3141
    var content = this.getContent();                                                                                   // 3142
    if (content instanceof Node) {                                                                                     // 3143
        while (target.hasChildNodes()) target.removeChild(target.firstChild);                                          // 3144
        target.appendChild(content);                                                                                   // 3145
    }                                                                                                                  // 3146
    else target.innerHTML = content;                                                                                   // 3147
};                                                                                                                     // 3148
                                                                                                                       // 3149
/**                                                                                                                    // 3150
 * Remove any contained document content associated with this surface                                                  // 3151
 *   from the actual document.                                                                                         // 3152
 *                                                                                                                     // 3153
 * @private                                                                                                            // 3154
 * @method recall                                                                                                      // 3155
 */                                                                                                                    // 3156
Surface.prototype.recall = function recall(target) {                                                                   // 3157
    var df = document.createDocumentFragment();                                                                        // 3158
    while (target.hasChildNodes()) df.appendChild(target.firstChild);                                                  // 3159
    this.setContent(df);                                                                                               // 3160
};                                                                                                                     // 3161
                                                                                                                       // 3162
/**                                                                                                                    // 3163
 *  Get the x and y dimensions of the surface.                                                                         // 3164
 *                                                                                                                     // 3165
 * @method getSize                                                                                                     // 3166
 * @return {Array.Number} [x,y] size of surface                                                                        // 3167
 */                                                                                                                    // 3168
Surface.prototype.getSize = function getSize() {                                                                       // 3169
    return this._size ? this._size : this.size;                                                                        // 3170
};                                                                                                                     // 3171
                                                                                                                       // 3172
/**                                                                                                                    // 3173
 * Set x and y dimensions of the surface.                                                                              // 3174
 *                                                                                                                     // 3175
 * @method setSize                                                                                                     // 3176
 * @chainable                                                                                                          // 3177
 * @param {Array.Number} size as [width, height]                                                                       // 3178
 */                                                                                                                    // 3179
Surface.prototype.setSize = function setSize(size) {                                                                   // 3180
    this.size = size ? [size[0], size[1]] : null;                                                                      // 3181
    this._sizeDirty = true;                                                                                            // 3182
    return this;                                                                                                       // 3183
};                                                                                                                     // 3184
                                                                                                                       // 3185
module.exports = Surface;                                                                                              // 3186
},{"./ElementOutput":3}],15:[function(require,module,exports){                                                         // 3187
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 3188
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 3189
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 3190
 *                                                                                                                     // 3191
 * Owner: mark@famo.us                                                                                                 // 3192
 * @license MPL 2.0                                                                                                    // 3193
 * @copyright Famous Industries, Inc. 2014                                                                             // 3194
 */                                                                                                                    // 3195
                                                                                                                       // 3196
                                                                                                                       // 3197
                                                                                                                       // 3198
                                                                                                                       // 3199
/**                                                                                                                    // 3200
 *  A high-performance static matrix math library used to calculate                                                    // 3201
 *    affine transforms on surfaces and other renderables.                                                             // 3202
 *    Famo.us uses 4x4 matrices corresponding directly to                                                              // 3203
 *    WebKit matrices (column-major order).                                                                            // 3204
 *                                                                                                                     // 3205
 *    The internal "type" of a Matrix is a 16-long float array in                                                      // 3206
 *    row-major order, with:                                                                                           // 3207
 *    elements [0],[1],[2],[4],[5],[6],[8],[9],[10] forming the 3x3                                                    // 3208
 *          transformation matrix;                                                                                     // 3209
 *    elements [12], [13], [14] corresponding to the t_x, t_y, t_z                                                     // 3210
 *           translation;                                                                                              // 3211
 *    elements [3], [7], [11] set to 0;                                                                                // 3212
 *    element [15] set to 1.                                                                                           // 3213
 *    All methods are static.                                                                                          // 3214
 *                                                                                                                     // 3215
 * @static                                                                                                             // 3216
 *                                                                                                                     // 3217
 * @class Transform                                                                                                    // 3218
 */                                                                                                                    // 3219
var Transform = {};                                                                                                    // 3220
                                                                                                                       // 3221
// WARNING: these matrices correspond to WebKit matrices, which are                                                    // 3222
//    transposed from their math counterparts                                                                          // 3223
Transform.precision = 1e-6;                                                                                            // 3224
Transform.identity = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                                                 // 3225
                                                                                                                       // 3226
/**                                                                                                                    // 3227
 * Multiply two or more Transform matrix types to return a Transform matrix.                                           // 3228
 *                                                                                                                     // 3229
 * @method multiply4x4                                                                                                 // 3230
 * @static                                                                                                             // 3231
 * @param {Transform} a left Transform                                                                                 // 3232
 * @param {Transform} b right Transform                                                                                // 3233
 * @return {Transform}                                                                                                 // 3234
 */                                                                                                                    // 3235
Transform.multiply4x4 = function multiply4x4(a, b) {                                                                   // 3236
    return [                                                                                                           // 3237
        a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3],                                                        // 3238
        a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3],                                                        // 3239
        a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3],                                                       // 3240
        a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3],                                                       // 3241
        a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7],                                                        // 3242
        a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7],                                                        // 3243
        a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7],                                                       // 3244
        a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7],                                                       // 3245
        a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11],                                                      // 3246
        a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11],                                                      // 3247
        a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11],                                                     // 3248
        a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11],                                                     // 3249
        a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15],                                                    // 3250
        a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15],                                                    // 3251
        a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15],                                                   // 3252
        a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15]                                                    // 3253
    ];                                                                                                                 // 3254
};                                                                                                                     // 3255
                                                                                                                       // 3256
/**                                                                                                                    // 3257
 * Fast-multiply two or more Transform matrix types to return a                                                        // 3258
 *    Matrix, assuming bottom row on each is [0 0 0 1].                                                                // 3259
 *                                                                                                                     // 3260
 * @method multiply                                                                                                    // 3261
 * @static                                                                                                             // 3262
 * @param {Transform} a left Transform                                                                                 // 3263
 * @param {Transform} b right Transform                                                                                // 3264
 * @return {Transform}                                                                                                 // 3265
 */                                                                                                                    // 3266
Transform.multiply = function multiply(a, b) {                                                                         // 3267
    return [                                                                                                           // 3268
        a[0] * b[0] + a[4] * b[1] + a[8] * b[2],                                                                       // 3269
        a[1] * b[0] + a[5] * b[1] + a[9] * b[2],                                                                       // 3270
        a[2] * b[0] + a[6] * b[1] + a[10] * b[2],                                                                      // 3271
        0,                                                                                                             // 3272
        a[0] * b[4] + a[4] * b[5] + a[8] * b[6],                                                                       // 3273
        a[1] * b[4] + a[5] * b[5] + a[9] * b[6],                                                                       // 3274
        a[2] * b[4] + a[6] * b[5] + a[10] * b[6],                                                                      // 3275
        0,                                                                                                             // 3276
        a[0] * b[8] + a[4] * b[9] + a[8] * b[10],                                                                      // 3277
        a[1] * b[8] + a[5] * b[9] + a[9] * b[10],                                                                      // 3278
        a[2] * b[8] + a[6] * b[9] + a[10] * b[10],                                                                     // 3279
        0,                                                                                                             // 3280
        a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12],                                                            // 3281
        a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13],                                                            // 3282
        a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14],                                                           // 3283
        1                                                                                                              // 3284
    ];                                                                                                                 // 3285
};                                                                                                                     // 3286
                                                                                                                       // 3287
/**                                                                                                                    // 3288
 * Return a Transform translated by additional amounts in each                                                         // 3289
 *    dimension. This is equivalent to the result of                                                                   // 3290
 *                                                                                                                     // 3291
 *    Transform.multiply(Matrix.translate(t[0], t[1], t[2]), m).                                                       // 3292
 *                                                                                                                     // 3293
 * @method thenMove                                                                                                    // 3294
 * @static                                                                                                             // 3295
 * @param {Transform} m a Transform                                                                                    // 3296
 * @param {Array.Number} t floats delta vector of length 2 or 3                                                        // 3297
 * @return {Transform}                                                                                                 // 3298
 */                                                                                                                    // 3299
Transform.thenMove = function thenMove(m, t) {                                                                         // 3300
    if (!t[2]) t[2] = 0;                                                                                               // 3301
    return [m[0], m[1], m[2], 0, m[4], m[5], m[6], 0, m[8], m[9], m[10], 0, m[12] + t[0], m[13] + t[1], m[14] + t[2], 1];
};                                                                                                                     // 3303
                                                                                                                       // 3304
/**                                                                                                                    // 3305
 * Return a Transform atrix which represents the result of a transform matrix                                          // 3306
 *    applied after a move. This is faster than the equivalent multiply.                                               // 3307
 *    This is equivalent to the result of:                                                                             // 3308
 *                                                                                                                     // 3309
 *    Transform.multiply(m, Transform.translate(t[0], t[1], t[2])).                                                    // 3310
 *                                                                                                                     // 3311
 * @method moveThen                                                                                                    // 3312
 * @static                                                                                                             // 3313
 * @param {Array.Number} v vector representing initial movement                                                        // 3314
 * @param {Transform} m matrix to apply afterwards                                                                     // 3315
 * @return {Transform} the resulting matrix                                                                            // 3316
 */                                                                                                                    // 3317
Transform.moveThen = function moveThen(v, m) {                                                                         // 3318
    if (!v[2]) v[2] = 0;                                                                                               // 3319
    var t0 = v[0] * m[0] + v[1] * m[4] + v[2] * m[8];                                                                  // 3320
    var t1 = v[0] * m[1] + v[1] * m[5] + v[2] * m[9];                                                                  // 3321
    var t2 = v[0] * m[2] + v[1] * m[6] + v[2] * m[10];                                                                 // 3322
    return Transform.thenMove(m, [t0, t1, t2]);                                                                        // 3323
};                                                                                                                     // 3324
                                                                                                                       // 3325
/**                                                                                                                    // 3326
 * Return a Transform which represents a translation by specified                                                      // 3327
 *    amounts in each dimension.                                                                                       // 3328
 *                                                                                                                     // 3329
 * @method translate                                                                                                   // 3330
 * @static                                                                                                             // 3331
 * @param {Number} x x translation                                                                                     // 3332
 * @param {Number} y y translation                                                                                     // 3333
 * @param {Number} z z translation                                                                                     // 3334
 * @return {Transform}                                                                                                 // 3335
 */                                                                                                                    // 3336
Transform.translate = function translate(x, y, z) {                                                                    // 3337
    if (z === undefined) z = 0;                                                                                        // 3338
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1];                                                           // 3339
};                                                                                                                     // 3340
                                                                                                                       // 3341
/**                                                                                                                    // 3342
 * Return a Transform scaled by a vector in each                                                                       // 3343
 *    dimension. This is a more performant equivalent to the result of                                                 // 3344
 *                                                                                                                     // 3345
 *    Transform.multiply(Transform.scale(s[0], s[1], s[2]), m).                                                        // 3346
 *                                                                                                                     // 3347
 * @method thenScale                                                                                                   // 3348
 * @static                                                                                                             // 3349
 * @param {Transform} m a matrix                                                                                       // 3350
 * @param {Array.Number} s delta vector (array of floats &&                                                            // 3351
 *    array.length == 3)                                                                                               // 3352
 * @return {Transform}                                                                                                 // 3353
 */                                                                                                                    // 3354
Transform.thenScale = function thenScale(m, s) {                                                                       // 3355
    return [                                                                                                           // 3356
        s[0] * m[0], s[1] * m[1], s[2] * m[2], 0,                                                                      // 3357
        s[0] * m[4], s[1] * m[5], s[2] * m[6], 0,                                                                      // 3358
        s[0] * m[8], s[1] * m[9], s[2] * m[10], 0,                                                                     // 3359
        s[0] * m[12], s[1] * m[13], s[2] * m[14], 1                                                                    // 3360
    ];                                                                                                                 // 3361
};                                                                                                                     // 3362
                                                                                                                       // 3363
/**                                                                                                                    // 3364
 * Return a Transform which represents a scale by specified amounts                                                    // 3365
 *    in each dimension.                                                                                               // 3366
 *                                                                                                                     // 3367
 * @method scale                                                                                                       // 3368
 * @static                                                                                                             // 3369
 * @param {Number} x x scale factor                                                                                    // 3370
 * @param {Number} y y scale factor                                                                                    // 3371
 * @param {Number} z z scale factor                                                                                    // 3372
 * @return {Transform}                                                                                                 // 3373
 */                                                                                                                    // 3374
Transform.scale = function scale(x, y, z) {                                                                            // 3375
    if (z === undefined) z = 1;                                                                                        // 3376
    if (y === undefined) y = x;                                                                                        // 3377
    return [x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1];                                                           // 3378
};                                                                                                                     // 3379
                                                                                                                       // 3380
/**                                                                                                                    // 3381
 * Return a Transform which represents a clockwise                                                                     // 3382
 *    rotation around the x axis.                                                                                      // 3383
 *                                                                                                                     // 3384
 * @method rotateX                                                                                                     // 3385
 * @static                                                                                                             // 3386
 * @param {Number} theta radians                                                                                       // 3387
 * @return {Transform}                                                                                                 // 3388
 */                                                                                                                    // 3389
Transform.rotateX = function rotateX(theta) {                                                                          // 3390
    var cosTheta = Math.cos(theta);                                                                                    // 3391
    var sinTheta = Math.sin(theta);                                                                                    // 3392
    return [1, 0, 0, 0, 0, cosTheta, sinTheta, 0, 0, -sinTheta, cosTheta, 0, 0, 0, 0, 1];                              // 3393
};                                                                                                                     // 3394
                                                                                                                       // 3395
/**                                                                                                                    // 3396
 * Return a Transform which represents a clockwise                                                                     // 3397
 *    rotation around the y axis.                                                                                      // 3398
 *                                                                                                                     // 3399
 * @method rotateY                                                                                                     // 3400
 * @static                                                                                                             // 3401
 * @param {Number} theta radians                                                                                       // 3402
 * @return {Transform}                                                                                                 // 3403
 */                                                                                                                    // 3404
Transform.rotateY = function rotateY(theta) {                                                                          // 3405
    var cosTheta = Math.cos(theta);                                                                                    // 3406
    var sinTheta = Math.sin(theta);                                                                                    // 3407
    return [cosTheta, 0, -sinTheta, 0, 0, 1, 0, 0, sinTheta, 0, cosTheta, 0, 0, 0, 0, 1];                              // 3408
};                                                                                                                     // 3409
                                                                                                                       // 3410
/**                                                                                                                    // 3411
 * Return a Transform which represents a clockwise                                                                     // 3412
 *    rotation around the z axis.                                                                                      // 3413
 *                                                                                                                     // 3414
 * @method rotateZ                                                                                                     // 3415
 * @static                                                                                                             // 3416
 * @param {Number} theta radians                                                                                       // 3417
 * @return {Transform}                                                                                                 // 3418
 */                                                                                                                    // 3419
Transform.rotateZ = function rotateZ(theta) {                                                                          // 3420
    var cosTheta = Math.cos(theta);                                                                                    // 3421
    var sinTheta = Math.sin(theta);                                                                                    // 3422
    return [cosTheta, sinTheta, 0, 0, -sinTheta, cosTheta, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                              // 3423
};                                                                                                                     // 3424
                                                                                                                       // 3425
/**                                                                                                                    // 3426
 * Return a Transform which represents composed clockwise                                                              // 3427
 *    rotations along each of the axes. Equivalent to the result of                                                    // 3428
 *    Matrix.multiply(rotateX(phi), rotateY(theta), rotateZ(psi)).                                                     // 3429
 *                                                                                                                     // 3430
 * @method rotate                                                                                                      // 3431
 * @static                                                                                                             // 3432
 * @param {Number} phi radians to rotate about the positive x axis                                                     // 3433
 * @param {Number} theta radians to rotate about the positive y axis                                                   // 3434
 * @param {Number} psi radians to rotate about the positive z axis                                                     // 3435
 * @return {Transform}                                                                                                 // 3436
 */                                                                                                                    // 3437
Transform.rotate = function rotate(phi, theta, psi) {                                                                  // 3438
    var cosPhi = Math.cos(phi);                                                                                        // 3439
    var sinPhi = Math.sin(phi);                                                                                        // 3440
    var cosTheta = Math.cos(theta);                                                                                    // 3441
    var sinTheta = Math.sin(theta);                                                                                    // 3442
    var cosPsi = Math.cos(psi);                                                                                        // 3443
    var sinPsi = Math.sin(psi);                                                                                        // 3444
    var result = [                                                                                                     // 3445
        cosTheta * cosPsi,                                                                                             // 3446
        cosPhi * sinPsi + sinPhi * sinTheta * cosPsi,                                                                  // 3447
        sinPhi * sinPsi - cosPhi * sinTheta * cosPsi,                                                                  // 3448
        0,                                                                                                             // 3449
        -cosTheta * sinPsi,                                                                                            // 3450
        cosPhi * cosPsi - sinPhi * sinTheta * sinPsi,                                                                  // 3451
        sinPhi * cosPsi + cosPhi * sinTheta * sinPsi,                                                                  // 3452
        0,                                                                                                             // 3453
        sinTheta,                                                                                                      // 3454
        -sinPhi * cosTheta,                                                                                            // 3455
        cosPhi * cosTheta,                                                                                             // 3456
        0,                                                                                                             // 3457
        0, 0, 0, 1                                                                                                     // 3458
    ];                                                                                                                 // 3459
    return result;                                                                                                     // 3460
};                                                                                                                     // 3461
                                                                                                                       // 3462
/**                                                                                                                    // 3463
 * Return a Transform which represents an axis-angle rotation                                                          // 3464
 *                                                                                                                     // 3465
 * @method rotateAxis                                                                                                  // 3466
 * @static                                                                                                             // 3467
 * @param {Array.Number} v unit vector representing the axis to rotate about                                           // 3468
 * @param {Number} theta radians to rotate clockwise about the axis                                                    // 3469
 * @return {Transform}                                                                                                 // 3470
 */                                                                                                                    // 3471
Transform.rotateAxis = function rotateAxis(v, theta) {                                                                 // 3472
    var sinTheta = Math.sin(theta);                                                                                    // 3473
    var cosTheta = Math.cos(theta);                                                                                    // 3474
    var verTheta = 1 - cosTheta; // versine of theta                                                                   // 3475
                                                                                                                       // 3476
    var xxV = v[0] * v[0] * verTheta;                                                                                  // 3477
    var xyV = v[0] * v[1] * verTheta;                                                                                  // 3478
    var xzV = v[0] * v[2] * verTheta;                                                                                  // 3479
    var yyV = v[1] * v[1] * verTheta;                                                                                  // 3480
    var yzV = v[1] * v[2] * verTheta;                                                                                  // 3481
    var zzV = v[2] * v[2] * verTheta;                                                                                  // 3482
    var xs = v[0] * sinTheta;                                                                                          // 3483
    var ys = v[1] * sinTheta;                                                                                          // 3484
    var zs = v[2] * sinTheta;                                                                                          // 3485
                                                                                                                       // 3486
    var result = [                                                                                                     // 3487
        xxV + cosTheta, xyV + zs, xzV - ys, 0,                                                                         // 3488
        xyV - zs, yyV + cosTheta, yzV + xs, 0,                                                                         // 3489
        xzV + ys, yzV - xs, zzV + cosTheta, 0,                                                                         // 3490
        0, 0, 0, 1                                                                                                     // 3491
    ];                                                                                                                 // 3492
    return result;                                                                                                     // 3493
};                                                                                                                     // 3494
                                                                                                                       // 3495
/**                                                                                                                    // 3496
 * Return a Transform which represents a transform matrix applied about                                                // 3497
 * a separate origin point.                                                                                            // 3498
 *                                                                                                                     // 3499
 * @method aboutOrigin                                                                                                 // 3500
 * @static                                                                                                             // 3501
 * @param {Array.Number} v origin point to apply matrix                                                                // 3502
 * @param {Transform} m matrix to apply                                                                                // 3503
 * @return {Transform}                                                                                                 // 3504
 */                                                                                                                    // 3505
Transform.aboutOrigin = function aboutOrigin(v, m) {                                                                   // 3506
    var t0 = v[0] - (v[0] * m[0] + v[1] * m[4] + v[2] * m[8]);                                                         // 3507
    var t1 = v[1] - (v[0] * m[1] + v[1] * m[5] + v[2] * m[9]);                                                         // 3508
    var t2 = v[2] - (v[0] * m[2] + v[1] * m[6] + v[2] * m[10]);                                                        // 3509
    return Transform.thenMove(m, [t0, t1, t2]);                                                                        // 3510
};                                                                                                                     // 3511
                                                                                                                       // 3512
/**                                                                                                                    // 3513
 * Return a Transform representation of a skew transformation                                                          // 3514
 *                                                                                                                     // 3515
 * @method skew                                                                                                        // 3516
 * @static                                                                                                             // 3517
 * @param {Number} phi scale factor skew in the x axis                                                                 // 3518
 * @param {Number} theta scale factor skew in the y axis                                                               // 3519
 * @param {Number} psi scale factor skew in the z axis                                                                 // 3520
 * @return {Transform}                                                                                                 // 3521
 */                                                                                                                    // 3522
Transform.skew = function skew(phi, theta, psi) {                                                                      // 3523
    return [1, Math.tan(theta), 0, 0, Math.tan(psi), 1, 0, 0, 0, Math.tan(phi), 1, 0, 0, 0, 0, 1];                     // 3524
};                                                                                                                     // 3525
                                                                                                                       // 3526
/**                                                                                                                    // 3527
 * Return a Transform representation of a skew in the x-direction                                                      // 3528
 *                                                                                                                     // 3529
 * @method skewX                                                                                                       // 3530
 * @static                                                                                                             // 3531
 * @param {Number} angle the angle between the top and left sides                                                      // 3532
 * @return {Transform}                                                                                                 // 3533
 */                                                                                                                    // 3534
Transform.skewX = function skewX(angle) {                                                                              // 3535
    return [1, 0, 0, 0, Math.tan(angle), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                                             // 3536
};                                                                                                                     // 3537
                                                                                                                       // 3538
/**                                                                                                                    // 3539
 * Return a Transform representation of a skew in the y-direction                                                      // 3540
 *                                                                                                                     // 3541
 * @method skewY                                                                                                       // 3542
 * @static                                                                                                             // 3543
 * @param {Number} angle the angle between the top and right sides                                                     // 3544
 * @return {Transform}                                                                                                 // 3545
 */                                                                                                                    // 3546
Transform.skewY = function skewY(angle) {                                                                              // 3547
    return [1, Math.tan(angle), 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                                             // 3548
};                                                                                                                     // 3549
                                                                                                                       // 3550
/**                                                                                                                    // 3551
 * Returns a perspective Transform matrix                                                                              // 3552
 *                                                                                                                     // 3553
 * @method perspective                                                                                                 // 3554
 * @static                                                                                                             // 3555
 * @param {Number} focusZ z position of focal point                                                                    // 3556
 * @return {Transform}                                                                                                 // 3557
 */                                                                                                                    // 3558
Transform.perspective = function perspective(focusZ) {                                                                 // 3559
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1 / focusZ, 0, 0, 0, 1];                                                 // 3560
};                                                                                                                     // 3561
                                                                                                                       // 3562
/**                                                                                                                    // 3563
 * Return translation vector component of given Transform                                                              // 3564
 *                                                                                                                     // 3565
 * @method getTranslate                                                                                                // 3566
 * @static                                                                                                             // 3567
 * @param {Transform} m Transform                                                                                      // 3568
 * @return {Array.Number} the translation vector [t_x, t_y, t_z]                                                       // 3569
 */                                                                                                                    // 3570
Transform.getTranslate = function getTranslate(m) {                                                                    // 3571
    return [m[12], m[13], m[14]];                                                                                      // 3572
};                                                                                                                     // 3573
                                                                                                                       // 3574
/**                                                                                                                    // 3575
 * Return inverse affine transform for given Transform.                                                                // 3576
 *   Note: This assumes m[3] = m[7] = m[11] = 0, and m[15] = 1.                                                        // 3577
 *   Will provide incorrect results if not invertible or preconditions not met.                                        // 3578
 *                                                                                                                     // 3579
 * @method inverse                                                                                                     // 3580
 * @static                                                                                                             // 3581
 * @param {Transform} m Transform                                                                                      // 3582
 * @return {Transform}                                                                                                 // 3583
 */                                                                                                                    // 3584
Transform.inverse = function inverse(m) {                                                                              // 3585
    // only need to consider 3x3 section for affine                                                                    // 3586
    var c0 = m[5] * m[10] - m[6] * m[9];                                                                               // 3587
    var c1 = m[4] * m[10] - m[6] * m[8];                                                                               // 3588
    var c2 = m[4] * m[9] - m[5] * m[8];                                                                                // 3589
    var c4 = m[1] * m[10] - m[2] * m[9];                                                                               // 3590
    var c5 = m[0] * m[10] - m[2] * m[8];                                                                               // 3591
    var c6 = m[0] * m[9] - m[1] * m[8];                                                                                // 3592
    var c8 = m[1] * m[6] - m[2] * m[5];                                                                                // 3593
    var c9 = m[0] * m[6] - m[2] * m[4];                                                                                // 3594
    var c10 = m[0] * m[5] - m[1] * m[4];                                                                               // 3595
    var detM = m[0] * c0 - m[1] * c1 + m[2] * c2;                                                                      // 3596
    var invD = 1 / detM;                                                                                               // 3597
    var result = [                                                                                                     // 3598
        invD * c0, -invD * c4, invD * c8, 0,                                                                           // 3599
        -invD * c1, invD * c5, -invD * c9, 0,                                                                          // 3600
        invD * c2, -invD * c6, invD * c10, 0,                                                                          // 3601
        0, 0, 0, 1                                                                                                     // 3602
    ];                                                                                                                 // 3603
    result[12] = -m[12] * result[0] - m[13] * result[4] - m[14] * result[8];                                           // 3604
    result[13] = -m[12] * result[1] - m[13] * result[5] - m[14] * result[9];                                           // 3605
    result[14] = -m[12] * result[2] - m[13] * result[6] - m[14] * result[10];                                          // 3606
    return result;                                                                                                     // 3607
};                                                                                                                     // 3608
                                                                                                                       // 3609
/**                                                                                                                    // 3610
 * Returns the transpose of a 4x4 matrix                                                                               // 3611
 *                                                                                                                     // 3612
 * @method transpose                                                                                                   // 3613
 * @static                                                                                                             // 3614
 * @param {Transform} m matrix                                                                                         // 3615
 * @return {Transform} the resulting transposed matrix                                                                 // 3616
 */                                                                                                                    // 3617
Transform.transpose = function transpose(m) {                                                                          // 3618
    return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];     // 3619
};                                                                                                                     // 3620
                                                                                                                       // 3621
function _normSquared(v) {                                                                                             // 3622
    return (v.length === 2) ? v[0] * v[0] + v[1] * v[1] : v[0] * v[0] + v[1] * v[1] + v[2] * v[2];                     // 3623
}                                                                                                                      // 3624
function _norm(v) {                                                                                                    // 3625
    return Math.sqrt(_normSquared(v));                                                                                 // 3626
}                                                                                                                      // 3627
function _sign(n) {                                                                                                    // 3628
    return (n < 0) ? -1 : 1;                                                                                           // 3629
}                                                                                                                      // 3630
                                                                                                                       // 3631
/**                                                                                                                    // 3632
 * Decompose Transform into separate .translate, .rotate, .scale,                                                      // 3633
 *    and .skew components.                                                                                            // 3634
 *                                                                                                                     // 3635
 * @method interpret                                                                                                   // 3636
 * @static                                                                                                             // 3637
 * @param {Transform} M transform matrix                                                                               // 3638
 * @return {Object} matrix spec object with component matrices .translate,                                             // 3639
 *    .rotate, .scale, .skew                                                                                           // 3640
 */                                                                                                                    // 3641
Transform.interpret = function interpret(M) {                                                                          // 3642
                                                                                                                       // 3643
    // QR decomposition via Householder reflections                                                                    // 3644
    //FIRST ITERATION                                                                                                  // 3645
                                                                                                                       // 3646
    //default Q1 to the identity matrix;                                                                               // 3647
    var x = [M[0], M[1], M[2]];                // first column vector                                                  // 3648
    var sgn = _sign(x[0]);                     // sign of first component of x (for stability)                         // 3649
    var xNorm = _norm(x);                      // norm of first column vector                                          // 3650
    var v = [x[0] + sgn * xNorm, x[1], x[2]];  // v = x + sign(x[0])|x|e1                                              // 3651
    var mult = 2 / _normSquared(v);            // mult = 2/v'v                                                         // 3652
                                                                                                                       // 3653
    //bail out if our Matrix is singular                                                                               // 3654
    if (mult >= Infinity) {                                                                                            // 3655
        return {translate: Transform.getTranslate(M), rotate: [0, 0, 0], scale: [0, 0, 0], skew: [0, 0, 0]};           // 3656
    }                                                                                                                  // 3657
                                                                                                                       // 3658
    //evaluate Q1 = I - 2vv'/v'v                                                                                       // 3659
    var Q1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];                                                         // 3660
                                                                                                                       // 3661
    //diagonals                                                                                                        // 3662
    Q1[0]  = 1 - mult * v[0] * v[0];    // 0,0 entry                                                                   // 3663
    Q1[5]  = 1 - mult * v[1] * v[1];    // 1,1 entry                                                                   // 3664
    Q1[10] = 1 - mult * v[2] * v[2];    // 2,2 entry                                                                   // 3665
                                                                                                                       // 3666
    //upper diagonal                                                                                                   // 3667
    Q1[1] = -mult * v[0] * v[1];        // 0,1 entry                                                                   // 3668
    Q1[2] = -mult * v[0] * v[2];        // 0,2 entry                                                                   // 3669
    Q1[6] = -mult * v[1] * v[2];        // 1,2 entry                                                                   // 3670
                                                                                                                       // 3671
    //lower diagonal                                                                                                   // 3672
    Q1[4] = Q1[1];                      // 1,0 entry                                                                   // 3673
    Q1[8] = Q1[2];                      // 2,0 entry                                                                   // 3674
    Q1[9] = Q1[6];                      // 2,1 entry                                                                   // 3675
                                                                                                                       // 3676
    //reduce first column of M                                                                                         // 3677
    var MQ1 = Transform.multiply(Q1, M);                                                                               // 3678
                                                                                                                       // 3679
    //SECOND ITERATION on (1,1) minor                                                                                  // 3680
    var x2 = [MQ1[5], MQ1[6]];                                                                                         // 3681
    var sgn2 = _sign(x2[0]);                    // sign of first component of x (for stability)                        // 3682
    var x2Norm = _norm(x2);                     // norm of first column vector                                         // 3683
    var v2 = [x2[0] + sgn2 * x2Norm, x2[1]];    // v = x + sign(x[0])|x|e1                                             // 3684
    var mult2 = 2 / _normSquared(v2);           // mult = 2/v'v                                                        // 3685
                                                                                                                       // 3686
    //evaluate Q2 = I - 2vv'/v'v                                                                                       // 3687
    var Q2 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];                                                         // 3688
                                                                                                                       // 3689
    //diagonal                                                                                                         // 3690
    Q2[5]  = 1 - mult2 * v2[0] * v2[0]; // 1,1 entry                                                                   // 3691
    Q2[10] = 1 - mult2 * v2[1] * v2[1]; // 2,2 entry                                                                   // 3692
                                                                                                                       // 3693
    //off diagonals                                                                                                    // 3694
    Q2[6] = -mult2 * v2[0] * v2[1];     // 2,1 entry                                                                   // 3695
    Q2[9] = Q2[6];                      // 1,2 entry                                                                   // 3696
                                                                                                                       // 3697
    //calc QR decomposition. Q = Q1*Q2, R = Q'*M                                                                       // 3698
    var Q = Transform.multiply(Q2, Q1);      //note: really Q transpose                                                // 3699
    var R = Transform.multiply(Q, M);                                                                                  // 3700
                                                                                                                       // 3701
    //remove negative scaling                                                                                          // 3702
    var remover = Transform.scale(R[0] < 0 ? -1 : 1, R[5] < 0 ? -1 : 1, R[10] < 0 ? -1 : 1);                           // 3703
    R = Transform.multiply(R, remover);                                                                                // 3704
    Q = Transform.multiply(remover, Q);                                                                                // 3705
                                                                                                                       // 3706
    //decompose into rotate/scale/skew matrices                                                                        // 3707
    var result = {};                                                                                                   // 3708
    result.translate = Transform.getTranslate(M);                                                                      // 3709
    result.rotate = [Math.atan2(-Q[6], Q[10]), Math.asin(Q[2]), Math.atan2(-Q[1], Q[0])];                              // 3710
    if (!result.rotate[0]) {                                                                                           // 3711
        result.rotate[0] = 0;                                                                                          // 3712
        result.rotate[2] = Math.atan2(Q[4], Q[5]);                                                                     // 3713
    }                                                                                                                  // 3714
    result.scale = [R[0], R[5], R[10]];                                                                                // 3715
    result.skew = [Math.atan2(R[9], result.scale[2]), Math.atan2(R[8], result.scale[2]), Math.atan2(R[4], result.scale[0])];
                                                                                                                       // 3717
    //double rotation workaround                                                                                       // 3718
    if (Math.abs(result.rotate[0]) + Math.abs(result.rotate[2]) > 1.5 * Math.PI) {                                     // 3719
        result.rotate[1] = Math.PI - result.rotate[1];                                                                 // 3720
        if (result.rotate[1] > Math.PI) result.rotate[1] -= 2 * Math.PI;                                               // 3721
        if (result.rotate[1] < -Math.PI) result.rotate[1] += 2 * Math.PI;                                              // 3722
        if (result.rotate[0] < 0) result.rotate[0] += Math.PI;                                                         // 3723
        else result.rotate[0] -= Math.PI;                                                                              // 3724
        if (result.rotate[2] < 0) result.rotate[2] += Math.PI;                                                         // 3725
        else result.rotate[2] -= Math.PI;                                                                              // 3726
    }                                                                                                                  // 3727
                                                                                                                       // 3728
    return result;                                                                                                     // 3729
};                                                                                                                     // 3730
                                                                                                                       // 3731
/**                                                                                                                    // 3732
 * Weighted average between two matrices by averaging their                                                            // 3733
 *     translation, rotation, scale, skew components.                                                                  // 3734
 *     f(M1,M2,t) = (1 - t) * M1 + t * M2                                                                              // 3735
 *                                                                                                                     // 3736
 * @method average                                                                                                     // 3737
 * @static                                                                                                             // 3738
 * @param {Transform} M1 f(M1,M2,0) = M1                                                                               // 3739
 * @param {Transform} M2 f(M1,M2,1) = M2                                                                               // 3740
 * @param {Number} t                                                                                                   // 3741
 * @return {Transform}                                                                                                 // 3742
 */                                                                                                                    // 3743
Transform.average = function average(M1, M2, t) {                                                                      // 3744
    t = (t === undefined) ? 0.5 : t;                                                                                   // 3745
    var specM1 = Transform.interpret(M1);                                                                              // 3746
    var specM2 = Transform.interpret(M2);                                                                              // 3747
                                                                                                                       // 3748
    var specAvg = {                                                                                                    // 3749
        translate: [0, 0, 0],                                                                                          // 3750
        rotate: [0, 0, 0],                                                                                             // 3751
        scale: [0, 0, 0],                                                                                              // 3752
        skew: [0, 0, 0]                                                                                                // 3753
    };                                                                                                                 // 3754
                                                                                                                       // 3755
    for (var i = 0; i < 3; i++) {                                                                                      // 3756
        specAvg.translate[i] = (1 - t) * specM1.translate[i] + t * specM2.translate[i];                                // 3757
        specAvg.rotate[i] = (1 - t) * specM1.rotate[i] + t * specM2.rotate[i];                                         // 3758
        specAvg.scale[i] = (1 - t) * specM1.scale[i] + t * specM2.scale[i];                                            // 3759
        specAvg.skew[i] = (1 - t) * specM1.skew[i] + t * specM2.skew[i];                                               // 3760
    }                                                                                                                  // 3761
    return Transform.build(specAvg);                                                                                   // 3762
};                                                                                                                     // 3763
                                                                                                                       // 3764
/**                                                                                                                    // 3765
 * Compose .translate, .rotate, .scale, .skew components into                                                          // 3766
 * Transform matrix                                                                                                    // 3767
 *                                                                                                                     // 3768
 * @method build                                                                                                       // 3769
 * @static                                                                                                             // 3770
 * @param {matrixSpec} spec object with component matrices .translate,                                                 // 3771
 *    .rotate, .scale, .skew                                                                                           // 3772
 * @return {Transform} composed transform                                                                              // 3773
 */                                                                                                                    // 3774
Transform.build = function build(spec) {                                                                               // 3775
    var scaleMatrix = Transform.scale(spec.scale[0], spec.scale[1], spec.scale[2]);                                    // 3776
    var skewMatrix = Transform.skew(spec.skew[0], spec.skew[1], spec.skew[2]);                                         // 3777
    var rotateMatrix = Transform.rotate(spec.rotate[0], spec.rotate[1], spec.rotate[2]);                               // 3778
    return Transform.thenMove(Transform.multiply(Transform.multiply(rotateMatrix, skewMatrix), scaleMatrix), spec.translate);
};                                                                                                                     // 3780
                                                                                                                       // 3781
/**                                                                                                                    // 3782
 * Determine if two Transforms are component-wise equal                                                                // 3783
 *   Warning: breaks on perspective Transforms                                                                         // 3784
 *                                                                                                                     // 3785
 * @method equals                                                                                                      // 3786
 * @static                                                                                                             // 3787
 * @param {Transform} a matrix                                                                                         // 3788
 * @param {Transform} b matrix                                                                                         // 3789
 * @return {boolean}                                                                                                   // 3790
 */                                                                                                                    // 3791
Transform.equals = function equals(a, b) {                                                                             // 3792
    return !Transform.notEquals(a, b);                                                                                 // 3793
};                                                                                                                     // 3794
                                                                                                                       // 3795
/**                                                                                                                    // 3796
 * Determine if two Transforms are component-wise unequal                                                              // 3797
 *   Warning: breaks on perspective Transforms                                                                         // 3798
 *                                                                                                                     // 3799
 * @method notEquals                                                                                                   // 3800
 * @static                                                                                                             // 3801
 * @param {Transform} a matrix                                                                                         // 3802
 * @param {Transform} b matrix                                                                                         // 3803
 * @return {boolean}                                                                                                   // 3804
 */                                                                                                                    // 3805
Transform.notEquals = function notEquals(a, b) {                                                                       // 3806
    if (a === b) return false;                                                                                         // 3807
                                                                                                                       // 3808
    // shortci                                                                                                         // 3809
    return !(a && b) ||                                                                                                // 3810
        a[12] !== b[12] || a[13] !== b[13] || a[14] !== b[14] ||                                                       // 3811
        a[0] !== b[0] || a[1] !== b[1] || a[2] !== b[2] ||                                                             // 3812
        a[4] !== b[4] || a[5] !== b[5] || a[6] !== b[6] ||                                                             // 3813
        a[8] !== b[8] || a[9] !== b[9] || a[10] !== b[10];                                                             // 3814
};                                                                                                                     // 3815
                                                                                                                       // 3816
/**                                                                                                                    // 3817
 * Constrain angle-trio components to range of [-pi, pi).                                                              // 3818
 *                                                                                                                     // 3819
 * @method normalizeRotation                                                                                           // 3820
 * @static                                                                                                             // 3821
 * @param {Array.Number} rotation phi, theta, psi (array of floats                                                     // 3822
 *    && array.length == 3)                                                                                            // 3823
 * @return {Array.Number} new phi, theta, psi triplet                                                                  // 3824
 *    (array of floats && array.length == 3)                                                                           // 3825
 */                                                                                                                    // 3826
Transform.normalizeRotation = function normalizeRotation(rotation) {                                                   // 3827
    var result = rotation.slice(0);                                                                                    // 3828
    if (result[0] === Math.PI * 0.5 || result[0] === -Math.PI * 0.5) {                                                 // 3829
        result[0] = -result[0];                                                                                        // 3830
        result[1] = Math.PI - result[1];                                                                               // 3831
        result[2] -= Math.PI;                                                                                          // 3832
    }                                                                                                                  // 3833
    if (result[0] > Math.PI * 0.5) {                                                                                   // 3834
        result[0] = result[0] - Math.PI;                                                                               // 3835
        result[1] = Math.PI - result[1];                                                                               // 3836
        result[2] -= Math.PI;                                                                                          // 3837
    }                                                                                                                  // 3838
    if (result[0] < -Math.PI * 0.5) {                                                                                  // 3839
        result[0] = result[0] + Math.PI;                                                                               // 3840
        result[1] = -Math.PI - result[1];                                                                              // 3841
        result[2] -= Math.PI;                                                                                          // 3842
    }                                                                                                                  // 3843
    while (result[1] < -Math.PI) result[1] += 2 * Math.PI;                                                             // 3844
    while (result[1] >= Math.PI) result[1] -= 2 * Math.PI;                                                             // 3845
    while (result[2] < -Math.PI) result[2] += 2 * Math.PI;                                                             // 3846
    while (result[2] >= Math.PI) result[2] -= 2 * Math.PI;                                                             // 3847
    return result;                                                                                                     // 3848
};                                                                                                                     // 3849
                                                                                                                       // 3850
/**                                                                                                                    // 3851
 * (Property) Array defining a translation forward in z by 1                                                           // 3852
 *                                                                                                                     // 3853
 * @property {array} inFront                                                                                           // 3854
 * @static                                                                                                             // 3855
 * @final                                                                                                              // 3856
 */                                                                                                                    // 3857
Transform.inFront = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1e-3, 1];                                               // 3858
                                                                                                                       // 3859
/**                                                                                                                    // 3860
 * (Property) Array defining a translation backwards in z by 1                                                         // 3861
 *                                                                                                                     // 3862
 * @property {array} behind                                                                                            // 3863
 * @static                                                                                                             // 3864
 * @final                                                                                                              // 3865
 */                                                                                                                    // 3866
Transform.behind = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, -1e-3, 1];                                               // 3867
                                                                                                                       // 3868
module.exports = Transform;                                                                                            // 3869
},{}],16:[function(require,module,exports){                                                                            // 3870
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 3871
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 3872
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 3873
 *                                                                                                                     // 3874
 * Owner: mark@famo.us                                                                                                 // 3875
 * @license MPL 2.0                                                                                                    // 3876
 * @copyright Famous Industries, Inc. 2014                                                                             // 3877
 */                                                                                                                    // 3878
                                                                                                                       // 3879
var EventHandler = require('./EventHandler');                                                                          // 3880
var OptionsManager = require('./OptionsManager');                                                                      // 3881
var RenderNode = require('./RenderNode');                                                                              // 3882
var Utility = require('../utilities/Utility');                                                                         // 3883
                                                                                                                       // 3884
/**                                                                                                                    // 3885
 * Useful for quickly creating elements within applications                                                            // 3886
 *   with large event systems.  Consists of a RenderNode paired with                                                   // 3887
 *   an input EventHandler and an output EventHandler.                                                                 // 3888
 *   Meant to be extended by the developer.                                                                            // 3889
 *                                                                                                                     // 3890
 * @class View                                                                                                         // 3891
 * @uses EventHandler                                                                                                  // 3892
 * @uses OptionsManager                                                                                                // 3893
 * @uses RenderNode                                                                                                    // 3894
 * @constructor                                                                                                        // 3895
 */                                                                                                                    // 3896
function View(options) {                                                                                               // 3897
    this._node = new RenderNode();                                                                                     // 3898
                                                                                                                       // 3899
    this._eventInput = new EventHandler();                                                                             // 3900
    this._eventOutput = new EventHandler();                                                                            // 3901
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 3902
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 3903
                                                                                                                       // 3904
    this.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || View.DEFAULT_OPTIONS);                            // 3905
    this._optionsManager = new OptionsManager(this.options);                                                           // 3906
                                                                                                                       // 3907
    if (options) this.setOptions(options);                                                                             // 3908
}                                                                                                                      // 3909
                                                                                                                       // 3910
View.DEFAULT_OPTIONS = {}; // no defaults                                                                              // 3911
                                                                                                                       // 3912
/**                                                                                                                    // 3913
 * Look up options value by key                                                                                        // 3914
 * @method getOptions                                                                                                  // 3915
 *                                                                                                                     // 3916
 * @param {string} key key                                                                                             // 3917
 * @return {Object} associated object                                                                                  // 3918
 */                                                                                                                    // 3919
View.prototype.getOptions = function getOptions(key) {                                                                 // 3920
    return this._optionsManager.getOptions(key);                                                                       // 3921
};                                                                                                                     // 3922
                                                                                                                       // 3923
/*                                                                                                                     // 3924
 *  Set internal options.                                                                                              // 3925
 *  No defaults options are set in View.                                                                               // 3926
 *                                                                                                                     // 3927
 *  @method setOptions                                                                                                 // 3928
 *  @param {Object} options                                                                                            // 3929
 */                                                                                                                    // 3930
View.prototype.setOptions = function setOptions(options) {                                                             // 3931
    this._optionsManager.patch(options);                                                                               // 3932
};                                                                                                                     // 3933
                                                                                                                       // 3934
/**                                                                                                                    // 3935
 * Add a child renderable to the view.                                                                                 // 3936
 *   Note: This is meant to be used by an inheriting class                                                             // 3937
 *   rather than from outside the prototype chain.                                                                     // 3938
 *                                                                                                                     // 3939
 * @method add                                                                                                         // 3940
 * @return {RenderNode}                                                                                                // 3941
 * @protected                                                                                                          // 3942
 */                                                                                                                    // 3943
View.prototype.add = function add() {                                                                                  // 3944
    return this._node.add.apply(this._node, arguments);                                                                // 3945
};                                                                                                                     // 3946
                                                                                                                       // 3947
/**                                                                                                                    // 3948
 * Alias for add                                                                                                       // 3949
 * @method _add                                                                                                        // 3950
 */                                                                                                                    // 3951
View.prototype._add = View.prototype.add;                                                                              // 3952
                                                                                                                       // 3953
/**                                                                                                                    // 3954
 * Generate a render spec from the contents of this component.                                                         // 3955
 *                                                                                                                     // 3956
 * @private                                                                                                            // 3957
 * @method render                                                                                                      // 3958
 * @return {number} Render spec for this component                                                                     // 3959
 */                                                                                                                    // 3960
View.prototype.render = function render() {                                                                            // 3961
    return this._node.render();                                                                                        // 3962
};                                                                                                                     // 3963
                                                                                                                       // 3964
/**                                                                                                                    // 3965
 * Return size of contained element.                                                                                   // 3966
 *                                                                                                                     // 3967
 * @method getSize                                                                                                     // 3968
 * @return {Array.Number} [width, height]                                                                              // 3969
 */                                                                                                                    // 3970
View.prototype.getSize = function getSize() {                                                                          // 3971
    if (this._node && this._node.getSize) {                                                                            // 3972
        return this._node.getSize.apply(this._node, arguments) || this.options.size;                                   // 3973
    }                                                                                                                  // 3974
    else return this.options.size;                                                                                     // 3975
};                                                                                                                     // 3976
                                                                                                                       // 3977
module.exports = View;                                                                                                 // 3978
},{"../utilities/Utility":95,"./EventHandler":7,"./OptionsManager":10,"./RenderNode":11}],17:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 3980
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 3981
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 3982
 *                                                                                                                     // 3983
 * Owner: mark@famo.us                                                                                                 // 3984
 * @license MPL 2.0                                                                                                    // 3985
 * @copyright Famous Industries, Inc. 2014                                                                             // 3986
 */                                                                                                                    // 3987
                                                                                                                       // 3988
                                                                                                                       // 3989
                                                                                                                       // 3990
                                                                                                                       // 3991
/**                                                                                                                    // 3992
 * Helper object used to iterate through items sequentially. Used in                                                   // 3993
 *   views that deal with layout.  A ViewSequence object conceptually points                                           // 3994
 *   to a node in a linked list.                                                                                       // 3995
 *                                                                                                                     // 3996
 * @class ViewSequence                                                                                                 // 3997
 *                                                                                                                     // 3998
 * @constructor                                                                                                        // 3999
 * @param {Object|Array} options Options object, or content array.                                                     // 4000
 * @param {Number} [options.index] starting index.                                                                     // 4001
 * @param {Number} [options.array] Array of elements to populate the ViewSequence                                      // 4002
 * @param {Object} [options._] Optional backing store (internal                                                        // 4003
 * @param {Boolean} [options.loop] Whether to wrap when accessing elements just past the end                           // 4004
 *   (or beginning) of the sequence.                                                                                   // 4005
 */                                                                                                                    // 4006
function ViewSequence(options) {                                                                                       // 4007
    if (!options) options = [];                                                                                        // 4008
    if (options instanceof Array) options = {array: options};                                                          // 4009
                                                                                                                       // 4010
    this._ = null;                                                                                                     // 4011
    this.index = options.index || 0;                                                                                   // 4012
                                                                                                                       // 4013
    if (options.array) this._ = new (this.constructor.Backing)(options.array);                                         // 4014
    else if (options._) this._ = options._;                                                                            // 4015
                                                                                                                       // 4016
    if (this.index === this._.firstIndex) this._.firstNode = this;                                                     // 4017
    if (this.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = this;                            // 4018
                                                                                                                       // 4019
    if (options.loop !== undefined) this._.loop = options.loop;                                                        // 4020
                                                                                                                       // 4021
    if (options.trackSize !== undefined) this._.trackSize = options.trackSize;                                         // 4022
                                                                                                                       // 4023
    this._previousNode = null;                                                                                         // 4024
    this._nextNode = null;                                                                                             // 4025
}                                                                                                                      // 4026
                                                                                                                       // 4027
// constructor for internal storage                                                                                    // 4028
ViewSequence.Backing = function Backing(array) {                                                                       // 4029
    this.array = array;                                                                                                // 4030
    this.firstIndex = 0;                                                                                               // 4031
    this.loop = false;                                                                                                 // 4032
    this.firstNode = null;                                                                                             // 4033
    this.lastNode = null;                                                                                              // 4034
    this.cumulativeSizes = [[0, 0]];                                                                                   // 4035
    this.sizeDirty = true;                                                                                             // 4036
    this.trackSize = false;                                                                                            // 4037
};                                                                                                                     // 4038
                                                                                                                       // 4039
// Get value "i" slots away from the first index.                                                                      // 4040
ViewSequence.Backing.prototype.getValue = function getValue(i) {                                                       // 4041
    var _i = i - this.firstIndex;                                                                                      // 4042
    if (_i < 0 || _i >= this.array.length) return null;                                                                // 4043
    return this.array[_i];                                                                                             // 4044
};                                                                                                                     // 4045
                                                                                                                       // 4046
// Set value "i" slots away from the first index.                                                                      // 4047
ViewSequence.Backing.prototype.setValue = function setValue(i, value) {                                                // 4048
    this.array[i - this.firstIndex] = value;                                                                           // 4049
};                                                                                                                     // 4050
                                                                                                                       // 4051
// Get sequence size from backing up to index                                                                          // 4052
// TODO: remove from viewSequence with proper abstraction                                                              // 4053
ViewSequence.Backing.prototype.getSize = function getSize(index) {                                                     // 4054
    return this.cumulativeSizes[index];                                                                                // 4055
};                                                                                                                     // 4056
                                                                                                                       // 4057
// Calculates cumulative size                                                                                          // 4058
// TODO: remove from viewSequence with proper abstraction                                                              // 4059
ViewSequence.Backing.prototype.calculateSize = function calculateSize(index) {                                         // 4060
    index = index || this.array.length;                                                                                // 4061
    var size = [0, 0];                                                                                                 // 4062
    for (var i = 0; i < index; i++) {                                                                                  // 4063
        var nodeSize = this.array[i].getSize();                                                                        // 4064
        if (!nodeSize) return undefined;                                                                               // 4065
        if (size[0] !== undefined) {                                                                                   // 4066
            if (nodeSize[0] === undefined) size[0] = undefined;                                                        // 4067
            else size[0] += nodeSize[0];                                                                               // 4068
        }                                                                                                              // 4069
        if (size[1] !== undefined) {                                                                                   // 4070
            if (nodeSize[1] === undefined) size[1] = undefined;                                                        // 4071
            else size[1] += nodeSize[1];                                                                               // 4072
        }                                                                                                              // 4073
        this.cumulativeSizes[i + 1] = size.slice();                                                                    // 4074
    }                                                                                                                  // 4075
    this.sizeDirty = false;                                                                                            // 4076
    return size;                                                                                                       // 4077
};                                                                                                                     // 4078
                                                                                                                       // 4079
// After splicing into the backing store, restore the indexes of each node correctly.                                  // 4080
ViewSequence.Backing.prototype.reindex = function reindex(start, removeCount, insertCount) {                           // 4081
    if (!this.array[0]) return;                                                                                        // 4082
                                                                                                                       // 4083
    var i = 0;                                                                                                         // 4084
    var index = this.firstIndex;                                                                                       // 4085
    var indexShiftAmount = insertCount - removeCount;                                                                  // 4086
    var node = this.firstNode;                                                                                         // 4087
                                                                                                                       // 4088
    // find node to begin                                                                                              // 4089
    while (index < start - 1) {                                                                                        // 4090
        node = node.getNext();                                                                                         // 4091
        index++;                                                                                                       // 4092
    }                                                                                                                  // 4093
    // skip removed nodes                                                                                              // 4094
    var spliceStartNode = node;                                                                                        // 4095
    for (i = 0; i < removeCount; i++) {                                                                                // 4096
        node = node.getNext();                                                                                         // 4097
        if (node) node._previousNode = spliceStartNode;                                                                // 4098
    }                                                                                                                  // 4099
    var spliceResumeNode = node ? node.getNext() : null;                                                               // 4100
    // generate nodes for inserted items                                                                               // 4101
    spliceStartNode._nextNode = null;                                                                                  // 4102
    node = spliceStartNode;                                                                                            // 4103
    for (i = 0; i < insertCount; i++) node = node.getNext();                                                           // 4104
    index += insertCount;                                                                                              // 4105
    // resume the chain                                                                                                // 4106
    if (node !== spliceResumeNode) {                                                                                   // 4107
        node._nextNode = spliceResumeNode;                                                                             // 4108
        if (spliceResumeNode) spliceResumeNode._previousNode = node;                                                   // 4109
    }                                                                                                                  // 4110
    if (spliceResumeNode) {                                                                                            // 4111
        node = spliceResumeNode;                                                                                       // 4112
        index++;                                                                                                       // 4113
        while (node && index < this.array.length + this.firstIndex) {                                                  // 4114
            if (node._nextNode) node.index += indexShiftAmount;                                                        // 4115
            else node.index = index;                                                                                   // 4116
            node = node.getNext();                                                                                     // 4117
            index++;                                                                                                   // 4118
        }                                                                                                              // 4119
    }                                                                                                                  // 4120
    if (this.trackSize) this.sizeDirty = true;                                                                         // 4121
};                                                                                                                     // 4122
                                                                                                                       // 4123
/**                                                                                                                    // 4124
 * Return ViewSequence node previous to this node in the list, respecting looping if applied.                          // 4125
 *                                                                                                                     // 4126
 * @method getPrevious                                                                                                 // 4127
 * @return {ViewSequence} previous node.                                                                               // 4128
 */                                                                                                                    // 4129
ViewSequence.prototype.getPrevious = function getPrevious() {                                                          // 4130
    var len = this._.array.length;                                                                                     // 4131
    if (!len) {                                                                                                        // 4132
        this._previousNode = null;                                                                                     // 4133
    }                                                                                                                  // 4134
    else if (this.index === this._.firstIndex) {                                                                       // 4135
        if (this._.loop) {                                                                                             // 4136
            this._previousNode = this._.lastNode || new (this.constructor)({_: this._, index: this._.firstIndex + len - 1});
            this._previousNode._nextNode = this;                                                                       // 4138
        }                                                                                                              // 4139
        else {                                                                                                         // 4140
            this._previousNode = null;                                                                                 // 4141
        }                                                                                                              // 4142
    }                                                                                                                  // 4143
    else if (!this._previousNode) {                                                                                    // 4144
        this._previousNode = new (this.constructor)({_: this._, index: this.index - 1});                               // 4145
        this._previousNode._nextNode = this;                                                                           // 4146
    }                                                                                                                  // 4147
    return this._previousNode;                                                                                         // 4148
};                                                                                                                     // 4149
                                                                                                                       // 4150
/**                                                                                                                    // 4151
 * Return ViewSequence node next after this node in the list, respecting looping if applied.                           // 4152
 *                                                                                                                     // 4153
 * @method getNext                                                                                                     // 4154
 * @return {ViewSequence} previous node.                                                                               // 4155
 */                                                                                                                    // 4156
ViewSequence.prototype.getNext = function getNext() {                                                                  // 4157
    var len = this._.array.length;                                                                                     // 4158
    if (!len) {                                                                                                        // 4159
        this._nextNode = null;                                                                                         // 4160
    }                                                                                                                  // 4161
    else if (this.index === this._.firstIndex + len - 1) {                                                             // 4162
        if (this._.loop) {                                                                                             // 4163
            this._nextNode = this._.firstNode || new (this.constructor)({_: this._, index: this._.firstIndex});        // 4164
            this._nextNode._previousNode = this;                                                                       // 4165
        }                                                                                                              // 4166
        else {                                                                                                         // 4167
            this._nextNode = null;                                                                                     // 4168
        }                                                                                                              // 4169
    }                                                                                                                  // 4170
    else if (!this._nextNode) {                                                                                        // 4171
        this._nextNode = new (this.constructor)({_: this._, index: this.index + 1});                                   // 4172
        this._nextNode._previousNode = this;                                                                           // 4173
    }                                                                                                                  // 4174
    return this._nextNode;                                                                                             // 4175
};                                                                                                                     // 4176
                                                                                                                       // 4177
/**                                                                                                                    // 4178
 * Return index of the provided item in the backing array                                                              // 4179
 *                                                                                                                     // 4180
 * @method indexOf                                                                                                     // 4181
 * @return {Number} index or -1 if not found                                                                           // 4182
 */                                                                                                                    // 4183
ViewSequence.prototype.indexOf = function indexOf(item) {                                                              // 4184
    return this._.array.indexOf(item);                                                                                 // 4185
};                                                                                                                     // 4186
                                                                                                                       // 4187
/**                                                                                                                    // 4188
 * Return index of this ViewSequence node.                                                                             // 4189
 *                                                                                                                     // 4190
 * @method getIndex                                                                                                    // 4191
 * @return {Number} index                                                                                              // 4192
 */                                                                                                                    // 4193
ViewSequence.prototype.getIndex = function getIndex() {                                                                // 4194
    return this.index;                                                                                                 // 4195
};                                                                                                                     // 4196
                                                                                                                       // 4197
/**                                                                                                                    // 4198
 * Return printable version of this ViewSequence node.                                                                 // 4199
 *                                                                                                                     // 4200
 * @method toString                                                                                                    // 4201
 * @return {string} this index as a string                                                                             // 4202
 */                                                                                                                    // 4203
ViewSequence.prototype.toString = function toString() {                                                                // 4204
    return '' + this.index;                                                                                            // 4205
};                                                                                                                     // 4206
                                                                                                                       // 4207
/**                                                                                                                    // 4208
 * Add one or more objects to the beginning of the sequence.                                                           // 4209
 *                                                                                                                     // 4210
 * @method unshift                                                                                                     // 4211
 * @param {...Object} value arguments array of objects                                                                 // 4212
 */                                                                                                                    // 4213
ViewSequence.prototype.unshift = function unshift(value) {                                                             // 4214
    this._.array.unshift.apply(this._.array, arguments);                                                               // 4215
    this._.firstIndex -= arguments.length;                                                                             // 4216
    if (this._.trackSize) this._.sizeDirty = true;                                                                     // 4217
};                                                                                                                     // 4218
                                                                                                                       // 4219
/**                                                                                                                    // 4220
 * Add one or more objects to the end of the sequence.                                                                 // 4221
 *                                                                                                                     // 4222
 * @method push                                                                                                        // 4223
 * @param {...Object} value arguments array of objects                                                                 // 4224
 */                                                                                                                    // 4225
ViewSequence.prototype.push = function push(value) {                                                                   // 4226
    this._.array.push.apply(this._.array, arguments);                                                                  // 4227
    if (this._.trackSize) this._.sizeDirty = true;                                                                     // 4228
};                                                                                                                     // 4229
                                                                                                                       // 4230
/**                                                                                                                    // 4231
 * Remove objects from the sequence                                                                                    // 4232
 *                                                                                                                     // 4233
 * @method splice                                                                                                      // 4234
 * @param {Number} index starting index for removal                                                                    // 4235
 * @param {Number} howMany how many elements to remove                                                                 // 4236
 * @param {...Object} value arguments array of objects                                                                 // 4237
 */                                                                                                                    // 4238
ViewSequence.prototype.splice = function splice(index, howMany) {                                                      // 4239
    var values = Array.prototype.slice.call(arguments, 2);                                                             // 4240
    this._.array.splice.apply(this._.array, [index - this._.firstIndex, howMany].concat(values));                      // 4241
    this._.reindex(index, howMany, values.length);                                                                     // 4242
};                                                                                                                     // 4243
                                                                                                                       // 4244
/**                                                                                                                    // 4245
 * Exchange this element's sequence position with another's.                                                           // 4246
 *                                                                                                                     // 4247
 * @method swap                                                                                                        // 4248
 * @param {ViewSequence} other element to swap with.                                                                   // 4249
 */                                                                                                                    // 4250
ViewSequence.prototype.swap = function swap(other) {                                                                   // 4251
    var otherValue = other.get();                                                                                      // 4252
    var myValue = this.get();                                                                                          // 4253
    this._.setValue(this.index, otherValue);                                                                           // 4254
    this._.setValue(other.index, myValue);                                                                             // 4255
                                                                                                                       // 4256
    var myPrevious = this._previousNode;                                                                               // 4257
    var myNext = this._nextNode;                                                                                       // 4258
    var myIndex = this.index;                                                                                          // 4259
    var otherPrevious = other._previousNode;                                                                           // 4260
    var otherNext = other._nextNode;                                                                                   // 4261
    var otherIndex = other.index;                                                                                      // 4262
                                                                                                                       // 4263
    this.index = otherIndex;                                                                                           // 4264
    this._previousNode = (otherPrevious === this) ? other : otherPrevious;                                             // 4265
    if (this._previousNode) this._previousNode._nextNode = this;                                                       // 4266
    this._nextNode = (otherNext === this) ? other : otherNext;                                                         // 4267
    if (this._nextNode) this._nextNode._previousNode = this;                                                           // 4268
                                                                                                                       // 4269
    other.index = myIndex;                                                                                             // 4270
    other._previousNode = (myPrevious === other) ? this : myPrevious;                                                  // 4271
    if (other._previousNode) other._previousNode._nextNode = other;                                                    // 4272
    other._nextNode = (myNext === other) ? this : myNext;                                                              // 4273
    if (other._nextNode) other._nextNode._previousNode = other;                                                        // 4274
                                                                                                                       // 4275
    if (this.index === this._.firstIndex) this._.firstNode = this;                                                     // 4276
    else if (this.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = this;                       // 4277
    if (other.index === this._.firstIndex) this._.firstNode = other;                                                   // 4278
    else if (other.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = other;                     // 4279
    if (this._.trackSize) this._.sizeDirty = true;                                                                     // 4280
};                                                                                                                     // 4281
                                                                                                                       // 4282
   /**                                                                                                                 // 4283
 * Return value of this ViewSequence node.                                                                             // 4284
 *                                                                                                                     // 4285
 * @method get                                                                                                         // 4286
 * @return {Object} value of thiss                                                                                     // 4287
 */                                                                                                                    // 4288
ViewSequence.prototype.get = function get() {                                                                          // 4289
    return this._.getValue(this.index);                                                                                // 4290
};                                                                                                                     // 4291
                                                                                                                       // 4292
   /**                                                                                                                 // 4293
 * Call getSize() on the contained View.                                                                               // 4294
 *                                                                                                                     // 4295
 * @method getSize                                                                                                     // 4296
 * @return {Array.Number} [width, height]                                                                              // 4297
 */                                                                                                                    // 4298
ViewSequence.prototype.getSize = function getSize() {                                                                  // 4299
    var target = this.get();                                                                                           // 4300
    return target ? target.getSize() : null;                                                                           // 4301
};                                                                                                                     // 4302
                                                                                                                       // 4303
/**                                                                                                                    // 4304
 * Generate a render spec from the contents of this component.                                                         // 4305
 * Specifically, this will render the value at the current index.                                                      // 4306
 * @private                                                                                                            // 4307
 * @method render                                                                                                      // 4308
 * @return {number} Render spec for this component                                                                     // 4309
 */                                                                                                                    // 4310
ViewSequence.prototype.render = function render() {                                                                    // 4311
    if (this._.trackSize && this._.sizeDirty) this._.calculateSize();                                                  // 4312
    var target = this.get();                                                                                           // 4313
    return target ? target.render.apply(target, arguments) : null;                                                     // 4314
};                                                                                                                     // 4315
                                                                                                                       // 4316
module.exports = ViewSequence;                                                                                         // 4317
},{}],18:[function(require,module,exports){                                                                            // 4318
module.exports = {                                                                                                     // 4319
  Context: require('./Context'),                                                                                       // 4320
  ElementAllocator: require('./ElementAllocator'),                                                                     // 4321
  ElementOutput: require('./ElementOutput'),                                                                           // 4322
  Engine: require('./Engine'),                                                                                         // 4323
  Entity: require('./Entity'),                                                                                         // 4324
  EventEmitter: require('./EventEmitter'),                                                                             // 4325
  EventHandler: require('./EventHandler'),                                                                             // 4326
  Group: require('./Group'),                                                                                           // 4327
  Modifier: require('./Modifier'),                                                                                     // 4328
  OptionsManager: require('./OptionsManager'),                                                                         // 4329
  RenderNode: require('./RenderNode'),                                                                                 // 4330
  Scene: require('./Scene'),                                                                                           // 4331
  SpecParser: require('./SpecParser'),                                                                                 // 4332
  Surface: require('./Surface'),                                                                                       // 4333
  Transform: require('./Transform'),                                                                                   // 4334
  View: require('./View'),                                                                                             // 4335
  ViewSequence: require('./ViewSequence')                                                                              // 4336
};                                                                                                                     // 4337
                                                                                                                       // 4338
},{"./Context":1,"./ElementAllocator":2,"./ElementOutput":3,"./Engine":4,"./Entity":5,"./EventEmitter":6,"./EventHandler":7,"./Group":8,"./Modifier":9,"./OptionsManager":10,"./RenderNode":11,"./Scene":12,"./SpecParser":13,"./Surface":14,"./Transform":15,"./View":16,"./ViewSequence":17}],19:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4340
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4341
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4342
 *                                                                                                                     // 4343
 * Owner: david@famo.us                                                                                                // 4344
 * @license MPL 2.0                                                                                                    // 4345
 * @copyright Famous Industries, Inc. 2014                                                                             // 4346
 */                                                                                                                    // 4347
                                                                                                                       // 4348
var EventHandler = require('../core/EventHandler');                                                                    // 4349
                                                                                                                       // 4350
/**                                                                                                                    // 4351
 * A switch which wraps several event destinations and                                                                 // 4352
 *  redirects received events to at most one of them.                                                                  // 4353
 *  Setting the 'mode' of the object dictates which one                                                                // 4354
 *  of these destinations will receive events.                                                                         // 4355
 *                                                                                                                     // 4356
 * @class EventArbiter                                                                                                 // 4357
 * @constructor                                                                                                        // 4358
 *                                                                                                                     // 4359
 * @param {Number | string} startMode initial setting of switch,                                                       // 4360
 */                                                                                                                    // 4361
function EventArbiter(startMode) {                                                                                     // 4362
    this.dispatchers = {};                                                                                             // 4363
    this.currMode = undefined;                                                                                         // 4364
    this.setMode(startMode);                                                                                           // 4365
}                                                                                                                      // 4366
                                                                                                                       // 4367
/**                                                                                                                    // 4368
 * Set switch to this mode, passing events to the corresponding                                                        // 4369
 *   EventHandler.  If mode has changed, emits 'change' event,                                                         // 4370
 *   emits 'unpipe' event to the old mode's handler, and emits 'pipe'                                                  // 4371
 *   event to the new mode's handler.                                                                                  // 4372
 *                                                                                                                     // 4373
 * @method setMode                                                                                                     // 4374
 *                                                                                                                     // 4375
 * @param {string | number} mode indicating which event handler to send to.                                            // 4376
 */                                                                                                                    // 4377
EventArbiter.prototype.setMode = function setMode(mode) {                                                              // 4378
    if (mode !== this.currMode) {                                                                                      // 4379
        var startMode = this.currMode;                                                                                 // 4380
                                                                                                                       // 4381
        if (this.dispatchers[this.currMode]) this.dispatchers[this.currMode].trigger('unpipe');                        // 4382
        this.currMode = mode;                                                                                          // 4383
        if (this.dispatchers[mode]) this.dispatchers[mode].emit('pipe');                                               // 4384
        this.emit('change', {from: startMode, to: mode});                                                              // 4385
    }                                                                                                                  // 4386
};                                                                                                                     // 4387
                                                                                                                       // 4388
/**                                                                                                                    // 4389
 * Return the existing EventHandler corresponding to this                                                              // 4390
 *   mode, creating one if it doesn't exist.                                                                           // 4391
 *                                                                                                                     // 4392
 * @method forMode                                                                                                     // 4393
 *                                                                                                                     // 4394
 * @param {string | number} mode mode to which this eventHandler corresponds                                           // 4395
 *                                                                                                                     // 4396
 * @return {EventHandler} eventHandler corresponding to this mode                                                      // 4397
 */                                                                                                                    // 4398
EventArbiter.prototype.forMode = function forMode(mode) {                                                              // 4399
    if (!this.dispatchers[mode]) this.dispatchers[mode] = new EventHandler();                                          // 4400
    return this.dispatchers[mode];                                                                                     // 4401
};                                                                                                                     // 4402
                                                                                                                       // 4403
/**                                                                                                                    // 4404
 * Trigger an event, sending to currently selected handler, if                                                         // 4405
 *   it is listening for provided 'type' key.                                                                          // 4406
 *                                                                                                                     // 4407
 * @method emit                                                                                                        // 4408
 *                                                                                                                     // 4409
 * @param {string} eventType event type key (for example, 'click')                                                     // 4410
 * @param {Object} event event data                                                                                    // 4411
 * @return {EventHandler} this                                                                                         // 4412
 */                                                                                                                    // 4413
EventArbiter.prototype.emit = function emit(eventType, event) {                                                        // 4414
    if (this.currMode === undefined) return false;                                                                     // 4415
    if (!event) event = {};                                                                                            // 4416
    var dispatcher = this.dispatchers[this.currMode];                                                                  // 4417
    if (dispatcher) return dispatcher.trigger(eventType, event);                                                       // 4418
};                                                                                                                     // 4419
                                                                                                                       // 4420
module.exports = EventArbiter;                                                                                         // 4421
},{"../core/EventHandler":7}],20:[function(require,module,exports){                                                    // 4422
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4423
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4424
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4425
 *                                                                                                                     // 4426
 * Owner: david@famo.us                                                                                                // 4427
 * @license MPL 2.0                                                                                                    // 4428
 * @copyright Famous Industries, Inc. 2014                                                                             // 4429
 */                                                                                                                    // 4430
                                                                                                                       // 4431
var EventHandler = require('../core/EventHandler');                                                                    // 4432
                                                                                                                       // 4433
/**                                                                                                                    // 4434
 * EventFilter regulates the broadcasting of events based on                                                           // 4435
 *  a specified condition function of standard event type: function(type, data).                                       // 4436
 *                                                                                                                     // 4437
 * @class EventFilter                                                                                                  // 4438
 * @constructor                                                                                                        // 4439
 *                                                                                                                     // 4440
 * @param {function} condition function to determine whether or not                                                    // 4441
 *    events are emitted.                                                                                              // 4442
 */                                                                                                                    // 4443
function EventFilter(condition) {                                                                                      // 4444
    EventHandler.call(this);                                                                                           // 4445
    this._condition = condition;                                                                                       // 4446
}                                                                                                                      // 4447
EventFilter.prototype = Object.create(EventHandler.prototype);                                                         // 4448
EventFilter.prototype.constructor = EventFilter;                                                                       // 4449
                                                                                                                       // 4450
/**                                                                                                                    // 4451
 * If filter condition is met, trigger an event, sending to all downstream handlers                                    // 4452
 *   listening for provided 'type' key.                                                                                // 4453
 *                                                                                                                     // 4454
 * @method emit                                                                                                        // 4455
 *                                                                                                                     // 4456
 * @param {string} type event type key (for example, 'click')                                                          // 4457
 * @param {Object} data event data                                                                                     // 4458
 * @return {EventHandler} this                                                                                         // 4459
 */                                                                                                                    // 4460
EventFilter.prototype.emit = function emit(type, data) {                                                               // 4461
    if (this._condition(type, data))                                                                                   // 4462
        return EventHandler.prototype.emit.apply(this, arguments);                                                     // 4463
};                                                                                                                     // 4464
                                                                                                                       // 4465
/**                                                                                                                    // 4466
 * An alias of emit. Trigger determines whether to send                                                                // 4467
 *  events based on the return value of it's condition function                                                        // 4468
 *  when passed the event type and associated data.                                                                    // 4469
 *                                                                                                                     // 4470
 * @method trigger                                                                                                     // 4471
 * @param {string} type name of the event                                                                              // 4472
 * @param {object} data associated data                                                                                // 4473
 */                                                                                                                    // 4474
EventFilter.prototype.trigger = EventFilter.prototype.emit;                                                            // 4475
                                                                                                                       // 4476
module.exports = EventFilter;                                                                                          // 4477
},{"../core/EventHandler":7}],21:[function(require,module,exports){                                                    // 4478
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4479
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4480
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4481
 *                                                                                                                     // 4482
 * Owner: david@famo.us                                                                                                // 4483
 * @license MPL 2.0                                                                                                    // 4484
 * @copyright Famous Industries, Inc. 2014                                                                             // 4485
 */                                                                                                                    // 4486
                                                                                                                       // 4487
var EventHandler = require('../core/EventHandler');                                                                    // 4488
                                                                                                                       // 4489
/**                                                                                                                    // 4490
 * EventMapper routes events to various event destinations                                                             // 4491
 *  based on custom logic.  The function signature is arbitrary.                                                       // 4492
 *                                                                                                                     // 4493
 * @class EventMapper                                                                                                  // 4494
 * @constructor                                                                                                        // 4495
 *                                                                                                                     // 4496
 * @param {function} mappingFunction function to determine where                                                       // 4497
 *  events are routed to.                                                                                              // 4498
 */                                                                                                                    // 4499
function EventMapper(mappingFunction) {                                                                                // 4500
    EventHandler.call(this);                                                                                           // 4501
    this._mappingFunction = mappingFunction;                                                                           // 4502
}                                                                                                                      // 4503
EventMapper.prototype = Object.create(EventHandler.prototype);                                                         // 4504
EventMapper.prototype.constructor = EventMapper;                                                                       // 4505
                                                                                                                       // 4506
EventMapper.prototype.subscribe = null;                                                                                // 4507
EventMapper.prototype.unsubscribe = null;                                                                              // 4508
                                                                                                                       // 4509
/**                                                                                                                    // 4510
 * Trigger an event, sending to all mapped downstream handlers                                                         // 4511
 *   listening for provided 'type' key.                                                                                // 4512
 *                                                                                                                     // 4513
 * @method emit                                                                                                        // 4514
 *                                                                                                                     // 4515
 * @param {string} type event type key (for example, 'click')                                                          // 4516
 * @param {Object} data event data                                                                                     // 4517
 * @return {EventHandler} this                                                                                         // 4518
 */                                                                                                                    // 4519
EventMapper.prototype.emit = function emit(type, data) {                                                               // 4520
    var target = this._mappingFunction.apply(this, arguments);                                                         // 4521
    if (target && (target.emit instanceof Function)) target.emit(type, data);                                          // 4522
};                                                                                                                     // 4523
                                                                                                                       // 4524
/**                                                                                                                    // 4525
 * Alias of emit.                                                                                                      // 4526
 * @method trigger                                                                                                     // 4527
 */                                                                                                                    // 4528
EventMapper.prototype.trigger = EventMapper.prototype.emit;                                                            // 4529
                                                                                                                       // 4530
module.exports = EventMapper;                                                                                          // 4531
},{"../core/EventHandler":7}],22:[function(require,module,exports){                                                    // 4532
module.exports = {                                                                                                     // 4533
  EventArbiter: require('./EventArbiter'),                                                                             // 4534
  EventFilter: require('./EventFilter'),                                                                               // 4535
  EventMapper: require('./EventMapper')                                                                                // 4536
};                                                                                                                     // 4537
                                                                                                                       // 4538
},{"./EventArbiter":19,"./EventFilter":20,"./EventMapper":21}],23:[function(require,module,exports){                   // 4539
module.exports = {                                                                                                     // 4540
  core: require('./core'),                                                                                             // 4541
  events: require('./events'),                                                                                         // 4542
  inputs: require('./inputs'),                                                                                         // 4543
  math: require('./math'),                                                                                             // 4544
  modifiers: require('./modifiers'),                                                                                   // 4545
  physics: require('./physics'),                                                                                       // 4546
  surfaces: require('./surfaces'),                                                                                     // 4547
  transitions: require('./transitions'),                                                                               // 4548
  utilities: require('./utilities'),                                                                                   // 4549
  widgets: require('./widgets'),                                                                                       // 4550
  views: require('./views')                                                                                            // 4551
};                                                                                                                     // 4552
                                                                                                                       // 4553
},{"./core":18,"./events":22,"./inputs":36,"./math":42,"./modifiers":47,"./physics":71,"./surfaces":82,"./transitions":92,"./utilities":96,"./views":111,"./widgets":116}],24:[function(require,module,exports){
var EventHandler = require('../core/EventHandler');                                                                    // 4555
var Transitionable = require('../transitions/Transitionable');                                                         // 4556
                                                                                                                       // 4557
/**                                                                                                                    // 4558
 * Accumulates differentials of event sources that emit a `delta`                                                      // 4559
 *  attribute taking a Number or Array of Number types. The accumulated                                                // 4560
 *  value is stored in a getter/setter.                                                                                // 4561
 *                                                                                                                     // 4562
 * @class Accumulator                                                                                                  // 4563
 * @constructor                                                                                                        // 4564
 * @param value {Number|Array|Transitionable}   Initializing value                                                     // 4565
 * @param [eventName='update'] {String}         Name of update event                                                   // 4566
 */                                                                                                                    // 4567
function Accumulator(value, eventName) {                                                                               // 4568
    if (eventName === undefined) eventName = 'update';                                                                 // 4569
                                                                                                                       // 4570
    this._state = (value && value.get && value.set)                                                                    // 4571
        ? value                                                                                                        // 4572
        : new Transitionable(value || 0);                                                                              // 4573
                                                                                                                       // 4574
    this._eventInput = new EventHandler();                                                                             // 4575
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 4576
                                                                                                                       // 4577
    this._eventInput.on(eventName, _handleUpdate.bind(this));                                                          // 4578
}                                                                                                                      // 4579
                                                                                                                       // 4580
function _handleUpdate(data) {                                                                                         // 4581
    var delta = data.delta;                                                                                            // 4582
    var state = this.get();                                                                                            // 4583
                                                                                                                       // 4584
    if (delta.constructor === state.constructor){                                                                      // 4585
        var newState = (delta instanceof Array)                                                                        // 4586
            ? [state[0] + delta[0], state[1] + delta[1]]                                                               // 4587
            : state + delta;                                                                                           // 4588
        this.set(newState);                                                                                            // 4589
    }                                                                                                                  // 4590
}                                                                                                                      // 4591
                                                                                                                       // 4592
/**                                                                                                                    // 4593
 * Basic getter                                                                                                        // 4594
 *                                                                                                                     // 4595
 * @method get                                                                                                         // 4596
 * @return {Number|Array} current value                                                                                // 4597
 */                                                                                                                    // 4598
Accumulator.prototype.get = function get() {                                                                           // 4599
    return this._state.get();                                                                                          // 4600
};                                                                                                                     // 4601
                                                                                                                       // 4602
/**                                                                                                                    // 4603
 * Basic setter                                                                                                        // 4604
 *                                                                                                                     // 4605
 * @method set                                                                                                         // 4606
 * @param value {Number|Array} new value                                                                               // 4607
 */                                                                                                                    // 4608
Accumulator.prototype.set = function set(value) {                                                                      // 4609
    this._state.set(value);                                                                                            // 4610
};                                                                                                                     // 4611
                                                                                                                       // 4612
module.exports = Accumulator;                                                                                          // 4613
},{"../core/EventHandler":7,"../transitions/Transitionable":88}],25:[function(require,module,exports){                 // 4614
var hasTouch = 'ontouchstart' in window;                                                                               // 4615
                                                                                                                       // 4616
function kill(type) {                                                                                                  // 4617
    window.addEventListener(type, function(event) {                                                                    // 4618
        event.stopPropagation();                                                                                       // 4619
        return false;                                                                                                  // 4620
    }, true);                                                                                                          // 4621
}                                                                                                                      // 4622
                                                                                                                       // 4623
if (hasTouch) {                                                                                                        // 4624
    kill('mousedown');                                                                                                 // 4625
    kill('mousemove');                                                                                                 // 4626
    kill('mouseup');                                                                                                   // 4627
    kill('mouseleave');                                                                                                // 4628
}                                                                                                                      // 4629
},{}],26:[function(require,module,exports){                                                                            // 4630
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4631
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4632
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4633
 *                                                                                                                     // 4634
 * Owner: mark@famo.us                                                                                                 // 4635
 * @license MPL 2.0                                                                                                    // 4636
 * @copyright Famous Industries, Inc. 2014                                                                             // 4637
 */                                                                                                                    // 4638
                                                                                                                       // 4639
                                                                                                                       // 4640
                                                                                                                       // 4641
/**                                                                                                                    // 4642
 * FastClick is an override shim which maps event pairs of                                                             // 4643
 *   'touchstart' and 'touchend' which differ by less than a certain                                                   // 4644
 *   threshold to the 'click' event.                                                                                   // 4645
 *   This is used to speed up clicks on some browsers.                                                                 // 4646
 */                                                                                                                    // 4647
(function() {                                                                                                          // 4648
  if (!window.CustomEvent) return;                                                                                     // 4649
  var clickThreshold = 300;                                                                                            // 4650
  var clickWindow = 500;                                                                                               // 4651
  var potentialClicks = {};                                                                                            // 4652
  var recentlyDispatched = {};                                                                                         // 4653
  var _now = Date.now;                                                                                                 // 4654
                                                                                                                       // 4655
  window.addEventListener('touchstart', function(event) {                                                              // 4656
      var timestamp = _now();                                                                                          // 4657
      for (var i = 0; i < event.changedTouches.length; i++) {                                                          // 4658
          var touch = event.changedTouches[i];                                                                         // 4659
          potentialClicks[touch.identifier] = timestamp;                                                               // 4660
      }                                                                                                                // 4661
  });                                                                                                                  // 4662
                                                                                                                       // 4663
  window.addEventListener('touchmove', function(event) {                                                               // 4664
      for (var i = 0; i < event.changedTouches.length; i++) {                                                          // 4665
          var touch = event.changedTouches[i];                                                                         // 4666
          delete potentialClicks[touch.identifier];                                                                    // 4667
      }                                                                                                                // 4668
  });                                                                                                                  // 4669
                                                                                                                       // 4670
  window.addEventListener('touchend', function(event) {                                                                // 4671
      var currTime = _now();                                                                                           // 4672
      for (var i = 0; i < event.changedTouches.length; i++) {                                                          // 4673
          var touch = event.changedTouches[i];                                                                         // 4674
          var startTime = potentialClicks[touch.identifier];                                                           // 4675
          if (startTime && currTime - startTime < clickThreshold) {                                                    // 4676
              var clickEvt = new window.CustomEvent('click', {                                                         // 4677
                  'bubbles': true,                                                                                     // 4678
                  'detail': touch                                                                                      // 4679
              });                                                                                                      // 4680
              recentlyDispatched[currTime] = event;                                                                    // 4681
              event.target.dispatchEvent(clickEvt);                                                                    // 4682
          }                                                                                                            // 4683
          delete potentialClicks[touch.identifier];                                                                    // 4684
      }                                                                                                                // 4685
  });                                                                                                                  // 4686
                                                                                                                       // 4687
  window.addEventListener('click', function(event) {                                                                   // 4688
      var currTime = _now();                                                                                           // 4689
      for (var i in recentlyDispatched) {                                                                              // 4690
          var previousEvent = recentlyDispatched[i];                                                                   // 4691
          if (currTime - i < clickWindow) {                                                                            // 4692
              if (event instanceof window.MouseEvent && event.target === previousEvent.target) event.stopPropagation();
          }                                                                                                            // 4694
          else delete recentlyDispatched[i];                                                                           // 4695
      }                                                                                                                // 4696
  }, true);                                                                                                            // 4697
})();                                                                                                                  // 4698
},{}],27:[function(require,module,exports){                                                                            // 4699
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4700
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4701
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4702
 *                                                                                                                     // 4703
 * Owner: mark@famo.us                                                                                                 // 4704
 * @license MPL 2.0                                                                                                    // 4705
 * @copyright Famous Industries, Inc. 2014                                                                             // 4706
 */                                                                                                                    // 4707
var EventHandler = require('../core/EventHandler');                                                                    // 4708
                                                                                                                       // 4709
/**                                                                                                                    // 4710
 * Combines multiple types of sync classes (e.g. mouse, touch,                                                         // 4711
 *  scrolling) into one standardized interface for inclusion in widgets.                                               // 4712
 *                                                                                                                     // 4713
 *  Sync classes are first registered with a key, and then can be accessed                                             // 4714
 *  globally by key.                                                                                                   // 4715
 *                                                                                                                     // 4716
 *  Emits 'start', 'update' and 'end' events as a union of the sync class                                              // 4717
 *  providers.                                                                                                         // 4718
 *                                                                                                                     // 4719
 * @class GenericSync                                                                                                  // 4720
 * @constructor                                                                                                        // 4721
 * @param syncs {Object|Array} object with fields {sync key : sync options}                                            // 4722
 *    or an array of registered sync keys                                                                              // 4723
 * @param [options] {Object|Array} options object to set on all syncs                                                  // 4724
 */                                                                                                                    // 4725
function GenericSync(syncs, options) {                                                                                 // 4726
    this._eventInput = new EventHandler();                                                                             // 4727
    this._eventOutput = new EventHandler();                                                                            // 4728
                                                                                                                       // 4729
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 4730
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 4731
                                                                                                                       // 4732
    this._syncs = {};                                                                                                  // 4733
    if (syncs) this.addSync(syncs);                                                                                    // 4734
    if (options) this.setOptions(options);                                                                             // 4735
}                                                                                                                      // 4736
                                                                                                                       // 4737
GenericSync.DIRECTION_X = 0;                                                                                           // 4738
GenericSync.DIRECTION_Y = 1;                                                                                           // 4739
GenericSync.DIRECTION_Z = 2;                                                                                           // 4740
                                                                                                                       // 4741
// Global registry of sync classes. Append only.                                                                       // 4742
var registry = {};                                                                                                     // 4743
                                                                                                                       // 4744
/**                                                                                                                    // 4745
 * Register a global sync class with an identifying key                                                                // 4746
 *                                                                                                                     // 4747
 * @static                                                                                                             // 4748
 * @method register                                                                                                    // 4749
 *                                                                                                                     // 4750
 * @param syncObject {Object} an object of {sync key : sync options} fields                                            // 4751
 */                                                                                                                    // 4752
GenericSync.register = function register(syncObject) {                                                                 // 4753
    for (var key in syncObject){                                                                                       // 4754
        if (registry[key]){                                                                                            // 4755
            if (registry[key] === syncObject[key]) return; // redundant registration                                   // 4756
            else throw new Error('this key is registered to a different sync class');                                  // 4757
        }                                                                                                              // 4758
        else registry[key] = syncObject[key];                                                                          // 4759
    }                                                                                                                  // 4760
};                                                                                                                     // 4761
                                                                                                                       // 4762
/**                                                                                                                    // 4763
 * Helper to set options on all sync instances                                                                         // 4764
 *                                                                                                                     // 4765
 * @method setOptions                                                                                                  // 4766
 * @param options {Object} options object                                                                              // 4767
 */                                                                                                                    // 4768
GenericSync.prototype.setOptions = function(options) {                                                                 // 4769
    for (var key in this._syncs){                                                                                      // 4770
        this._syncs[key].setOptions(options);                                                                          // 4771
    }                                                                                                                  // 4772
};                                                                                                                     // 4773
                                                                                                                       // 4774
/**                                                                                                                    // 4775
 * Pipe events to a sync class                                                                                         // 4776
 *                                                                                                                     // 4777
 * @method pipeSync                                                                                                    // 4778
 * @param key {String} identifier for sync class                                                                       // 4779
 */                                                                                                                    // 4780
GenericSync.prototype.pipeSync = function pipeToSync(key) {                                                            // 4781
    var sync = this._syncs[key];                                                                                       // 4782
    this._eventInput.pipe(sync);                                                                                       // 4783
    sync.pipe(this._eventOutput);                                                                                      // 4784
};                                                                                                                     // 4785
                                                                                                                       // 4786
/**                                                                                                                    // 4787
 * Unpipe events from a sync class                                                                                     // 4788
 *                                                                                                                     // 4789
 * @method unpipeSync                                                                                                  // 4790
 * @param key {String} identifier for sync class                                                                       // 4791
 */                                                                                                                    // 4792
GenericSync.prototype.unpipeSync = function unpipeFromSync(key) {                                                      // 4793
    var sync = this._syncs[key];                                                                                       // 4794
    this._eventInput.unpipe(sync);                                                                                     // 4795
    sync.unpipe(this._eventOutput);                                                                                    // 4796
};                                                                                                                     // 4797
                                                                                                                       // 4798
function _addSingleSync(key, options) {                                                                                // 4799
    if (!registry[key]) return;                                                                                        // 4800
    this._syncs[key] = new (registry[key])(options);                                                                   // 4801
    this.pipeSync(key);                                                                                                // 4802
}                                                                                                                      // 4803
                                                                                                                       // 4804
/**                                                                                                                    // 4805
 * Add a sync class to from the registered classes                                                                     // 4806
 *                                                                                                                     // 4807
 * @method addSync                                                                                                     // 4808
 * @param syncs {Object|Array.String} an array of registered sync keys                                                 // 4809
 *    or an object with fields {sync key : sync options}                                                               // 4810
 */                                                                                                                    // 4811
GenericSync.prototype.addSync = function addSync(syncs) {                                                              // 4812
    if (syncs instanceof Array)                                                                                        // 4813
        for (var i = 0; i < syncs.length; i++)                                                                         // 4814
            _addSingleSync.call(this, syncs[i]);                                                                       // 4815
    else if (syncs instanceof Object)                                                                                  // 4816
        for (var key in syncs)                                                                                         // 4817
            _addSingleSync.call(this, key, syncs[key]);                                                                // 4818
};                                                                                                                     // 4819
                                                                                                                       // 4820
module.exports = GenericSync;                                                                                          // 4821
},{"../core/EventHandler":7}],28:[function(require,module,exports){                                                    // 4822
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4823
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4824
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4825
 *                                                                                                                     // 4826
 * Owner: mark@famo.us                                                                                                 // 4827
 * @license MPL 2.0                                                                                                    // 4828
 * @copyright Famous Industries, Inc. 2014                                                                             // 4829
 */                                                                                                                    // 4830
var EventHandler = require('../core/EventHandler');                                                                    // 4831
var OptionsManager = require('../core/OptionsManager');                                                                // 4832
                                                                                                                       // 4833
/**                                                                                                                    // 4834
 * Handles piped in mouse drag events. Outputs an object with the position delta from last frame, position from start, // 4835
 * current velocity averaged out over the velocitySampleLength (set via options), clientX, clientY, offsetX, and offsetY.
 *                                                                                                                     // 4837
 * Emits 'start', 'update' and 'end' events. Designed to be used either as a standalone MouseSync, or as part of a     // 4838
 * GenericSync.                                                                                                        // 4839
 *                                                                                                                     // 4840
 * @class MouseSync                                                                                                    // 4841
 * @constructor                                                                                                        // 4842
 *                                                                                                                     // 4843
 * @example                                                                                                            // 4844
 *   var Surface = require('../core/Surface');                                                                         // 4845
 *   var MouseSync = require('../inputs/MouseSync');                                                                   // 4846
 *                                                                                                                     // 4847
 *   var surface = new Surface({ size: [100, 100] });                                                                  // 4848
 *   var mouseSync = new MouseSync();                                                                                  // 4849
 *   surface.pipe(mouseSync);                                                                                          // 4850
 *                                                                                                                     // 4851
 *   mouseSync.on('start', function (e) { // react to start });                                                        // 4852
 *   mouseSync.on('update', function (e) { // react to update });                                                      // 4853
 *   mouseSync.on('end', function (e) { // react to end });                                                            // 4854
 *                                                                                                                     // 4855
 * @param [options] {Object}                An object of the following configurable options.                           // 4856
 * @param [options.direction] {Number}      Read from a particular axis. Valid options are: undefined, 0 or 1. 0 corresponds to x, and 1 to y. Default is undefined, which allows both x and y.
 * @param [options.rails] {Boolean}         Read from axis with the greatest differential.                             // 4858
 * @param [options.velocitySampleLength] {Number}  Number of previous frames to check velocity against.                // 4859
 * @param [options.propogate] {Boolean}     Add a listener to document on mouseleave. This allows drag events to continue across the entire page.
 */                                                                                                                    // 4861
function MouseSync(options) {                                                                                          // 4862
    this.options =  Object.create(MouseSync.DEFAULT_OPTIONS);                                                          // 4863
    this._optionsManager = new OptionsManager(this.options);                                                           // 4864
                                                                                                                       // 4865
    if (options) this.setOptions(options);                                                                             // 4866
                                                                                                                       // 4867
    this._eventInput = new EventHandler();                                                                             // 4868
    this._eventOutput = new EventHandler();                                                                            // 4869
                                                                                                                       // 4870
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 4871
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 4872
                                                                                                                       // 4873
    this._eventInput.on('mousedown', _handleStart.bind(this));                                                         // 4874
    this._eventInput.on('mousemove', _handleMove.bind(this));                                                          // 4875
    this._eventInput.on('mouseup', _handleEnd.bind(this));                                                             // 4876
                                                                                                                       // 4877
    if (this.options.propogate) this._eventInput.on('mouseleave', _handleLeave.bind(this));                            // 4878
    else this._eventInput.on('mouseleave', _handleEnd.bind(this));                                                     // 4879
                                                                                                                       // 4880
    this._payload = {                                                                                                  // 4881
        delta    : null,                                                                                               // 4882
        position : null,                                                                                               // 4883
        velocity : null,                                                                                               // 4884
        clientX  : 0,                                                                                                  // 4885
        clientY  : 0,                                                                                                  // 4886
        offsetX  : 0,                                                                                                  // 4887
        offsetY  : 0                                                                                                   // 4888
    };                                                                                                                 // 4889
                                                                                                                       // 4890
    this._positionHistory = [];                                                                                        // 4891
    this._position = null;      // to be deprecated                                                                    // 4892
    this._prevCoord = undefined;                                                                                       // 4893
    this._prevTime = undefined;                                                                                        // 4894
    this._down = false;                                                                                                // 4895
    this._moved = false;                                                                                               // 4896
    this._documentActive = false;                                                                                      // 4897
}                                                                                                                      // 4898
                                                                                                                       // 4899
MouseSync.DEFAULT_OPTIONS = {                                                                                          // 4900
    direction: undefined,                                                                                              // 4901
    rails: false,                                                                                                      // 4902
    scale: 1,                                                                                                          // 4903
    propogate: true,  // events piped to document on mouseleave                                                        // 4904
    velocitySampleLength: 10,                                                                                          // 4905
    preventDefault: true                                                                                               // 4906
};                                                                                                                     // 4907
                                                                                                                       // 4908
MouseSync.DIRECTION_X = 0;                                                                                             // 4909
MouseSync.DIRECTION_Y = 1;                                                                                             // 4910
                                                                                                                       // 4911
var MINIMUM_TICK_TIME = 8;                                                                                             // 4912
                                                                                                                       // 4913
/**                                                                                                                    // 4914
 *  Triggered by mousedown.                                                                                            // 4915
 *                                                                                                                     // 4916
 *  @method _handleStart                                                                                               // 4917
 *  @private                                                                                                           // 4918
 */                                                                                                                    // 4919
function _handleStart(event) {                                                                                         // 4920
    var delta;                                                                                                         // 4921
    var velocity;                                                                                                      // 4922
    if (this.options.preventDefault) event.preventDefault(); // prevent drag                                           // 4923
                                                                                                                       // 4924
    var x = event.clientX;                                                                                             // 4925
    var y = event.clientY;                                                                                             // 4926
                                                                                                                       // 4927
    this._prevCoord = [x, y];                                                                                          // 4928
    this._prevTime = Date.now();                                                                                       // 4929
    this._down = true;                                                                                                 // 4930
    this._move = false;                                                                                                // 4931
                                                                                                                       // 4932
    if (this.options.direction !== undefined) {                                                                        // 4933
        this._position = 0;                                                                                            // 4934
        delta = 0;                                                                                                     // 4935
        velocity = 0;                                                                                                  // 4936
    }                                                                                                                  // 4937
    else {                                                                                                             // 4938
        this._position = [0, 0];                                                                                       // 4939
        delta = [0, 0];                                                                                                // 4940
        velocity = [0, 0];                                                                                             // 4941
    }                                                                                                                  // 4942
                                                                                                                       // 4943
    var payload = this._payload;                                                                                       // 4944
    payload.delta = delta;                                                                                             // 4945
    payload.position = this._position;                                                                                 // 4946
    payload.velocity = velocity;                                                                                       // 4947
    payload.clientX = x;                                                                                               // 4948
    payload.clientY = y;                                                                                               // 4949
    payload.offsetX = event.offsetX;                                                                                   // 4950
    payload.offsetY = event.offsetY;                                                                                   // 4951
                                                                                                                       // 4952
    this._positionHistory.push({                                                                                       // 4953
        position: payload.position.slice ? payload.position.slice(0) : payload.position,                               // 4954
        time: this._prevTime                                                                                           // 4955
    });                                                                                                                // 4956
                                                                                                                       // 4957
    this._eventOutput.emit('start', payload);                                                                          // 4958
    this._documentActive = false;                                                                                      // 4959
}                                                                                                                      // 4960
                                                                                                                       // 4961
/**                                                                                                                    // 4962
 *  Triggered by mousemove.                                                                                            // 4963
 *                                                                                                                     // 4964
 *  @method _handleMove                                                                                                // 4965
 *  @private                                                                                                           // 4966
 */                                                                                                                    // 4967
function _handleMove(event) {                                                                                          // 4968
    if (!this._prevCoord) return;                                                                                      // 4969
                                                                                                                       // 4970
    var prevCoord = this._prevCoord;                                                                                   // 4971
    var prevTime = this._prevTime;                                                                                     // 4972
                                                                                                                       // 4973
    var x = event.clientX;                                                                                             // 4974
    var y = event.clientY;                                                                                             // 4975
                                                                                                                       // 4976
    var currTime = Date.now();                                                                                         // 4977
                                                                                                                       // 4978
    var diffX = x - prevCoord[0];                                                                                      // 4979
    var diffY = y - prevCoord[1];                                                                                      // 4980
                                                                                                                       // 4981
    if (this.options.rails) {                                                                                          // 4982
        if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;                                                              // 4983
        else diffX = 0;                                                                                                // 4984
    }                                                                                                                  // 4985
                                                                                                                       // 4986
    var diffTime = Math.max(currTime - this._positionHistory[0].time, MINIMUM_TICK_TIME); // minimum tick time         // 4987
                                                                                                                       // 4988
    var scale = this.options.scale;                                                                                    // 4989
    var nextVel;                                                                                                       // 4990
    var nextDelta;                                                                                                     // 4991
                                                                                                                       // 4992
    if (this.options.direction === MouseSync.DIRECTION_X) {                                                            // 4993
        nextDelta = scale * diffX;                                                                                     // 4994
        this._position += nextDelta;                                                                                   // 4995
        nextVel = scale * (this._position - this._positionHistory[0].position) / diffTime;                             // 4996
    }                                                                                                                  // 4997
    else if (this.options.direction === MouseSync.DIRECTION_Y) {                                                       // 4998
        nextDelta = scale * diffY;                                                                                     // 4999
        this._position += nextDelta;                                                                                   // 5000
        nextVel = scale * (this._position - this._positionHistory[0].position) / diffTime;                             // 5001
    }                                                                                                                  // 5002
    else {                                                                                                             // 5003
        nextDelta = [scale * diffX, scale * diffY];                                                                    // 5004
        nextVel = [                                                                                                    // 5005
            scale * (this._position[0] - this._positionHistory[0].position[0]) / diffTime,                             // 5006
            scale * (this._position[1] - this._positionHistory[0].position[1]) / diffTime                              // 5007
        ];                                                                                                             // 5008
        this._position[0] += nextDelta[0];                                                                             // 5009
        this._position[1] += nextDelta[1];                                                                             // 5010
    }                                                                                                                  // 5011
                                                                                                                       // 5012
    var payload = this._payload;                                                                                       // 5013
    payload.delta    = nextDelta;                                                                                      // 5014
    payload.position = this._position;                                                                                 // 5015
    payload.velocity = nextVel;                                                                                        // 5016
    payload.clientX  = x;                                                                                              // 5017
    payload.clientY  = y;                                                                                              // 5018
    payload.offsetX  = event.offsetX;                                                                                  // 5019
    payload.offsetY  = event.offsetY;                                                                                  // 5020
                                                                                                                       // 5021
    if (this._positionHistory.length === this.options.velocitySampleLength) {                                          // 5022
      this._positionHistory.shift();                                                                                   // 5023
    }                                                                                                                  // 5024
                                                                                                                       // 5025
    this._positionHistory.push({                                                                                       // 5026
      position: payload.position.slice ? payload.position.slice(0) : payload.position,                                 // 5027
      time: currTime                                                                                                   // 5028
    });                                                                                                                // 5029
                                                                                                                       // 5030
    this._eventOutput.emit('update', payload);                                                                         // 5031
                                                                                                                       // 5032
    this._prevCoord = [x, y];                                                                                          // 5033
    this._prevTime = currTime;                                                                                         // 5034
    this._move = true;                                                                                                 // 5035
}                                                                                                                      // 5036
                                                                                                                       // 5037
/**                                                                                                                    // 5038
 *  Triggered by mouseup on the element or document body if propagation is enabled, or                                 // 5039
 *  mouseleave if propagation is off.                                                                                  // 5040
 *                                                                                                                     // 5041
 *  @method _handleEnd                                                                                                 // 5042
 *  @private                                                                                                           // 5043
 */                                                                                                                    // 5044
function _handleEnd(event) {                                                                                           // 5045
    if (!this._down) return;                                                                                           // 5046
                                                                                                                       // 5047
    this._eventOutput.emit('end', this._payload);                                                                      // 5048
    this._prevCoord = undefined;                                                                                       // 5049
    this._prevTime = undefined;                                                                                        // 5050
    this._down = false;                                                                                                // 5051
    this._move = false;                                                                                                // 5052
    this._positionHistory = [];                                                                                        // 5053
}                                                                                                                      // 5054
                                                                                                                       // 5055
/**                                                                                                                    // 5056
 *  Switches the mousemove listener to the document body, if propagation is enabled.                                   // 5057
 *  @method _handleLeave                                                                                               // 5058
 *  @private                                                                                                           // 5059
 */                                                                                                                    // 5060
function _handleLeave(event) {                                                                                         // 5061
    if (!this._down || !this._move) return;                                                                            // 5062
                                                                                                                       // 5063
    if (!this._documentActive) {                                                                                       // 5064
      var boundMove = _handleMove.bind(this);                                                                          // 5065
      var boundEnd = function(event) {                                                                                 // 5066
          _handleEnd.call(this, event);                                                                                // 5067
          document.removeEventListener('mousemove', boundMove);                                                        // 5068
          document.removeEventListener('mouseup', boundEnd);                                                           // 5069
      }.bind(this, event);                                                                                             // 5070
      document.addEventListener('mousemove', boundMove);                                                               // 5071
      document.addEventListener('mouseup', boundEnd);                                                                  // 5072
      this._documentActive = true;                                                                                     // 5073
    }                                                                                                                  // 5074
}                                                                                                                      // 5075
                                                                                                                       // 5076
/**                                                                                                                    // 5077
 * Return entire options dictionary, including defaults.                                                               // 5078
 *                                                                                                                     // 5079
 * @method getOptions                                                                                                  // 5080
 * @return {Object} configuration options                                                                              // 5081
 */                                                                                                                    // 5082
MouseSync.prototype.getOptions = function getOptions() {                                                               // 5083
    return this.options;                                                                                               // 5084
};                                                                                                                     // 5085
                                                                                                                       // 5086
/**                                                                                                                    // 5087
 * Set internal options, overriding any default options                                                                // 5088
 *                                                                                                                     // 5089
 * @method setOptions                                                                                                  // 5090
 *                                                                                                                     // 5091
 * @param [options] {Object}             default options overrides                                                     // 5092
 * @param [options.direction] {Number}   read from a particular axis                                                   // 5093
 * @param [options.rails] {Boolean}      read from axis with greatest differential                                     // 5094
 * @param [options.propogate] {Boolean}  add listened to document on mouseleave                                        // 5095
 */                                                                                                                    // 5096
MouseSync.prototype.setOptions = function setOptions(options) {                                                        // 5097
    return this._optionsManager.setOptions(options);                                                                   // 5098
};                                                                                                                     // 5099
                                                                                                                       // 5100
module.exports = MouseSync;                                                                                            // 5101
},{"../core/EventHandler":7,"../core/OptionsManager":10}],29:[function(require,module,exports){                        // 5102
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5103
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5104
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5105
 *                                                                                                                     // 5106
 * Owner: mark@famo.us                                                                                                 // 5107
 * @license MPL 2.0                                                                                                    // 5108
 * @copyright Famous Industries, Inc. 2014                                                                             // 5109
 */                                                                                                                    // 5110
var TwoFingerSync = require('./TwoFingerSync');                                                                        // 5111
var OptionsManager = require('../core/OptionsManager');                                                                // 5112
                                                                                                                       // 5113
/**                                                                                                                    // 5114
 * Handles piped in two-finger touch events to change position via pinching / expanding.                               // 5115
 *   Emits 'start', 'update' and 'end' events with                                                                     // 5116
 *   position, velocity, touch ids, and distance between fingers.                                                      // 5117
 *                                                                                                                     // 5118
 * @class PinchSync                                                                                                    // 5119
 * @extends TwoFingerSync                                                                                              // 5120
 * @constructor                                                                                                        // 5121
 * @param {Object} options default options overrides                                                                   // 5122
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5123
 */                                                                                                                    // 5124
function PinchSync(options) {                                                                                          // 5125
    TwoFingerSync.call(this);                                                                                          // 5126
                                                                                                                       // 5127
    this.options = Object.create(PinchSync.DEFAULT_OPTIONS);                                                           // 5128
    this._optionsManager = new OptionsManager(this.options);                                                           // 5129
    if (options) this.setOptions(options);                                                                             // 5130
                                                                                                                       // 5131
    this._displacement = 0;                                                                                            // 5132
    this._previousDistance = 0;                                                                                        // 5133
}                                                                                                                      // 5134
                                                                                                                       // 5135
PinchSync.prototype = Object.create(TwoFingerSync.prototype);                                                          // 5136
PinchSync.prototype.constructor = PinchSync;                                                                           // 5137
                                                                                                                       // 5138
PinchSync.DEFAULT_OPTIONS = {                                                                                          // 5139
    scale : 1                                                                                                          // 5140
};                                                                                                                     // 5141
                                                                                                                       // 5142
PinchSync.prototype._startUpdate = function _startUpdate(event) {                                                      // 5143
    this._previousDistance = TwoFingerSync.calculateDistance(this.posA, this.posB);                                    // 5144
    this._displacement = 0;                                                                                            // 5145
                                                                                                                       // 5146
    this._eventOutput.emit('start', {                                                                                  // 5147
        count: event.touches.length,                                                                                   // 5148
        touches: [this.touchAId, this.touchBId],                                                                       // 5149
        distance: this._dist,                                                                                          // 5150
        center: TwoFingerSync.calculateCenter(this.posA, this.posB)                                                    // 5151
    });                                                                                                                // 5152
};                                                                                                                     // 5153
                                                                                                                       // 5154
PinchSync.prototype._moveUpdate = function _moveUpdate(diffTime) {                                                     // 5155
    var currDist = TwoFingerSync.calculateDistance(this.posA, this.posB);                                              // 5156
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5157
                                                                                                                       // 5158
    var scale = this.options.scale;                                                                                    // 5159
    var delta = scale * (currDist - this._previousDistance);                                                           // 5160
    var velocity = delta / diffTime;                                                                                   // 5161
                                                                                                                       // 5162
    this._previousDistance = currDist;                                                                                 // 5163
    this._displacement += delta;                                                                                       // 5164
                                                                                                                       // 5165
    this._eventOutput.emit('update', {                                                                                 // 5166
        delta : delta,                                                                                                 // 5167
        velocity: velocity,                                                                                            // 5168
        distance: currDist,                                                                                            // 5169
        displacement: this._displacement,                                                                              // 5170
        center: center,                                                                                                // 5171
        touches: [this.touchAId, this.touchBId]                                                                        // 5172
    });                                                                                                                // 5173
};                                                                                                                     // 5174
                                                                                                                       // 5175
/**                                                                                                                    // 5176
 * Return entire options dictionary, including defaults.                                                               // 5177
 *                                                                                                                     // 5178
 * @method getOptions                                                                                                  // 5179
 * @return {Object} configuration options                                                                              // 5180
 */                                                                                                                    // 5181
PinchSync.prototype.getOptions = function getOptions() {                                                               // 5182
    return this.options;                                                                                               // 5183
};                                                                                                                     // 5184
                                                                                                                       // 5185
/**                                                                                                                    // 5186
 * Set internal options, overriding any default options                                                                // 5187
 *                                                                                                                     // 5188
 * @method setOptions                                                                                                  // 5189
 *                                                                                                                     // 5190
 * @param {Object} [options] overrides of default options                                                              // 5191
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5192
 */                                                                                                                    // 5193
PinchSync.prototype.setOptions = function setOptions(options) {                                                        // 5194
    return this._optionsManager.setOptions(options);                                                                   // 5195
};                                                                                                                     // 5196
                                                                                                                       // 5197
module.exports = PinchSync;                                                                                            // 5198
},{"../core/OptionsManager":10,"./TwoFingerSync":35}],30:[function(require,module,exports){                            // 5199
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5200
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5201
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5202
 *                                                                                                                     // 5203
 * Owner: mark@famo.us                                                                                                 // 5204
 * @license MPL 2.0                                                                                                    // 5205
 * @copyright Famous Industries, Inc. 2014                                                                             // 5206
 */                                                                                                                    // 5207
var TwoFingerSync = require('./TwoFingerSync');                                                                        // 5208
var OptionsManager = require('../core/OptionsManager');                                                                // 5209
                                                                                                                       // 5210
/**                                                                                                                    // 5211
 * Handles piped in two-finger touch events to increase or decrease scale via pinching / expanding.                    // 5212
 *   Emits 'start', 'update' and 'end' events an object with position, velocity, touch ids, and angle.                 // 5213
 *   Useful for determining a rotation factor from initial two-finger touch.                                           // 5214
 *                                                                                                                     // 5215
 * @class RotateSync                                                                                                   // 5216
 * @extends TwoFingerSync                                                                                              // 5217
 * @constructor                                                                                                        // 5218
 * @param {Object} options default options overrides                                                                   // 5219
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5220
 */                                                                                                                    // 5221
function RotateSync(options) {                                                                                         // 5222
    TwoFingerSync.call(this);                                                                                          // 5223
                                                                                                                       // 5224
    this.options = Object.create(RotateSync.DEFAULT_OPTIONS);                                                          // 5225
    this._optionsManager = new OptionsManager(this.options);                                                           // 5226
    if (options) this.setOptions(options);                                                                             // 5227
                                                                                                                       // 5228
    this._angle = 0;                                                                                                   // 5229
    this._previousAngle = 0;                                                                                           // 5230
}                                                                                                                      // 5231
                                                                                                                       // 5232
RotateSync.prototype = Object.create(TwoFingerSync.prototype);                                                         // 5233
RotateSync.prototype.constructor = RotateSync;                                                                         // 5234
                                                                                                                       // 5235
RotateSync.DEFAULT_OPTIONS = {                                                                                         // 5236
    scale : 1                                                                                                          // 5237
};                                                                                                                     // 5238
                                                                                                                       // 5239
RotateSync.prototype._startUpdate = function _startUpdate(event) {                                                     // 5240
    this._angle = 0;                                                                                                   // 5241
    this._previousAngle = TwoFingerSync.calculateAngle(this.posA, this.posB);                                          // 5242
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5243
    this._eventOutput.emit('start', {                                                                                  // 5244
        count: event.touches.length,                                                                                   // 5245
        angle: this._angle,                                                                                            // 5246
        center: center,                                                                                                // 5247
        touches: [this.touchAId, this.touchBId]                                                                        // 5248
    });                                                                                                                // 5249
};                                                                                                                     // 5250
                                                                                                                       // 5251
RotateSync.prototype._moveUpdate = function _moveUpdate(diffTime) {                                                    // 5252
    var scale = this.options.scale;                                                                                    // 5253
                                                                                                                       // 5254
    var currAngle = TwoFingerSync.calculateAngle(this.posA, this.posB);                                                // 5255
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5256
                                                                                                                       // 5257
    var diffTheta = scale * (currAngle - this._previousAngle);                                                         // 5258
    var velTheta = diffTheta / diffTime;                                                                               // 5259
                                                                                                                       // 5260
    this._angle += diffTheta;                                                                                          // 5261
                                                                                                                       // 5262
    this._eventOutput.emit('update', {                                                                                 // 5263
        delta : diffTheta,                                                                                             // 5264
        velocity: velTheta,                                                                                            // 5265
        angle: this._angle,                                                                                            // 5266
        center: center,                                                                                                // 5267
        touches: [this.touchAId, this.touchBId]                                                                        // 5268
    });                                                                                                                // 5269
                                                                                                                       // 5270
    this._previousAngle = currAngle;                                                                                   // 5271
};                                                                                                                     // 5272
                                                                                                                       // 5273
/**                                                                                                                    // 5274
 * Return entire options dictionary, including defaults.                                                               // 5275
 *                                                                                                                     // 5276
 * @method getOptions                                                                                                  // 5277
 * @return {Object} configuration options                                                                              // 5278
 */                                                                                                                    // 5279
RotateSync.prototype.getOptions = function getOptions() {                                                              // 5280
    return this.options;                                                                                               // 5281
};                                                                                                                     // 5282
                                                                                                                       // 5283
/**                                                                                                                    // 5284
 * Set internal options, overriding any default options                                                                // 5285
 *                                                                                                                     // 5286
 * @method setOptions                                                                                                  // 5287
 *                                                                                                                     // 5288
 * @param {Object} [options] overrides of default options                                                              // 5289
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5290
 */                                                                                                                    // 5291
RotateSync.prototype.setOptions = function setOptions(options) {                                                       // 5292
    return this._optionsManager.setOptions(options);                                                                   // 5293
};                                                                                                                     // 5294
                                                                                                                       // 5295
module.exports = RotateSync;                                                                                           // 5296
},{"../core/OptionsManager":10,"./TwoFingerSync":35}],31:[function(require,module,exports){                            // 5297
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5298
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5299
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5300
 *                                                                                                                     // 5301
 * Owner: mark@famo.us                                                                                                 // 5302
 * @license MPL 2.0                                                                                                    // 5303
 * @copyright Famous Industries, Inc. 2014                                                                             // 5304
 */                                                                                                                    // 5305
var TwoFingerSync = require('./TwoFingerSync');                                                                        // 5306
var OptionsManager = require('../core/OptionsManager');                                                                // 5307
                                                                                                                       // 5308
/**                                                                                                                    // 5309
 * Handles piped in two-finger touch events to increase or decrease scale via pinching / expanding.                    // 5310
 *   Emits 'start', 'update' and 'end' events an object with position, velocity, touch ids, distance, and scale factor.
 *   Useful for determining a scaling factor from initial two-finger touch.                                            // 5312
 *                                                                                                                     // 5313
 * @class ScaleSync                                                                                                    // 5314
 * @extends TwoFingerSync                                                                                              // 5315
 * @constructor                                                                                                        // 5316
 * @param {Object} options default options overrides                                                                   // 5317
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5318
 */                                                                                                                    // 5319
function ScaleSync(options) {                                                                                          // 5320
    TwoFingerSync.call(this);                                                                                          // 5321
                                                                                                                       // 5322
    this.options = Object.create(ScaleSync.DEFAULT_OPTIONS);                                                           // 5323
    this._optionsManager = new OptionsManager(this.options);                                                           // 5324
    if (options) this.setOptions(options);                                                                             // 5325
                                                                                                                       // 5326
    this._scaleFactor = 1;                                                                                             // 5327
    this._startDist = 0;                                                                                               // 5328
    this._eventInput.on('pipe', _reset.bind(this));                                                                    // 5329
}                                                                                                                      // 5330
                                                                                                                       // 5331
ScaleSync.prototype = Object.create(TwoFingerSync.prototype);                                                          // 5332
ScaleSync.prototype.constructor = ScaleSync;                                                                           // 5333
                                                                                                                       // 5334
ScaleSync.DEFAULT_OPTIONS = {                                                                                          // 5335
    scale : 1                                                                                                          // 5336
};                                                                                                                     // 5337
                                                                                                                       // 5338
function _reset() {                                                                                                    // 5339
    this.touchAId = undefined;                                                                                         // 5340
    this.touchBId = undefined;                                                                                         // 5341
}                                                                                                                      // 5342
                                                                                                                       // 5343
// handles initial touch of two fingers                                                                                // 5344
ScaleSync.prototype._startUpdate = function _startUpdate(event) {                                                      // 5345
    this._scaleFactor = 1;                                                                                             // 5346
    this._startDist = TwoFingerSync.calculateDistance(this.posA, this.posB);                                           // 5347
    this._eventOutput.emit('start', {                                                                                  // 5348
        count: event.touches.length,                                                                                   // 5349
        touches: [this.touchAId, this.touchBId],                                                                       // 5350
        distance: this._startDist,                                                                                     // 5351
        center: TwoFingerSync.calculateCenter(this.posA, this.posB)                                                    // 5352
    });                                                                                                                // 5353
};                                                                                                                     // 5354
                                                                                                                       // 5355
// handles movement of two fingers                                                                                     // 5356
ScaleSync.prototype._moveUpdate = function _moveUpdate(diffTime) {                                                     // 5357
    var scale = this.options.scale;                                                                                    // 5358
                                                                                                                       // 5359
    var currDist = TwoFingerSync.calculateDistance(this.posA, this.posB);                                              // 5360
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5361
                                                                                                                       // 5362
    var delta = (currDist - this._startDist) / this._startDist;                                                        // 5363
    var newScaleFactor = Math.max(1 + scale * delta, 0);                                                               // 5364
    var veloScale = (newScaleFactor - this._scaleFactor) / diffTime;                                                   // 5365
                                                                                                                       // 5366
    this._eventOutput.emit('update', {                                                                                 // 5367
        delta : delta,                                                                                                 // 5368
        scale: newScaleFactor,                                                                                         // 5369
        velocity: veloScale,                                                                                           // 5370
        distance: currDist,                                                                                            // 5371
        center : center,                                                                                               // 5372
        touches: [this.touchAId, this.touchBId]                                                                        // 5373
    });                                                                                                                // 5374
                                                                                                                       // 5375
    this._scaleFactor = newScaleFactor;                                                                                // 5376
};                                                                                                                     // 5377
                                                                                                                       // 5378
/**                                                                                                                    // 5379
 * Return entire options dictionary, including defaults.                                                               // 5380
 *                                                                                                                     // 5381
 * @method getOptions                                                                                                  // 5382
 * @return {Object} configuration options                                                                              // 5383
 */                                                                                                                    // 5384
ScaleSync.prototype.getOptions = function getOptions() {                                                               // 5385
    return this.options;                                                                                               // 5386
};                                                                                                                     // 5387
                                                                                                                       // 5388
/**                                                                                                                    // 5389
 * Set internal options, overriding any default options                                                                // 5390
 *                                                                                                                     // 5391
 * @method setOptions                                                                                                  // 5392
 *                                                                                                                     // 5393
 * @param {Object} [options] overrides of default options                                                              // 5394
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5395
 */                                                                                                                    // 5396
ScaleSync.prototype.setOptions = function setOptions(options) {                                                        // 5397
    return this._optionsManager.setOptions(options);                                                                   // 5398
};                                                                                                                     // 5399
                                                                                                                       // 5400
module.exports = ScaleSync;                                                                                            // 5401
},{"../core/OptionsManager":10,"./TwoFingerSync":35}],32:[function(require,module,exports){                            // 5402
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5403
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5404
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5405
 *                                                                                                                     // 5406
 * Owner: mark@famo.us                                                                                                 // 5407
 * @license MPL 2.0                                                                                                    // 5408
 * @copyright Famous Industries, Inc. 2014                                                                             // 5409
 */                                                                                                                    // 5410
var EventHandler = require('../core/EventHandler');                                                                    // 5411
var Engine = require('../core/Engine');                                                                                // 5412
var OptionsManager = require('../core/OptionsManager');                                                                // 5413
                                                                                                                       // 5414
/**                                                                                                                    // 5415
 * Handles piped in mousewheel events.                                                                                 // 5416
 *   Emits 'start', 'update', and 'end' events with payloads including:                                                // 5417
 *   delta: change since last position,                                                                                // 5418
 *   position: accumulated deltas,                                                                                     // 5419
 *   velocity: speed of change in pixels per ms,                                                                       // 5420
 *   slip: true (unused).                                                                                              // 5421
 *                                                                                                                     // 5422
 *   Can be used as delegate of GenericSync.                                                                           // 5423
 *                                                                                                                     // 5424
 * @class ScrollSync                                                                                                   // 5425
 * @constructor                                                                                                        // 5426
 * @param {Object} [options] overrides of default options                                                              // 5427
 * @param {Number} [options.direction] Pay attention to x changes (ScrollSync.DIRECTION_X),                            // 5428
 *   y changes (ScrollSync.DIRECTION_Y) or both (undefined)                                                            // 5429
 * @param {Number} [options.minimumEndSpeed] End speed calculation floors at this number, in pixels per ms             // 5430
 * @param {boolean} [options.rails] whether to snap position calculations to nearest axis                              // 5431
 * @param {Number | Array.Number} [options.scale] scale outputs in by scalar or pair of scalars                        // 5432
 * @param {Number} [options.stallTime] reset time for velocity calculation in ms                                       // 5433
 */                                                                                                                    // 5434
function ScrollSync(options) {                                                                                         // 5435
    this.options = Object.create(ScrollSync.DEFAULT_OPTIONS);                                                          // 5436
    this._optionsManager = new OptionsManager(this.options);                                                           // 5437
    if (options) this.setOptions(options);                                                                             // 5438
                                                                                                                       // 5439
    this._payload = {                                                                                                  // 5440
        delta    : null,                                                                                               // 5441
        position : null,                                                                                               // 5442
        velocity : null,                                                                                               // 5443
        slip     : true                                                                                                // 5444
    };                                                                                                                 // 5445
                                                                                                                       // 5446
    this._eventInput = new EventHandler();                                                                             // 5447
    this._eventOutput = new EventHandler();                                                                            // 5448
                                                                                                                       // 5449
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 5450
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 5451
                                                                                                                       // 5452
    this._position = (this.options.direction === undefined) ? [0,0] : 0;                                               // 5453
    this._prevTime = undefined;                                                                                        // 5454
    this._prevVel = undefined;                                                                                         // 5455
    this._eventInput.on('mousewheel', _handleMove.bind(this));                                                         // 5456
    this._eventInput.on('wheel', _handleMove.bind(this));                                                              // 5457
    this._inProgress = false;                                                                                          // 5458
    this._loopBound = false;                                                                                           // 5459
}                                                                                                                      // 5460
                                                                                                                       // 5461
ScrollSync.DEFAULT_OPTIONS = {                                                                                         // 5462
    direction: undefined,                                                                                              // 5463
    minimumEndSpeed: Infinity,                                                                                         // 5464
    rails: false,                                                                                                      // 5465
    scale: 1,                                                                                                          // 5466
    stallTime: 50,                                                                                                     // 5467
    lineHeight: 40,                                                                                                    // 5468
    preventDefault: true                                                                                               // 5469
};                                                                                                                     // 5470
                                                                                                                       // 5471
ScrollSync.DIRECTION_X = 0;                                                                                            // 5472
ScrollSync.DIRECTION_Y = 1;                                                                                            // 5473
                                                                                                                       // 5474
var MINIMUM_TICK_TIME = 8;                                                                                             // 5475
                                                                                                                       // 5476
var _now = Date.now;                                                                                                   // 5477
                                                                                                                       // 5478
function _newFrame() {                                                                                                 // 5479
    if (this._inProgress && (_now() - this._prevTime) > this.options.stallTime) {                                      // 5480
        this._inProgress = false;                                                                                      // 5481
                                                                                                                       // 5482
        var finalVel = (Math.abs(this._prevVel) >= this.options.minimumEndSpeed)                                       // 5483
            ? this._prevVel                                                                                            // 5484
            : 0;                                                                                                       // 5485
                                                                                                                       // 5486
        var payload = this._payload;                                                                                   // 5487
        payload.position = this._position;                                                                             // 5488
        payload.velocity = finalVel;                                                                                   // 5489
        payload.slip = true;                                                                                           // 5490
                                                                                                                       // 5491
        this._eventOutput.emit('end', payload);                                                                        // 5492
    }                                                                                                                  // 5493
}                                                                                                                      // 5494
                                                                                                                       // 5495
function _handleMove(event) {                                                                                          // 5496
    if (this.options.preventDefault) event.preventDefault();                                                           // 5497
                                                                                                                       // 5498
    if (!this._inProgress) {                                                                                           // 5499
        this._inProgress = true;                                                                                       // 5500
        this._position = (this.options.direction === undefined) ? [0,0] : 0;                                           // 5501
        payload = this._payload;                                                                                       // 5502
        payload.slip = true;                                                                                           // 5503
        payload.position = this._position;                                                                             // 5504
        payload.clientX = event.clientX;                                                                               // 5505
        payload.clientY = event.clientY;                                                                               // 5506
        payload.offsetX = event.offsetX;                                                                               // 5507
        payload.offsetY = event.offsetY;                                                                               // 5508
        this._eventOutput.emit('start', payload);                                                                      // 5509
        if (!this._loopBound) {                                                                                        // 5510
            Engine.on('prerender', _newFrame.bind(this));                                                              // 5511
            this._loopBound = true;                                                                                    // 5512
        }                                                                                                              // 5513
    }                                                                                                                  // 5514
                                                                                                                       // 5515
    var currTime = _now();                                                                                             // 5516
    var prevTime = this._prevTime || currTime;                                                                         // 5517
                                                                                                                       // 5518
    var diffX = (event.wheelDeltaX !== undefined) ? event.wheelDeltaX : -event.deltaX;                                 // 5519
    var diffY = (event.wheelDeltaY !== undefined) ? event.wheelDeltaY : -event.deltaY;                                 // 5520
                                                                                                                       // 5521
    if (event.deltaMode === 1) { // units in lines, not pixels                                                         // 5522
        diffX *= this.options.lineHeight;                                                                              // 5523
        diffY *= this.options.lineHeight;                                                                              // 5524
    }                                                                                                                  // 5525
                                                                                                                       // 5526
    if (this.options.rails) {                                                                                          // 5527
        if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;                                                              // 5528
        else diffX = 0;                                                                                                // 5529
    }                                                                                                                  // 5530
                                                                                                                       // 5531
    var diffTime = Math.max(currTime - prevTime, MINIMUM_TICK_TIME); // minimum tick time                              // 5532
                                                                                                                       // 5533
    var velX = diffX / diffTime;                                                                                       // 5534
    var velY = diffY / diffTime;                                                                                       // 5535
                                                                                                                       // 5536
    var scale = this.options.scale;                                                                                    // 5537
    var nextVel;                                                                                                       // 5538
    var nextDelta;                                                                                                     // 5539
                                                                                                                       // 5540
    if (this.options.direction === ScrollSync.DIRECTION_X) {                                                           // 5541
        nextDelta = scale * diffX;                                                                                     // 5542
        nextVel = scale * velX;                                                                                        // 5543
        this._position += nextDelta;                                                                                   // 5544
    }                                                                                                                  // 5545
    else if (this.options.direction === ScrollSync.DIRECTION_Y) {                                                      // 5546
        nextDelta = scale * diffY;                                                                                     // 5547
        nextVel = scale * velY;                                                                                        // 5548
        this._position += nextDelta;                                                                                   // 5549
    }                                                                                                                  // 5550
    else {                                                                                                             // 5551
        nextDelta = [scale * diffX, scale * diffY];                                                                    // 5552
        nextVel = [scale * velX, scale * velY];                                                                        // 5553
        this._position[0] += nextDelta[0];                                                                             // 5554
        this._position[1] += nextDelta[1];                                                                             // 5555
    }                                                                                                                  // 5556
                                                                                                                       // 5557
    var payload = this._payload;                                                                                       // 5558
    payload.delta    = nextDelta;                                                                                      // 5559
    payload.velocity = nextVel;                                                                                        // 5560
    payload.position = this._position;                                                                                 // 5561
    payload.slip     = true;                                                                                           // 5562
                                                                                                                       // 5563
    this._eventOutput.emit('update', payload);                                                                         // 5564
                                                                                                                       // 5565
    this._prevTime = currTime;                                                                                         // 5566
    this._prevVel = nextVel;                                                                                           // 5567
}                                                                                                                      // 5568
                                                                                                                       // 5569
/**                                                                                                                    // 5570
 * Return entire options dictionary, including defaults.                                                               // 5571
 *                                                                                                                     // 5572
 * @method getOptions                                                                                                  // 5573
 * @return {Object} configuration options                                                                              // 5574
 */                                                                                                                    // 5575
ScrollSync.prototype.getOptions = function getOptions() {                                                              // 5576
    return this.options;                                                                                               // 5577
};                                                                                                                     // 5578
                                                                                                                       // 5579
/**                                                                                                                    // 5580
 * Set internal options, overriding any default options                                                                // 5581
 *                                                                                                                     // 5582
 * @method setOptions                                                                                                  // 5583
 *                                                                                                                     // 5584
 * @param {Object} [options] overrides of default options                                                              // 5585
 * @param {Number} [options.minimimEndSpeed] If final velocity smaller than this, round down to 0.                     // 5586
 * @param {Number} [options.stallTime] ms of non-motion before 'end' emitted                                           // 5587
 * @param {Number} [options.rails] whether to constrain to nearest axis.                                               // 5588
 * @param {Number} [options.direction] ScrollSync.DIRECTION_X, DIRECTION_Y -                                           // 5589
 *    pay attention to one specific direction.                                                                         // 5590
 * @param {Number} [options.scale] constant factor to scale velocity output                                            // 5591
 */                                                                                                                    // 5592
ScrollSync.prototype.setOptions = function setOptions(options) {                                                       // 5593
    return this._optionsManager.setOptions(options);                                                                   // 5594
};                                                                                                                     // 5595
                                                                                                                       // 5596
module.exports = ScrollSync;                                                                                           // 5597
},{"../core/Engine":4,"../core/EventHandler":7,"../core/OptionsManager":10}],33:[function(require,module,exports){     // 5598
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5599
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5600
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5601
 *                                                                                                                     // 5602
 * Owner: mark@famo.us                                                                                                 // 5603
 * @license MPL 2.0                                                                                                    // 5604
 * @copyright Famous Industries, Inc. 2014                                                                             // 5605
 */                                                                                                                    // 5606
var TouchTracker = require('./TouchTracker');                                                                          // 5607
var EventHandler = require('../core/EventHandler');                                                                    // 5608
var OptionsManager = require('../core/OptionsManager');                                                                // 5609
                                                                                                                       // 5610
/**                                                                                                                    // 5611
 * Handles piped in touch events. Emits 'start', 'update', and 'events'                                                // 5612
 *   events with delta, position, velocity, acceleration, clientX, clientY, count, and touch id.                       // 5613
 *   Useful for dealing with inputs on touch devices. Designed to be used either as standalone, or                     // 5614
 *   included in a GenericSync.                                                                                        // 5615
 *                                                                                                                     // 5616
 * @class TouchSync                                                                                                    // 5617
 * @constructor                                                                                                        // 5618
 *                                                                                                                     // 5619
 * @example                                                                                                            // 5620
 *   var Surface = require('../core/Surface');                                                                         // 5621
 *   var TouchSync = require('../inputs/TouchSync');                                                                   // 5622
 *                                                                                                                     // 5623
 *   var surface = new Surface({ size: [100, 100] });                                                                  // 5624
 *   var touchSync = new TouchSync();                                                                                  // 5625
 *   surface.pipe(touchSync);                                                                                          // 5626
 *                                                                                                                     // 5627
 *   touchSync.on('start', function (e) { // react to start });                                                        // 5628
 *   touchSync.on('update', function (e) { // react to update });                                                      // 5629
 *   touchSync.on('end', function (e) { // react to end });*                                                           // 5630
 *                                                                                                                     // 5631
 * @param [options] {Object}             default options overrides                                                     // 5632
 * @param [options.direction] {Number}   read from a particular axis                                                   // 5633
 * @param [options.rails] {Boolean}      read from axis with greatest differential                                     // 5634
 * @param [options.velocitySampleLength] {Number}  Number of previous frames to check velocity against.                // 5635
 * @param [options.scale] {Number}       constant factor to scale velocity output                                      // 5636
 * @param [options.touchLimit] {Number}  touchLimit upper bound for emitting events based on number of touches         // 5637
 */                                                                                                                    // 5638
function TouchSync(options) {                                                                                          // 5639
    this.options =  Object.create(TouchSync.DEFAULT_OPTIONS);                                                          // 5640
    this._optionsManager = new OptionsManager(this.options);                                                           // 5641
    if (options) this.setOptions(options);                                                                             // 5642
                                                                                                                       // 5643
    this._eventOutput = new EventHandler();                                                                            // 5644
    this._touchTracker = new TouchTracker({                                                                            // 5645
        touchLimit: this.options.touchLimit                                                                            // 5646
    });                                                                                                                // 5647
                                                                                                                       // 5648
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 5649
    EventHandler.setInputHandler(this, this._touchTracker);                                                            // 5650
                                                                                                                       // 5651
    this._touchTracker.on('trackstart', _handleStart.bind(this));                                                      // 5652
    this._touchTracker.on('trackmove', _handleMove.bind(this));                                                        // 5653
    this._touchTracker.on('trackend', _handleEnd.bind(this));                                                          // 5654
                                                                                                                       // 5655
    this._payload = {                                                                                                  // 5656
        delta    : null,                                                                                               // 5657
        position : null,                                                                                               // 5658
        velocity : null,                                                                                               // 5659
        clientX  : undefined,                                                                                          // 5660
        clientY  : undefined,                                                                                          // 5661
        count    : 0,                                                                                                  // 5662
        touch    : undefined                                                                                           // 5663
    };                                                                                                                 // 5664
                                                                                                                       // 5665
    this._position = null; // to be deprecated                                                                         // 5666
}                                                                                                                      // 5667
                                                                                                                       // 5668
TouchSync.DEFAULT_OPTIONS = {                                                                                          // 5669
    direction: undefined,                                                                                              // 5670
    rails: false,                                                                                                      // 5671
    touchLimit: 1,                                                                                                     // 5672
    velocitySampleLength: 10,                                                                                          // 5673
    scale: 1                                                                                                           // 5674
};                                                                                                                     // 5675
                                                                                                                       // 5676
TouchSync.DIRECTION_X = 0;                                                                                             // 5677
TouchSync.DIRECTION_Y = 1;                                                                                             // 5678
                                                                                                                       // 5679
var MINIMUM_TICK_TIME = 8;                                                                                             // 5680
                                                                                                                       // 5681
/**                                                                                                                    // 5682
 *  Triggered by trackstart.                                                                                           // 5683
 *  @method _handleStart                                                                                               // 5684
 *  @private                                                                                                           // 5685
 */                                                                                                                    // 5686
function _handleStart(data) {                                                                                          // 5687
    var velocity;                                                                                                      // 5688
    var delta;                                                                                                         // 5689
    if (this.options.direction !== undefined){                                                                         // 5690
        this._position = 0;                                                                                            // 5691
        velocity = 0;                                                                                                  // 5692
        delta = 0;                                                                                                     // 5693
    }                                                                                                                  // 5694
    else {                                                                                                             // 5695
        this._position = [0, 0];                                                                                       // 5696
        velocity = [0, 0];                                                                                             // 5697
        delta = [0, 0];                                                                                                // 5698
    }                                                                                                                  // 5699
                                                                                                                       // 5700
    var payload = this._payload;                                                                                       // 5701
    payload.delta = delta;                                                                                             // 5702
    payload.position = this._position;                                                                                 // 5703
    payload.velocity = velocity;                                                                                       // 5704
    payload.clientX = data.x;                                                                                          // 5705
    payload.clientY = data.y;                                                                                          // 5706
    payload.count = data.count;                                                                                        // 5707
    payload.touch = data.identifier;                                                                                   // 5708
                                                                                                                       // 5709
    this._eventOutput.emit('start', payload);                                                                          // 5710
}                                                                                                                      // 5711
                                                                                                                       // 5712
/**                                                                                                                    // 5713
 *  Triggered by trackmove.                                                                                            // 5714
 *  @method _handleMove                                                                                                // 5715
 *  @private                                                                                                           // 5716
 */                                                                                                                    // 5717
function _handleMove(data) {                                                                                           // 5718
    var history = data.history;                                                                                        // 5719
                                                                                                                       // 5720
    var currHistory = history[history.length - 1];                                                                     // 5721
    var prevHistory = history[history.length - 2];                                                                     // 5722
                                                                                                                       // 5723
    var distantHistory = history[history.length - this.options.velocitySampleLength] ?                                 // 5724
      history[history.length - this.options.velocitySampleLength] :                                                    // 5725
      history[history.length - 2];                                                                                     // 5726
                                                                                                                       // 5727
    var distantTime = distantHistory.timestamp;                                                                        // 5728
    var currTime = currHistory.timestamp;                                                                              // 5729
                                                                                                                       // 5730
    var diffX = currHistory.x - prevHistory.x;                                                                         // 5731
    var diffY = currHistory.y - prevHistory.y;                                                                         // 5732
                                                                                                                       // 5733
    var velDiffX = currHistory.x - distantHistory.x;                                                                   // 5734
    var velDiffY = currHistory.y - distantHistory.y;                                                                   // 5735
                                                                                                                       // 5736
    if (this.options.rails) {                                                                                          // 5737
        if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;                                                              // 5738
        else diffX = 0;                                                                                                // 5739
                                                                                                                       // 5740
        if (Math.abs(velDiffX) > Math.abs(velDiffY)) velDiffY = 0;                                                     // 5741
        else velDiffX = 0;                                                                                             // 5742
    }                                                                                                                  // 5743
                                                                                                                       // 5744
    var diffTime = Math.max(currTime - distantTime, MINIMUM_TICK_TIME);                                                // 5745
                                                                                                                       // 5746
    var velX = velDiffX / diffTime;                                                                                    // 5747
    var velY = velDiffY / diffTime;                                                                                    // 5748
                                                                                                                       // 5749
    var scale = this.options.scale;                                                                                    // 5750
    var nextVel;                                                                                                       // 5751
    var nextDelta;                                                                                                     // 5752
                                                                                                                       // 5753
    if (this.options.direction === TouchSync.DIRECTION_X) {                                                            // 5754
        nextDelta = scale * diffX;                                                                                     // 5755
        nextVel = scale * velX;                                                                                        // 5756
        this._position += nextDelta;                                                                                   // 5757
    }                                                                                                                  // 5758
    else if (this.options.direction === TouchSync.DIRECTION_Y) {                                                       // 5759
        nextDelta = scale * diffY;                                                                                     // 5760
        nextVel = scale * velY;                                                                                        // 5761
        this._position += nextDelta;                                                                                   // 5762
    }                                                                                                                  // 5763
    else {                                                                                                             // 5764
        nextDelta = [scale * diffX, scale * diffY];                                                                    // 5765
        nextVel = [scale * velX, scale * velY];                                                                        // 5766
        this._position[0] += nextDelta[0];                                                                             // 5767
        this._position[1] += nextDelta[1];                                                                             // 5768
    }                                                                                                                  // 5769
                                                                                                                       // 5770
    var payload = this._payload;                                                                                       // 5771
    payload.delta    = nextDelta;                                                                                      // 5772
    payload.velocity = nextVel;                                                                                        // 5773
    payload.position = this._position;                                                                                 // 5774
    payload.clientX  = data.x;                                                                                         // 5775
    payload.clientY  = data.y;                                                                                         // 5776
    payload.count    = data.count;                                                                                     // 5777
    payload.touch    = data.identifier;                                                                                // 5778
                                                                                                                       // 5779
    this._eventOutput.emit('update', payload);                                                                         // 5780
}                                                                                                                      // 5781
                                                                                                                       // 5782
/**                                                                                                                    // 5783
 *  Triggered by trackend.                                                                                             // 5784
 *  @method _handleEnd                                                                                                 // 5785
 *  @private                                                                                                           // 5786
 */                                                                                                                    // 5787
function _handleEnd(data) {                                                                                            // 5788
    this._payload.count = data.count;                                                                                  // 5789
    this._eventOutput.emit('end', this._payload);                                                                      // 5790
}                                                                                                                      // 5791
                                                                                                                       // 5792
/**                                                                                                                    // 5793
 * Set internal options, overriding any default options                                                                // 5794
 *                                                                                                                     // 5795
 * @method setOptions                                                                                                  // 5796
 *                                                                                                                     // 5797
 * @param [options] {Object}             default options overrides                                                     // 5798
 * @param [options.direction] {Number}   read from a particular axis                                                   // 5799
 * @param [options.rails] {Boolean}      read from axis with greatest differential                                     // 5800
 * @param [options.scale] {Number}       constant factor to scale velocity output                                      // 5801
 */                                                                                                                    // 5802
TouchSync.prototype.setOptions = function setOptions(options) {                                                        // 5803
    return this._optionsManager.setOptions(options);                                                                   // 5804
};                                                                                                                     // 5805
                                                                                                                       // 5806
/**                                                                                                                    // 5807
 * Return entire options dictionary, including defaults.                                                               // 5808
 *                                                                                                                     // 5809
 * @method getOptions                                                                                                  // 5810
 * @return {Object} configuration options                                                                              // 5811
 */                                                                                                                    // 5812
TouchSync.prototype.getOptions = function getOptions() {                                                               // 5813
    return this.options;                                                                                               // 5814
};                                                                                                                     // 5815
                                                                                                                       // 5816
module.exports = TouchSync;                                                                                            // 5817
},{"../core/EventHandler":7,"../core/OptionsManager":10,"./TouchTracker":34}],34:[function(require,module,exports){    // 5818
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5819
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5820
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5821
 *                                                                                                                     // 5822
 * Owner: mark@famo.us                                                                                                 // 5823
 * @license MPL 2.0                                                                                                    // 5824
 * @copyright Famous Industries, Inc. 2014                                                                             // 5825
 */                                                                                                                    // 5826
var EventHandler = require('../core/EventHandler');                                                                    // 5827
                                                                                                                       // 5828
var _now = Date.now;                                                                                                   // 5829
                                                                                                                       // 5830
function _timestampTouch(touch, event, history) {                                                                      // 5831
    return {                                                                                                           // 5832
        x: touch.clientX,                                                                                              // 5833
        y: touch.clientY,                                                                                              // 5834
        identifier : touch.identifier,                                                                                 // 5835
        origin: event.origin,                                                                                          // 5836
        timestamp: _now(),                                                                                             // 5837
        count: event.touches.length,                                                                                   // 5838
        history: history                                                                                               // 5839
    };                                                                                                                 // 5840
}                                                                                                                      // 5841
                                                                                                                       // 5842
function _handleStart(event) {                                                                                         // 5843
    if (event.touches.length > this.touchLimit) return;                                                                // 5844
    this.isTouched = true;                                                                                             // 5845
                                                                                                                       // 5846
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 5847
        var touch = event.changedTouches[i];                                                                           // 5848
        var data = _timestampTouch(touch, event, null);                                                                // 5849
        this.eventOutput.emit('trackstart', data);                                                                     // 5850
        if (!this.selective && !this.touchHistory[touch.identifier]) this.track(data);                                 // 5851
    }                                                                                                                  // 5852
}                                                                                                                      // 5853
                                                                                                                       // 5854
function _handleMove(event) {                                                                                          // 5855
    if (event.touches.length > this.touchLimit) return;                                                                // 5856
                                                                                                                       // 5857
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 5858
        var touch = event.changedTouches[i];                                                                           // 5859
        var history = this.touchHistory[touch.identifier];                                                             // 5860
        if (history) {                                                                                                 // 5861
            var data = _timestampTouch(touch, event, history);                                                         // 5862
            this.touchHistory[touch.identifier].push(data);                                                            // 5863
            this.eventOutput.emit('trackmove', data);                                                                  // 5864
        }                                                                                                              // 5865
    }                                                                                                                  // 5866
}                                                                                                                      // 5867
                                                                                                                       // 5868
function _handleEnd(event) {                                                                                           // 5869
    if (!this.isTouched) return;                                                                                       // 5870
                                                                                                                       // 5871
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 5872
        var touch = event.changedTouches[i];                                                                           // 5873
        var history = this.touchHistory[touch.identifier];                                                             // 5874
        if (history) {                                                                                                 // 5875
            var data = _timestampTouch(touch, event, history);                                                         // 5876
            this.eventOutput.emit('trackend', data);                                                                   // 5877
            delete this.touchHistory[touch.identifier];                                                                // 5878
        }                                                                                                              // 5879
    }                                                                                                                  // 5880
                                                                                                                       // 5881
    this.isTouched = false;                                                                                            // 5882
}                                                                                                                      // 5883
                                                                                                                       // 5884
function _handleUnpipe() {                                                                                             // 5885
    for (var i in this.touchHistory) {                                                                                 // 5886
        var history = this.touchHistory[i];                                                                            // 5887
        this.eventOutput.emit('trackend', {                                                                            // 5888
            touch: history[history.length - 1].touch,                                                                  // 5889
            timestamp: Date.now(),                                                                                     // 5890
            count: 0,                                                                                                  // 5891
            history: history                                                                                           // 5892
        });                                                                                                            // 5893
        delete this.touchHistory[i];                                                                                   // 5894
    }                                                                                                                  // 5895
}                                                                                                                      // 5896
                                                                                                                       // 5897
/**                                                                                                                    // 5898
 * Helper to TouchSync – tracks piped in touch events, organizes touch                                                 // 5899
 *   events by ID, and emits track events back to TouchSync.                                                           // 5900
 *   Emits 'trackstart', 'trackmove', and 'trackend' events upstream.                                                  // 5901
 *                                                                                                                     // 5902
 * @class TouchTracker                                                                                                 // 5903
 * @constructor                                                                                                        // 5904
 * @param {Object} options default options overrides                                                                   // 5905
 * @param [options.selective] {Boolean} selective if false, saves state for each touch                                 // 5906
 * @param [options.touchLimit] {Number} touchLimit upper bound for emitting events based on number of touches          // 5907
 */                                                                                                                    // 5908
function TouchTracker(options) {                                                                                       // 5909
    this.selective = options.selective;                                                                                // 5910
    this.touchLimit = options.touchLimit || 1;                                                                         // 5911
                                                                                                                       // 5912
    this.touchHistory = {};                                                                                            // 5913
                                                                                                                       // 5914
    this.eventInput = new EventHandler();                                                                              // 5915
    this.eventOutput = new EventHandler();                                                                             // 5916
                                                                                                                       // 5917
    EventHandler.setInputHandler(this, this.eventInput);                                                               // 5918
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 5919
                                                                                                                       // 5920
    this.eventInput.on('touchstart', _handleStart.bind(this));                                                         // 5921
    this.eventInput.on('touchmove', _handleMove.bind(this));                                                           // 5922
    this.eventInput.on('touchend', _handleEnd.bind(this));                                                             // 5923
    this.eventInput.on('touchcancel', _handleEnd.bind(this));                                                          // 5924
    this.eventInput.on('unpipe', _handleUnpipe.bind(this));                                                            // 5925
                                                                                                                       // 5926
    this.isTouched = false;                                                                                            // 5927
}                                                                                                                      // 5928
                                                                                                                       // 5929
/**                                                                                                                    // 5930
 * Record touch data, if selective is false.                                                                           // 5931
 * @private                                                                                                            // 5932
 * @method track                                                                                                       // 5933
 * @param {Object} data touch data                                                                                     // 5934
 */                                                                                                                    // 5935
TouchTracker.prototype.track = function track(data) {                                                                  // 5936
    this.touchHistory[data.identifier] = [data];                                                                       // 5937
};                                                                                                                     // 5938
                                                                                                                       // 5939
module.exports = TouchTracker;                                                                                         // 5940
},{"../core/EventHandler":7}],35:[function(require,module,exports){                                                    // 5941
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5942
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5943
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5944
 *                                                                                                                     // 5945
 * Owner: mark@famo.us                                                                                                 // 5946
 * @license MPL 2.0                                                                                                    // 5947
 * @copyright Famous Industries, Inc. 2014                                                                             // 5948
 */                                                                                                                    // 5949
var EventHandler = require('../core/EventHandler');                                                                    // 5950
                                                                                                                       // 5951
/**                                                                                                                    // 5952
 * Helper to PinchSync, RotateSync, and ScaleSync.  Generalized handling of                                            // 5953
 *   two-finger touch events.                                                                                          // 5954
 *   This class is meant to be overridden and not used directly.                                                       // 5955
 *                                                                                                                     // 5956
 * @class TwoFingerSync                                                                                                // 5957
 * @constructor                                                                                                        // 5958
 */                                                                                                                    // 5959
function TwoFingerSync() {                                                                                             // 5960
    this._eventInput = new EventHandler();                                                                             // 5961
    this._eventOutput = new EventHandler();                                                                            // 5962
                                                                                                                       // 5963
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 5964
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 5965
                                                                                                                       // 5966
    this.touchAEnabled = false;                                                                                        // 5967
    this.touchAId = 0;                                                                                                 // 5968
    this.posA = null;                                                                                                  // 5969
    this.timestampA = 0;                                                                                               // 5970
    this.touchBEnabled = false;                                                                                        // 5971
    this.touchBId = 0;                                                                                                 // 5972
    this.posB = null;                                                                                                  // 5973
    this.timestampB = 0;                                                                                               // 5974
                                                                                                                       // 5975
    this._eventInput.on('touchstart', this.handleStart.bind(this));                                                    // 5976
    this._eventInput.on('touchmove', this.handleMove.bind(this));                                                      // 5977
    this._eventInput.on('touchend', this.handleEnd.bind(this));                                                        // 5978
    this._eventInput.on('touchcancel', this.handleEnd.bind(this));                                                     // 5979
}                                                                                                                      // 5980
                                                                                                                       // 5981
TwoFingerSync.calculateAngle = function(posA, posB) {                                                                  // 5982
    var diffX = posB[0] - posA[0];                                                                                     // 5983
    var diffY = posB[1] - posA[1];                                                                                     // 5984
    return Math.atan2(diffY, diffX);                                                                                   // 5985
};                                                                                                                     // 5986
                                                                                                                       // 5987
TwoFingerSync.calculateDistance = function(posA, posB) {                                                               // 5988
    var diffX = posB[0] - posA[0];                                                                                     // 5989
    var diffY = posB[1] - posA[1];                                                                                     // 5990
    return Math.sqrt(diffX * diffX + diffY * diffY);                                                                   // 5991
};                                                                                                                     // 5992
                                                                                                                       // 5993
TwoFingerSync.calculateCenter = function(posA, posB) {                                                                 // 5994
    return [(posA[0] + posB[0]) / 2.0, (posA[1] + posB[1]) / 2.0];                                                     // 5995
};                                                                                                                     // 5996
                                                                                                                       // 5997
var _now = Date.now;                                                                                                   // 5998
                                                                                                                       // 5999
// private                                                                                                             // 6000
TwoFingerSync.prototype.handleStart = function handleStart(event) {                                                    // 6001
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 6002
        var touch = event.changedTouches[i];                                                                           // 6003
        if (!this.touchAEnabled) {                                                                                     // 6004
            this.touchAId = touch.identifier;                                                                          // 6005
            this.touchAEnabled = true;                                                                                 // 6006
            this.posA = [touch.pageX, touch.pageY];                                                                    // 6007
            this.timestampA = _now();                                                                                  // 6008
        }                                                                                                              // 6009
        else if (!this.touchBEnabled) {                                                                                // 6010
            this.touchBId = touch.identifier;                                                                          // 6011
            this.touchBEnabled = true;                                                                                 // 6012
            this.posB = [touch.pageX, touch.pageY];                                                                    // 6013
            this.timestampB = _now();                                                                                  // 6014
            this._startUpdate(event);                                                                                  // 6015
        }                                                                                                              // 6016
    }                                                                                                                  // 6017
};                                                                                                                     // 6018
                                                                                                                       // 6019
// private                                                                                                             // 6020
TwoFingerSync.prototype.handleMove = function handleMove(event) {                                                      // 6021
    if (!(this.touchAEnabled && this.touchBEnabled)) return;                                                           // 6022
    var prevTimeA = this.timestampA;                                                                                   // 6023
    var prevTimeB = this.timestampB;                                                                                   // 6024
    var diffTime;                                                                                                      // 6025
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 6026
        var touch = event.changedTouches[i];                                                                           // 6027
        if (touch.identifier === this.touchAId) {                                                                      // 6028
            this.posA = [touch.pageX, touch.pageY];                                                                    // 6029
            this.timestampA = _now();                                                                                  // 6030
            diffTime = this.timestampA - prevTimeA;                                                                    // 6031
        }                                                                                                              // 6032
        else if (touch.identifier === this.touchBId) {                                                                 // 6033
            this.posB = [touch.pageX, touch.pageY];                                                                    // 6034
            this.timestampB = _now();                                                                                  // 6035
            diffTime = this.timestampB - prevTimeB;                                                                    // 6036
        }                                                                                                              // 6037
    }                                                                                                                  // 6038
    if (diffTime) this._moveUpdate(diffTime);                                                                          // 6039
};                                                                                                                     // 6040
                                                                                                                       // 6041
// private                                                                                                             // 6042
TwoFingerSync.prototype.handleEnd = function handleEnd(event) {                                                        // 6043
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 6044
        var touch = event.changedTouches[i];                                                                           // 6045
        if (touch.identifier === this.touchAId || touch.identifier === this.touchBId) {                                // 6046
            if (this.touchAEnabled && this.touchBEnabled) {                                                            // 6047
                this._eventOutput.emit('end', {                                                                        // 6048
                    touches : [this.touchAId, this.touchBId],                                                          // 6049
                    angle   : this._angle                                                                              // 6050
                });                                                                                                    // 6051
            }                                                                                                          // 6052
            this.touchAEnabled = false;                                                                                // 6053
            this.touchAId = 0;                                                                                         // 6054
            this.touchBEnabled = false;                                                                                // 6055
            this.touchBId = 0;                                                                                         // 6056
        }                                                                                                              // 6057
    }                                                                                                                  // 6058
};                                                                                                                     // 6059
                                                                                                                       // 6060
module.exports = TwoFingerSync;                                                                                        // 6061
},{"../core/EventHandler":7}],36:[function(require,module,exports){                                                    // 6062
module.exports = {                                                                                                     // 6063
  Accumulator: require('./Accumulator'),                                                                               // 6064
  DesktopEmulationMode: require('./DesktopEmulationMode'),                                                             // 6065
  FastClick: require('./FastClick'),                                                                                   // 6066
  GenericSync: require('./GenericSync'),                                                                               // 6067
  MouseSync: require('./MouseSync'),                                                                                   // 6068
  PinchSync: require('./PinchSync'),                                                                                   // 6069
  RotateSync: require('./RotateSync'),                                                                                 // 6070
  ScaleSync: require('./ScaleSync'),                                                                                   // 6071
  ScrollSync: require('./ScrollSync'),                                                                                 // 6072
  TouchSync: require('./TouchSync'),                                                                                   // 6073
  TouchTracker: require('./TouchTracker'),                                                                             // 6074
  TwoFingerSync: require('./TwoFingerSync')                                                                            // 6075
};                                                                                                                     // 6076
                                                                                                                       // 6077
},{"./Accumulator":24,"./DesktopEmulationMode":25,"./FastClick":26,"./GenericSync":27,"./MouseSync":28,"./PinchSync":29,"./RotateSync":30,"./ScaleSync":31,"./ScrollSync":32,"./TouchSync":33,"./TouchTracker":34,"./TwoFingerSync":35}],37:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6079
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6080
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6081
 *                                                                                                                     // 6082
 * Owner: david@famo.us                                                                                                // 6083
 * @license MPL 2.0                                                                                                    // 6084
 * @copyright Famous Industries, Inc. 2014                                                                             // 6085
 */                                                                                                                    // 6086
                                                                                                                       // 6087
var Vector = require('./Vector');                                                                                      // 6088
                                                                                                                       // 6089
/**                                                                                                                    // 6090
 * A library for using a 3x3 numerical matrix, represented as a two-level array.                                       // 6091
 *                                                                                                                     // 6092
 * @class Matrix                                                                                                       // 6093
 * @constructor                                                                                                        // 6094
 *                                                                                                                     // 6095
 * @param {Array.Array} values array of rows                                                                           // 6096
 */                                                                                                                    // 6097
function Matrix(values) {                                                                                              // 6098
    this.values = values ||                                                                                            // 6099
        [                                                                                                              // 6100
            [1,0,0],                                                                                                   // 6101
            [0,1,0],                                                                                                   // 6102
            [0,0,1]                                                                                                    // 6103
        ];                                                                                                             // 6104
                                                                                                                       // 6105
    return this;                                                                                                       // 6106
}                                                                                                                      // 6107
                                                                                                                       // 6108
var _register = new Matrix();                                                                                          // 6109
var _vectorRegister = new Vector();                                                                                    // 6110
                                                                                                                       // 6111
/**                                                                                                                    // 6112
 * Return the values in the matrix as an array of numerical row arrays                                                 // 6113
 *                                                                                                                     // 6114
 * @method get                                                                                                         // 6115
 *                                                                                                                     // 6116
 * @return {Array.array} matrix values as array of rows.                                                               // 6117
 */                                                                                                                    // 6118
Matrix.prototype.get = function get() {                                                                                // 6119
    return this.values;                                                                                                // 6120
};                                                                                                                     // 6121
                                                                                                                       // 6122
/**                                                                                                                    // 6123
 * Set the nested array of rows in the matrix.                                                                         // 6124
 *                                                                                                                     // 6125
 * @method set                                                                                                         // 6126
 *                                                                                                                     // 6127
 * @param {Array.array} values matrix values as array of rows.                                                         // 6128
 */                                                                                                                    // 6129
Matrix.prototype.set = function set(values) {                                                                          // 6130
    this.values = values;                                                                                              // 6131
};                                                                                                                     // 6132
                                                                                                                       // 6133
/**                                                                                                                    // 6134
 * Take this matrix as A, input vector V as a column vector, and return matrix product (A)(V).                         // 6135
 *   Note: This sets the internal vector register.  Current handles to the vector register                             // 6136
 *   will see values changed.                                                                                          // 6137
 *                                                                                                                     // 6138
 * @method vectorMultiply                                                                                              // 6139
 *                                                                                                                     // 6140
 * @param {Vector} v input vector V                                                                                    // 6141
 * @return {Vector} result of multiplication, as a handle to the internal vector register                              // 6142
 */                                                                                                                    // 6143
Matrix.prototype.vectorMultiply = function vectorMultiply(v) {                                                         // 6144
    var M = this.get();                                                                                                // 6145
    var v0 = v.x;                                                                                                      // 6146
    var v1 = v.y;                                                                                                      // 6147
    var v2 = v.z;                                                                                                      // 6148
                                                                                                                       // 6149
    var M0 = M[0];                                                                                                     // 6150
    var M1 = M[1];                                                                                                     // 6151
    var M2 = M[2];                                                                                                     // 6152
                                                                                                                       // 6153
    var M00 = M0[0];                                                                                                   // 6154
    var M01 = M0[1];                                                                                                   // 6155
    var M02 = M0[2];                                                                                                   // 6156
    var M10 = M1[0];                                                                                                   // 6157
    var M11 = M1[1];                                                                                                   // 6158
    var M12 = M1[2];                                                                                                   // 6159
    var M20 = M2[0];                                                                                                   // 6160
    var M21 = M2[1];                                                                                                   // 6161
    var M22 = M2[2];                                                                                                   // 6162
                                                                                                                       // 6163
    return _vectorRegister.setXYZ(                                                                                     // 6164
        M00*v0 + M01*v1 + M02*v2,                                                                                      // 6165
        M10*v0 + M11*v1 + M12*v2,                                                                                      // 6166
        M20*v0 + M21*v1 + M22*v2                                                                                       // 6167
    );                                                                                                                 // 6168
};                                                                                                                     // 6169
                                                                                                                       // 6170
/**                                                                                                                    // 6171
 * Multiply the provided matrix M2 with this matrix.  Result is (this) * (M2).                                         // 6172
 *   Note: This sets the internal matrix register.  Current handles to the register                                    // 6173
 *   will see values changed.                                                                                          // 6174
 *                                                                                                                     // 6175
 * @method multiply                                                                                                    // 6176
 *                                                                                                                     // 6177
 * @param {Matrix} M2 input matrix to multiply on the right                                                            // 6178
 * @return {Matrix} result of multiplication, as a handle to the internal register                                     // 6179
 */                                                                                                                    // 6180
Matrix.prototype.multiply = function multiply(M2) {                                                                    // 6181
    var M1 = this.get();                                                                                               // 6182
    var result = [[]];                                                                                                 // 6183
    for (var i = 0; i < 3; i++) {                                                                                      // 6184
        result[i] = [];                                                                                                // 6185
        for (var j = 0; j < 3; j++) {                                                                                  // 6186
            var sum = 0;                                                                                               // 6187
            for (var k = 0; k < 3; k++) {                                                                              // 6188
                sum += M1[i][k] * M2[k][j];                                                                            // 6189
            }                                                                                                          // 6190
            result[i][j] = sum;                                                                                        // 6191
        }                                                                                                              // 6192
    }                                                                                                                  // 6193
    return _register.set(result);                                                                                      // 6194
};                                                                                                                     // 6195
                                                                                                                       // 6196
/**                                                                                                                    // 6197
 * Creates a Matrix which is the transpose of this matrix.                                                             // 6198
 *   Note: This sets the internal matrix register.  Current handles to the register                                    // 6199
 *   will see values changed.                                                                                          // 6200
 *                                                                                                                     // 6201
 * @method transpose                                                                                                   // 6202
 *                                                                                                                     // 6203
 * @return {Matrix} result of transpose, as a handle to the internal register                                          // 6204
 */                                                                                                                    // 6205
Matrix.prototype.transpose = function transpose() {                                                                    // 6206
    var result = [];                                                                                                   // 6207
    var M = this.get();                                                                                                // 6208
    for (var row = 0; row < 3; row++) {                                                                                // 6209
        for (var col = 0; col < 3; col++) {                                                                            // 6210
            result[row][col] = M[col][row];                                                                            // 6211
        }                                                                                                              // 6212
    }                                                                                                                  // 6213
    return _register.set(result);                                                                                      // 6214
};                                                                                                                     // 6215
                                                                                                                       // 6216
/**                                                                                                                    // 6217
 * Clones the matrix                                                                                                   // 6218
 *                                                                                                                     // 6219
 * @method clone                                                                                                       // 6220
 * @return {Matrix} New copy of the original matrix                                                                    // 6221
 */                                                                                                                    // 6222
Matrix.prototype.clone = function clone() {                                                                            // 6223
    var values = this.get();                                                                                           // 6224
    var M = [];                                                                                                        // 6225
    for (var row = 0; row < 3; row++)                                                                                  // 6226
        M[row] = values[row].slice();                                                                                  // 6227
    return new Matrix(M);                                                                                              // 6228
};                                                                                                                     // 6229
                                                                                                                       // 6230
module.exports = Matrix;                                                                                               // 6231
},{"./Vector":41}],38:[function(require,module,exports){                                                               // 6232
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6233
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6234
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6235
 *                                                                                                                     // 6236
 * Owner: david@famo.us                                                                                                // 6237
 * @license MPL 2.0                                                                                                    // 6238
 * @copyright Famous Industries, Inc. 2014                                                                             // 6239
 */                                                                                                                    // 6240
                                                                                                                       // 6241
var Matrix = require('./Matrix');                                                                                      // 6242
                                                                                                                       // 6243
/**                                                                                                                    // 6244
 * @class Quaternion                                                                                                   // 6245
 * @constructor                                                                                                        // 6246
 *                                                                                                                     // 6247
 * @param {Number} w                                                                                                   // 6248
 * @param {Number} x                                                                                                   // 6249
 * @param {Number} y                                                                                                   // 6250
 * @param {Number} z                                                                                                   // 6251
 */                                                                                                                    // 6252
function Quaternion(w,x,y,z) {                                                                                         // 6253
    if (arguments.length === 1) this.set(w);                                                                           // 6254
    else {                                                                                                             // 6255
        this.w = (w !== undefined) ? w : 1;  //Angle                                                                   // 6256
        this.x = (x !== undefined) ? x : 0;  //Axis.x                                                                  // 6257
        this.y = (y !== undefined) ? y : 0;  //Axis.y                                                                  // 6258
        this.z = (z !== undefined) ? z : 0;  //Axis.z                                                                  // 6259
    }                                                                                                                  // 6260
    return this;                                                                                                       // 6261
}                                                                                                                      // 6262
                                                                                                                       // 6263
var register = new Quaternion(1,0,0,0);                                                                                // 6264
                                                                                                                       // 6265
/**                                                                                                                    // 6266
 * Doc: TODO                                                                                                           // 6267
 * @method add                                                                                                         // 6268
 * @param {Quaternion} q                                                                                               // 6269
 * @return {Quaternion}                                                                                                // 6270
 */                                                                                                                    // 6271
Quaternion.prototype.add = function add(q) {                                                                           // 6272
    return register.setWXYZ(                                                                                           // 6273
        this.w + q.w,                                                                                                  // 6274
        this.x + q.x,                                                                                                  // 6275
        this.y + q.y,                                                                                                  // 6276
        this.z + q.z                                                                                                   // 6277
    );                                                                                                                 // 6278
};                                                                                                                     // 6279
                                                                                                                       // 6280
/*                                                                                                                     // 6281
 * Docs: TODO                                                                                                          // 6282
 *                                                                                                                     // 6283
 * @method sub                                                                                                         // 6284
 * @param {Quaternion} q                                                                                               // 6285
 * @return {Quaternion}                                                                                                // 6286
 */                                                                                                                    // 6287
Quaternion.prototype.sub = function sub(q) {                                                                           // 6288
    return register.setWXYZ(                                                                                           // 6289
        this.w - q.w,                                                                                                  // 6290
        this.x - q.x,                                                                                                  // 6291
        this.y - q.y,                                                                                                  // 6292
        this.z - q.z                                                                                                   // 6293
    );                                                                                                                 // 6294
};                                                                                                                     // 6295
                                                                                                                       // 6296
/**                                                                                                                    // 6297
 * Doc: TODO                                                                                                           // 6298
 *                                                                                                                     // 6299
 * @method scalarDivide                                                                                                // 6300
 * @param {Number} s                                                                                                   // 6301
 * @return {Quaternion}                                                                                                // 6302
 */                                                                                                                    // 6303
Quaternion.prototype.scalarDivide = function scalarDivide(s) {                                                         // 6304
    return this.scalarMultiply(1/s);                                                                                   // 6305
};                                                                                                                     // 6306
                                                                                                                       // 6307
/*                                                                                                                     // 6308
 * Docs: TODO                                                                                                          // 6309
 *                                                                                                                     // 6310
 * @method scalarMultiply                                                                                              // 6311
 * @param {Number} s                                                                                                   // 6312
 * @return {Quaternion}                                                                                                // 6313
 */                                                                                                                    // 6314
Quaternion.prototype.scalarMultiply = function scalarMultiply(s) {                                                     // 6315
    return register.setWXYZ(                                                                                           // 6316
        this.w * s,                                                                                                    // 6317
        this.x * s,                                                                                                    // 6318
        this.y * s,                                                                                                    // 6319
        this.z * s                                                                                                     // 6320
    );                                                                                                                 // 6321
};                                                                                                                     // 6322
                                                                                                                       // 6323
/*                                                                                                                     // 6324
 * Docs: TODO                                                                                                          // 6325
 *                                                                                                                     // 6326
 * @method multiply                                                                                                    // 6327
 * @param {Quaternion} q                                                                                               // 6328
 * @return {Quaternion}                                                                                                // 6329
 */                                                                                                                    // 6330
Quaternion.prototype.multiply = function multiply(q) {                                                                 // 6331
    //left-handed coordinate system multiplication                                                                     // 6332
    var x1 = this.x;                                                                                                   // 6333
    var y1 = this.y;                                                                                                   // 6334
    var z1 = this.z;                                                                                                   // 6335
    var w1 = this.w;                                                                                                   // 6336
    var x2 = q.x;                                                                                                      // 6337
    var y2 = q.y;                                                                                                      // 6338
    var z2 = q.z;                                                                                                      // 6339
    var w2 = q.w || 0;                                                                                                 // 6340
                                                                                                                       // 6341
    return register.setWXYZ(                                                                                           // 6342
        w1*w2 - x1*x2 - y1*y2 - z1*z2,                                                                                 // 6343
        x1*w2 + x2*w1 + y2*z1 - y1*z2,                                                                                 // 6344
        y1*w2 + y2*w1 + x1*z2 - x2*z1,                                                                                 // 6345
        z1*w2 + z2*w1 + x2*y1 - x1*y2                                                                                  // 6346
    );                                                                                                                 // 6347
};                                                                                                                     // 6348
                                                                                                                       // 6349
var conj = new Quaternion(1,0,0,0);                                                                                    // 6350
                                                                                                                       // 6351
/*                                                                                                                     // 6352
 * Docs: TODO                                                                                                          // 6353
 *                                                                                                                     // 6354
 * @method rotateVector                                                                                                // 6355
 * @param {Vector} v                                                                                                   // 6356
 * @return {Quaternion}                                                                                                // 6357
 */                                                                                                                    // 6358
Quaternion.prototype.rotateVector = function rotateVector(v) {                                                         // 6359
    conj.set(this.conj());                                                                                             // 6360
    return register.set(this.multiply(v).multiply(conj));                                                              // 6361
};                                                                                                                     // 6362
                                                                                                                       // 6363
/*                                                                                                                     // 6364
 * Docs: TODO                                                                                                          // 6365
 *                                                                                                                     // 6366
 * @method inverse                                                                                                     // 6367
 * @return {Quaternion}                                                                                                // 6368
 */                                                                                                                    // 6369
Quaternion.prototype.inverse = function inverse() {                                                                    // 6370
    return register.set(this.conj().scalarDivide(this.normSquared()));                                                 // 6371
};                                                                                                                     // 6372
                                                                                                                       // 6373
/*                                                                                                                     // 6374
 * Docs: TODO                                                                                                          // 6375
 *                                                                                                                     // 6376
 * @method negate                                                                                                      // 6377
 * @return {Quaternion}                                                                                                // 6378
 */                                                                                                                    // 6379
Quaternion.prototype.negate = function negate() {                                                                      // 6380
    return this.scalarMultiply(-1);                                                                                    // 6381
};                                                                                                                     // 6382
                                                                                                                       // 6383
/*                                                                                                                     // 6384
 * Docs: TODO                                                                                                          // 6385
 *                                                                                                                     // 6386
 * @method conj                                                                                                        // 6387
 * @return {Quaternion}                                                                                                // 6388
 */                                                                                                                    // 6389
Quaternion.prototype.conj = function conj() {                                                                          // 6390
    return register.setWXYZ(                                                                                           // 6391
         this.w,                                                                                                       // 6392
        -this.x,                                                                                                       // 6393
        -this.y,                                                                                                       // 6394
        -this.z                                                                                                        // 6395
    );                                                                                                                 // 6396
};                                                                                                                     // 6397
                                                                                                                       // 6398
/*                                                                                                                     // 6399
 * Docs: TODO                                                                                                          // 6400
 *                                                                                                                     // 6401
 * @method normalize                                                                                                   // 6402
 * @param {Number} length                                                                                              // 6403
 * @return {Quaternion}                                                                                                // 6404
 */                                                                                                                    // 6405
Quaternion.prototype.normalize = function normalize(length) {                                                          // 6406
    length = (length === undefined) ? 1 : length;                                                                      // 6407
    return this.scalarDivide(length * this.norm());                                                                    // 6408
};                                                                                                                     // 6409
                                                                                                                       // 6410
/*                                                                                                                     // 6411
 * Docs: TODO                                                                                                          // 6412
 *                                                                                                                     // 6413
 * @method makeFromAngleAndAxis                                                                                        // 6414
 * @param {Number} angle                                                                                               // 6415
 * @param {Vector} v                                                                                                   // 6416
 * @return {Quaternion}                                                                                                // 6417
 */                                                                                                                    // 6418
Quaternion.prototype.makeFromAngleAndAxis = function makeFromAngleAndAxis(angle, v) {                                  // 6419
    //left handed quaternion creation: theta -> -theta                                                                 // 6420
    var n  = v.normalize();                                                                                            // 6421
    var ha = angle*0.5;                                                                                                // 6422
    var s  = -Math.sin(ha);                                                                                            // 6423
    this.x = s*n.x;                                                                                                    // 6424
    this.y = s*n.y;                                                                                                    // 6425
    this.z = s*n.z;                                                                                                    // 6426
    this.w = Math.cos(ha);                                                                                             // 6427
    return this;                                                                                                       // 6428
};                                                                                                                     // 6429
                                                                                                                       // 6430
/*                                                                                                                     // 6431
 * Docs: TODO                                                                                                          // 6432
 *                                                                                                                     // 6433
 * @method setWXYZ                                                                                                     // 6434
 * @param {Number} w                                                                                                   // 6435
 * @param {Number} x                                                                                                   // 6436
 * @param {Number} y                                                                                                   // 6437
 * @param {Number} z                                                                                                   // 6438
 * @return {Quaternion}                                                                                                // 6439
 */                                                                                                                    // 6440
Quaternion.prototype.setWXYZ = function setWXYZ(w,x,y,z) {                                                             // 6441
    register.clear();                                                                                                  // 6442
    this.w = w;                                                                                                        // 6443
    this.x = x;                                                                                                        // 6444
    this.y = y;                                                                                                        // 6445
    this.z = z;                                                                                                        // 6446
    return this;                                                                                                       // 6447
};                                                                                                                     // 6448
                                                                                                                       // 6449
/*                                                                                                                     // 6450
 * Docs: TODO                                                                                                          // 6451
 *                                                                                                                     // 6452
 * @method set                                                                                                         // 6453
 * @param {Array|Quaternion} v                                                                                         // 6454
 * @return {Quaternion}                                                                                                // 6455
 */                                                                                                                    // 6456
Quaternion.prototype.set = function set(v) {                                                                           // 6457
    if (v instanceof Array) {                                                                                          // 6458
        this.w = 0;                                                                                                    // 6459
        this.x = v[0];                                                                                                 // 6460
        this.y = v[1];                                                                                                 // 6461
        this.z = v[2];                                                                                                 // 6462
    }                                                                                                                  // 6463
    else {                                                                                                             // 6464
        this.w = v.w;                                                                                                  // 6465
        this.x = v.x;                                                                                                  // 6466
        this.y = v.y;                                                                                                  // 6467
        this.z = v.z;                                                                                                  // 6468
    }                                                                                                                  // 6469
    if (this !== register) register.clear();                                                                           // 6470
    return this;                                                                                                       // 6471
};                                                                                                                     // 6472
                                                                                                                       // 6473
/**                                                                                                                    // 6474
 * Docs: TODO                                                                                                          // 6475
 *                                                                                                                     // 6476
 * @method put                                                                                                         // 6477
 * @param {Quaternion} q                                                                                               // 6478
 * @return {Quaternion}                                                                                                // 6479
 */                                                                                                                    // 6480
Quaternion.prototype.put = function put(q) {                                                                           // 6481
    q.set(register);                                                                                                   // 6482
};                                                                                                                     // 6483
                                                                                                                       // 6484
/**                                                                                                                    // 6485
 * Doc: TODO                                                                                                           // 6486
 *                                                                                                                     // 6487
 * @method clone                                                                                                       // 6488
 * @return {Quaternion}                                                                                                // 6489
 */                                                                                                                    // 6490
Quaternion.prototype.clone = function clone() {                                                                        // 6491
    return new Quaternion(this);                                                                                       // 6492
};                                                                                                                     // 6493
                                                                                                                       // 6494
/**                                                                                                                    // 6495
 * Doc: TODO                                                                                                           // 6496
 *                                                                                                                     // 6497
 * @method clear                                                                                                       // 6498
 * @return {Quaternion}                                                                                                // 6499
 */                                                                                                                    // 6500
Quaternion.prototype.clear = function clear() {                                                                        // 6501
    this.w = 1;                                                                                                        // 6502
    this.x = 0;                                                                                                        // 6503
    this.y = 0;                                                                                                        // 6504
    this.z = 0;                                                                                                        // 6505
    return this;                                                                                                       // 6506
};                                                                                                                     // 6507
                                                                                                                       // 6508
/**                                                                                                                    // 6509
 * Doc: TODO                                                                                                           // 6510
 *                                                                                                                     // 6511
 * @method isEqual                                                                                                     // 6512
 * @param {Quaternion} q                                                                                               // 6513
 * @return {Boolean}                                                                                                   // 6514
 */                                                                                                                    // 6515
Quaternion.prototype.isEqual = function isEqual(q) {                                                                   // 6516
    return q.w === this.w && q.x === this.x && q.y === this.y && q.z === this.z;                                       // 6517
};                                                                                                                     // 6518
                                                                                                                       // 6519
/**                                                                                                                    // 6520
 * Doc: TODO                                                                                                           // 6521
 *                                                                                                                     // 6522
 * @method dot                                                                                                         // 6523
 * @param {Quaternion} q                                                                                               // 6524
 * @return {Number}                                                                                                    // 6525
 */                                                                                                                    // 6526
Quaternion.prototype.dot = function dot(q) {                                                                           // 6527
    return this.w * q.w + this.x * q.x + this.y * q.y + this.z * q.z;                                                  // 6528
};                                                                                                                     // 6529
                                                                                                                       // 6530
/**                                                                                                                    // 6531
 * Doc: TODO                                                                                                           // 6532
 *                                                                                                                     // 6533
 * @method normSquared                                                                                                 // 6534
 * @return {Number}                                                                                                    // 6535
 */                                                                                                                    // 6536
Quaternion.prototype.normSquared = function normSquared() {                                                            // 6537
    return this.dot(this);                                                                                             // 6538
};                                                                                                                     // 6539
                                                                                                                       // 6540
/**                                                                                                                    // 6541
 * Doc: TODO                                                                                                           // 6542
 *                                                                                                                     // 6543
 * @method norm                                                                                                        // 6544
 * @return {Number}                                                                                                    // 6545
 */                                                                                                                    // 6546
Quaternion.prototype.norm = function norm() {                                                                          // 6547
    return Math.sqrt(this.normSquared());                                                                              // 6548
};                                                                                                                     // 6549
                                                                                                                       // 6550
/**                                                                                                                    // 6551
 * Doc: TODO                                                                                                           // 6552
 *                                                                                                                     // 6553
 * @method isZero                                                                                                      // 6554
 * @return {Boolean}                                                                                                   // 6555
 */                                                                                                                    // 6556
Quaternion.prototype.isZero = function isZero() {                                                                      // 6557
    return !(this.x || this.y || this.z);                                                                              // 6558
};                                                                                                                     // 6559
                                                                                                                       // 6560
/**                                                                                                                    // 6561
 * Doc: TODO                                                                                                           // 6562
 *                                                                                                                     // 6563
 * @method getTransform                                                                                                // 6564
 * @return {Transform}                                                                                                 // 6565
 */                                                                                                                    // 6566
Quaternion.prototype.getTransform = function getTransform() {                                                          // 6567
    var temp = this.normalize(1);                                                                                      // 6568
    var x = temp.x;                                                                                                    // 6569
    var y = temp.y;                                                                                                    // 6570
    var z = temp.z;                                                                                                    // 6571
    var w = temp.w;                                                                                                    // 6572
                                                                                                                       // 6573
    //LHC system flattened to column major = RHC flattened to row major                                                // 6574
    return [                                                                                                           // 6575
        1 - 2*y*y - 2*z*z,                                                                                             // 6576
            2*x*y - 2*z*w,                                                                                             // 6577
            2*x*z + 2*y*w,                                                                                             // 6578
        0,                                                                                                             // 6579
            2*x*y + 2*z*w,                                                                                             // 6580
        1 - 2*x*x - 2*z*z,                                                                                             // 6581
            2*y*z - 2*x*w,                                                                                             // 6582
        0,                                                                                                             // 6583
            2*x*z - 2*y*w,                                                                                             // 6584
            2*y*z + 2*x*w,                                                                                             // 6585
        1 - 2*x*x - 2*y*y,                                                                                             // 6586
        0,                                                                                                             // 6587
        0,                                                                                                             // 6588
        0,                                                                                                             // 6589
        0,                                                                                                             // 6590
        1                                                                                                              // 6591
    ];                                                                                                                 // 6592
};                                                                                                                     // 6593
                                                                                                                       // 6594
var matrixRegister = new Matrix();                                                                                     // 6595
                                                                                                                       // 6596
/**                                                                                                                    // 6597
 * Doc: TODO                                                                                                           // 6598
 *                                                                                                                     // 6599
 * @method getMatrix                                                                                                   // 6600
 * @return {Transform}                                                                                                 // 6601
 */                                                                                                                    // 6602
Quaternion.prototype.getMatrix = function getMatrix() {                                                                // 6603
    var temp = this.normalize(1);                                                                                      // 6604
    var x = temp.x;                                                                                                    // 6605
    var y = temp.y;                                                                                                    // 6606
    var z = temp.z;                                                                                                    // 6607
    var w = temp.w;                                                                                                    // 6608
                                                                                                                       // 6609
    //LHC system flattened to row major                                                                                // 6610
    return matrixRegister.set([                                                                                        // 6611
        [                                                                                                              // 6612
            1 - 2*y*y - 2*z*z,                                                                                         // 6613
                2*x*y + 2*z*w,                                                                                         // 6614
                2*x*z - 2*y*w                                                                                          // 6615
        ],                                                                                                             // 6616
        [                                                                                                              // 6617
                2*x*y - 2*z*w,                                                                                         // 6618
            1 - 2*x*x - 2*z*z,                                                                                         // 6619
                2*y*z + 2*x*w                                                                                          // 6620
        ],                                                                                                             // 6621
        [                                                                                                              // 6622
                2*x*z + 2*y*w,                                                                                         // 6623
                2*y*z - 2*x*w,                                                                                         // 6624
            1 - 2*x*x - 2*y*y                                                                                          // 6625
        ]                                                                                                              // 6626
    ]);                                                                                                                // 6627
};                                                                                                                     // 6628
                                                                                                                       // 6629
var epsilon = 1e-5;                                                                                                    // 6630
                                                                                                                       // 6631
/**                                                                                                                    // 6632
 * Doc: TODO                                                                                                           // 6633
 *                                                                                                                     // 6634
 * @method slerp                                                                                                       // 6635
 * @param {Quaternion} q                                                                                               // 6636
 * @param {Number} t                                                                                                   // 6637
 * @return {Transform}                                                                                                 // 6638
 */                                                                                                                    // 6639
Quaternion.prototype.slerp = function slerp(q, t) {                                                                    // 6640
    var omega;                                                                                                         // 6641
    var cosomega;                                                                                                      // 6642
    var sinomega;                                                                                                      // 6643
    var scaleFrom;                                                                                                     // 6644
    var scaleTo;                                                                                                       // 6645
                                                                                                                       // 6646
    cosomega = this.dot(q);                                                                                            // 6647
    if ((1.0 - cosomega) > epsilon) {                                                                                  // 6648
        omega       = Math.acos(cosomega);                                                                             // 6649
        sinomega    = Math.sin(omega);                                                                                 // 6650
        scaleFrom   = Math.sin((1.0 - t) * omega) / sinomega;                                                          // 6651
        scaleTo     = Math.sin(t * omega) / sinomega;                                                                  // 6652
    }                                                                                                                  // 6653
    else {                                                                                                             // 6654
        scaleFrom   = 1.0 - t;                                                                                         // 6655
        scaleTo     = t;                                                                                               // 6656
    }                                                                                                                  // 6657
    return register.set(this.scalarMultiply(scaleFrom/scaleTo).add(q).multiply(scaleTo));                              // 6658
};                                                                                                                     // 6659
                                                                                                                       // 6660
module.exports = Quaternion;                                                                                           // 6661
},{"./Matrix":37}],39:[function(require,module,exports){                                                               // 6662
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6663
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6664
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6665
 *                                                                                                                     // 6666
 * Owner: david@famo.us                                                                                                // 6667
 * @license MPL 2.0                                                                                                    // 6668
 * @copyright Famous Industries, Inc. 2014                                                                             // 6669
 */                                                                                                                    // 6670
                                                                                                                       // 6671
                                                                                                                       // 6672
                                                                                                                       // 6673
                                                                                                                       // 6674
var RAND = Math.random;                                                                                                // 6675
                                                                                                                       // 6676
function _randomFloat(min,max) {                                                                                       // 6677
    return min + RAND() * (max - min);                                                                                 // 6678
}                                                                                                                      // 6679
                                                                                                                       // 6680
function _randomInteger(min,max) {                                                                                     // 6681
    return (min + RAND() * (max - min + 1)) >> 0;                                                                      // 6682
}                                                                                                                      // 6683
                                                                                                                       // 6684
/**                                                                                                                    // 6685
 * Very simple uniform random number generator library wrapping Math.random().                                         // 6686
 *                                                                                                                     // 6687
 * @class Random                                                                                                       // 6688
 * @static                                                                                                             // 6689
 */                                                                                                                    // 6690
var Random = {};                                                                                                       // 6691
                                                                                                                       // 6692
/**                                                                                                                    // 6693
 * Get single random integer between min and max (inclusive), or array                                                 // 6694
 *   of size dim if specified.                                                                                         // 6695
 *                                                                                                                     // 6696
 * @method integer                                                                                                     // 6697
 *                                                                                                                     // 6698
 * @param {Number} min lower bound, default 0                                                                          // 6699
 * @param {Number} max upper bound, default 1                                                                          // 6700
 * @param {Number} dim (optional) dimension of output array, if specified                                              // 6701
 * @return {number | array<number>} random integer, or optionally, an array of random integers                         // 6702
 */                                                                                                                    // 6703
Random.integer = function integer(min,max,dim) {                                                                       // 6704
    min = (min !== undefined) ? min : 0;                                                                               // 6705
    max = (max !== undefined) ? max : 1;                                                                               // 6706
    if (dim !== undefined) {                                                                                           // 6707
        var result = [];                                                                                               // 6708
        for (var i = 0; i < dim; i++) result.push(_randomInteger(min,max));                                            // 6709
        return result;                                                                                                 // 6710
    }                                                                                                                  // 6711
    else return _randomInteger(min,max);                                                                               // 6712
};                                                                                                                     // 6713
                                                                                                                       // 6714
/**                                                                                                                    // 6715
 * Get single random float between min and max (inclusive), or array                                                   // 6716
 *   of size dim if specified                                                                                          // 6717
 *                                                                                                                     // 6718
 * @method range                                                                                                       // 6719
 *                                                                                                                     // 6720
 * @param {Number} min lower bound, default 0                                                                          // 6721
 * @param {Number} max upper bound, default 1                                                                          // 6722
 * @param {Number} [dim] dimension of output array, if specified                                                       // 6723
 * @return {Number} random float, or optionally an array                                                               // 6724
 */                                                                                                                    // 6725
Random.range = function range(min,max,dim) {                                                                           // 6726
    min = (min !== undefined) ? min : 0;                                                                               // 6727
    max = (max !== undefined) ? max : 1;                                                                               // 6728
    if (dim !== undefined) {                                                                                           // 6729
        var result = [];                                                                                               // 6730
        for (var i = 0; i < dim; i++) result.push(_randomFloat(min,max));                                              // 6731
        return result;                                                                                                 // 6732
    }                                                                                                                  // 6733
    else return _randomFloat(min,max);                                                                                 // 6734
};                                                                                                                     // 6735
                                                                                                                       // 6736
/**                                                                                                                    // 6737
 * Return random number among the set {-1 ,1}                                                                          // 6738
 *                                                                                                                     // 6739
 * @method sign                                                                                                        // 6740
 *                                                                                                                     // 6741
 * @param {Number} prob probability of returning 1, default 0.5                                                        // 6742
 * @return {Number} random sign (-1 or 1)                                                                              // 6743
 */                                                                                                                    // 6744
Random.sign = function sign(prob) {                                                                                    // 6745
    prob = (prob !== undefined) ? prob : 0.5;                                                                          // 6746
    return (RAND() < prob) ? 1 : -1;                                                                                   // 6747
};                                                                                                                     // 6748
                                                                                                                       // 6749
/**                                                                                                                    // 6750
 * Return random boolean value, true or false.                                                                         // 6751
 *                                                                                                                     // 6752
 * @method bool                                                                                                        // 6753
 *                                                                                                                     // 6754
 * @param {Number} prob probability of returning true, default 0.5                                                     // 6755
 * @return {Boolean} random boolean                                                                                    // 6756
 */                                                                                                                    // 6757
Random.bool = function bool(prob) {                                                                                    // 6758
    prob = (prob !== undefined) ? prob : 0.5;                                                                          // 6759
    return RAND() < prob;                                                                                              // 6760
};                                                                                                                     // 6761
                                                                                                                       // 6762
module.exports = Random;                                                                                               // 6763
},{}],40:[function(require,module,exports){                                                                            // 6764
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6765
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6766
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6767
 *                                                                                                                     // 6768
 * Owner: mark@famo.us                                                                                                 // 6769
 * @license MPL 2.0                                                                                                    // 6770
 * @copyright Famous Industries, Inc. 2014                                                                             // 6771
 */                                                                                                                    // 6772
                                                                                                                       // 6773
                                                                                                                       // 6774
                                                                                                                       // 6775
/**                                                                                                                    // 6776
 * A few static methods.                                                                                               // 6777
 *                                                                                                                     // 6778
 * @class Utilities                                                                                                    // 6779
 * @static                                                                                                             // 6780
 */                                                                                                                    // 6781
var Utilities = {};                                                                                                    // 6782
                                                                                                                       // 6783
/**                                                                                                                    // 6784
 * Constrain input to range.                                                                                           // 6785
 *                                                                                                                     // 6786
 * @method clamp                                                                                                       // 6787
 * @param {Number} value input                                                                                         // 6788
 * @param {Array.Number} range [min, max]                                                                              // 6789
 * @static                                                                                                             // 6790
 */                                                                                                                    // 6791
Utilities.clamp = function clamp(value, range) {                                                                       // 6792
    return Math.max(Math.min(value, range[1]), range[0]);                                                              // 6793
};                                                                                                                     // 6794
                                                                                                                       // 6795
/**                                                                                                                    // 6796
 * Euclidean length of numerical array.                                                                                // 6797
 *                                                                                                                     // 6798
 * @method length                                                                                                      // 6799
 * @param {Array.Number} array array of numbers                                                                        // 6800
 * @static                                                                                                             // 6801
 */                                                                                                                    // 6802
Utilities.length = function length(array) {                                                                            // 6803
    var distanceSquared = 0;                                                                                           // 6804
    for (var i = 0; i < array.length; i++) {                                                                           // 6805
        distanceSquared += array[i] * array[i];                                                                        // 6806
    }                                                                                                                  // 6807
    return Math.sqrt(distanceSquared);                                                                                 // 6808
};                                                                                                                     // 6809
                                                                                                                       // 6810
module.exports = Utilities;                                                                                            // 6811
},{}],41:[function(require,module,exports){                                                                            // 6812
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6813
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6814
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6815
 *                                                                                                                     // 6816
 * Owner: david@famo.us                                                                                                // 6817
 * @license MPL 2.0                                                                                                    // 6818
 * @copyright Famous Industries, Inc. 2014                                                                             // 6819
 */                                                                                                                    // 6820
                                                                                                                       // 6821
                                                                                                                       // 6822
                                                                                                                       // 6823
                                                                                                                       // 6824
/**                                                                                                                    // 6825
 * Three-element floating point vector.                                                                                // 6826
 *                                                                                                                     // 6827
 * @class Vector                                                                                                       // 6828
 * @constructor                                                                                                        // 6829
 *                                                                                                                     // 6830
 * @param {number} x x element value                                                                                   // 6831
 * @param {number} y y element value                                                                                   // 6832
 * @param {number} z z element value                                                                                   // 6833
 */                                                                                                                    // 6834
function Vector(x,y,z) {                                                                                               // 6835
    if (arguments.length === 1 && x !== undefined) this.set(x);                                                        // 6836
    else {                                                                                                             // 6837
        this.x = x || 0;                                                                                               // 6838
        this.y = y || 0;                                                                                               // 6839
        this.z = z || 0;                                                                                               // 6840
    }                                                                                                                  // 6841
    return this;                                                                                                       // 6842
}                                                                                                                      // 6843
                                                                                                                       // 6844
var _register = new Vector(0,0,0);                                                                                     // 6845
                                                                                                                       // 6846
/**                                                                                                                    // 6847
 * Add this element-wise to another Vector, element-wise.                                                              // 6848
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6849
 *                                                                                                                     // 6850
 * @method add                                                                                                         // 6851
 * @param {Vector} v addend                                                                                            // 6852
 * @return {Vector} vector sum                                                                                         // 6853
 */                                                                                                                    // 6854
Vector.prototype.add = function add(v) {                                                                               // 6855
    return _setXYZ.call(_register,                                                                                     // 6856
        this.x + v.x,                                                                                                  // 6857
        this.y + v.y,                                                                                                  // 6858
        this.z + v.z                                                                                                   // 6859
    );                                                                                                                 // 6860
};                                                                                                                     // 6861
                                                                                                                       // 6862
/**                                                                                                                    // 6863
 * Subtract another vector from this vector, element-wise.                                                             // 6864
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6865
 *                                                                                                                     // 6866
 * @method sub                                                                                                         // 6867
 * @param {Vector} v subtrahend                                                                                        // 6868
 * @return {Vector} vector difference                                                                                  // 6869
 */                                                                                                                    // 6870
Vector.prototype.sub = function sub(v) {                                                                               // 6871
    return _setXYZ.call(_register,                                                                                     // 6872
        this.x - v.x,                                                                                                  // 6873
        this.y - v.y,                                                                                                  // 6874
        this.z - v.z                                                                                                   // 6875
    );                                                                                                                 // 6876
};                                                                                                                     // 6877
                                                                                                                       // 6878
/**                                                                                                                    // 6879
 * Scale Vector by floating point r.                                                                                   // 6880
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6881
 *                                                                                                                     // 6882
 * @method mult                                                                                                        // 6883
 *                                                                                                                     // 6884
 * @param {number} r scalar                                                                                            // 6885
 * @return {Vector} vector result                                                                                      // 6886
 */                                                                                                                    // 6887
Vector.prototype.mult = function mult(r) {                                                                             // 6888
    return _setXYZ.call(_register,                                                                                     // 6889
        r * this.x,                                                                                                    // 6890
        r * this.y,                                                                                                    // 6891
        r * this.z                                                                                                     // 6892
    );                                                                                                                 // 6893
};                                                                                                                     // 6894
                                                                                                                       // 6895
/**                                                                                                                    // 6896
 * Scale Vector by floating point 1/r.                                                                                 // 6897
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6898
 *                                                                                                                     // 6899
 * @method div                                                                                                         // 6900
 *                                                                                                                     // 6901
 * @param {number} r scalar                                                                                            // 6902
 * @return {Vector} vector result                                                                                      // 6903
 */                                                                                                                    // 6904
Vector.prototype.div = function div(r) {                                                                               // 6905
    return this.mult(1 / r);                                                                                           // 6906
};                                                                                                                     // 6907
                                                                                                                       // 6908
/**                                                                                                                    // 6909
 * Given another vector v, return cross product (v)x(this).                                                            // 6910
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6911
 *                                                                                                                     // 6912
 * @method cross                                                                                                       // 6913
 * @param {Vector} v Left Hand Vector                                                                                  // 6914
 * @return {Vector} vector result                                                                                      // 6915
 */                                                                                                                    // 6916
Vector.prototype.cross = function cross(v) {                                                                           // 6917
    var x = this.x;                                                                                                    // 6918
    var y = this.y;                                                                                                    // 6919
    var z = this.z;                                                                                                    // 6920
    var vx = v.x;                                                                                                      // 6921
    var vy = v.y;                                                                                                      // 6922
    var vz = v.z;                                                                                                      // 6923
                                                                                                                       // 6924
    return _setXYZ.call(_register,                                                                                     // 6925
        z * vy - y * vz,                                                                                               // 6926
        x * vz - z * vx,                                                                                               // 6927
        y * vx - x * vy                                                                                                // 6928
    );                                                                                                                 // 6929
};                                                                                                                     // 6930
                                                                                                                       // 6931
/**                                                                                                                    // 6932
 * Component-wise equality test between this and Vector v.                                                             // 6933
 * @method equals                                                                                                      // 6934
 * @param {Vector} v vector to compare                                                                                 // 6935
 * @return {boolean}                                                                                                   // 6936
 */                                                                                                                    // 6937
Vector.prototype.equals = function equals(v) {                                                                         // 6938
    return (v.x === this.x && v.y === this.y && v.z === this.z);                                                       // 6939
};                                                                                                                     // 6940
                                                                                                                       // 6941
/**                                                                                                                    // 6942
 * Rotate clockwise around x-axis by theta radians.                                                                    // 6943
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6944
 * @method rotateX                                                                                                     // 6945
 * @param {number} theta radians                                                                                       // 6946
 * @return {Vector} rotated vector                                                                                     // 6947
 */                                                                                                                    // 6948
Vector.prototype.rotateX = function rotateX(theta) {                                                                   // 6949
    var x = this.x;                                                                                                    // 6950
    var y = this.y;                                                                                                    // 6951
    var z = this.z;                                                                                                    // 6952
                                                                                                                       // 6953
    var cosTheta = Math.cos(theta);                                                                                    // 6954
    var sinTheta = Math.sin(theta);                                                                                    // 6955
                                                                                                                       // 6956
    return _setXYZ.call(_register,                                                                                     // 6957
        x,                                                                                                             // 6958
        y * cosTheta - z * sinTheta,                                                                                   // 6959
        y * sinTheta + z * cosTheta                                                                                    // 6960
    );                                                                                                                 // 6961
};                                                                                                                     // 6962
                                                                                                                       // 6963
/**                                                                                                                    // 6964
 * Rotate clockwise around y-axis by theta radians.                                                                    // 6965
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6966
 * @method rotateY                                                                                                     // 6967
 * @param {number} theta radians                                                                                       // 6968
 * @return {Vector} rotated vector                                                                                     // 6969
 */                                                                                                                    // 6970
Vector.prototype.rotateY = function rotateY(theta) {                                                                   // 6971
    var x = this.x;                                                                                                    // 6972
    var y = this.y;                                                                                                    // 6973
    var z = this.z;                                                                                                    // 6974
                                                                                                                       // 6975
    var cosTheta = Math.cos(theta);                                                                                    // 6976
    var sinTheta = Math.sin(theta);                                                                                    // 6977
                                                                                                                       // 6978
    return _setXYZ.call(_register,                                                                                     // 6979
        z * sinTheta + x * cosTheta,                                                                                   // 6980
        y,                                                                                                             // 6981
        z * cosTheta - x * sinTheta                                                                                    // 6982
    );                                                                                                                 // 6983
};                                                                                                                     // 6984
                                                                                                                       // 6985
/**                                                                                                                    // 6986
 * Rotate clockwise around z-axis by theta radians.                                                                    // 6987
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6988
 * @method rotateZ                                                                                                     // 6989
 * @param {number} theta radians                                                                                       // 6990
 * @return {Vector} rotated vector                                                                                     // 6991
 */                                                                                                                    // 6992
Vector.prototype.rotateZ = function rotateZ(theta) {                                                                   // 6993
    var x = this.x;                                                                                                    // 6994
    var y = this.y;                                                                                                    // 6995
    var z = this.z;                                                                                                    // 6996
                                                                                                                       // 6997
    var cosTheta = Math.cos(theta);                                                                                    // 6998
    var sinTheta = Math.sin(theta);                                                                                    // 6999
                                                                                                                       // 7000
    return _setXYZ.call(_register,                                                                                     // 7001
        x * cosTheta - y * sinTheta,                                                                                   // 7002
        x * sinTheta + y * cosTheta,                                                                                   // 7003
        z                                                                                                              // 7004
    );                                                                                                                 // 7005
};                                                                                                                     // 7006
                                                                                                                       // 7007
/**                                                                                                                    // 7008
 * Return dot product of this with a second Vector                                                                     // 7009
 * @method dot                                                                                                         // 7010
 * @param {Vector} v second vector                                                                                     // 7011
 * @return {number} dot product                                                                                        // 7012
 */                                                                                                                    // 7013
Vector.prototype.dot = function dot(v) {                                                                               // 7014
    return this.x * v.x + this.y * v.y + this.z * v.z;                                                                 // 7015
};                                                                                                                     // 7016
                                                                                                                       // 7017
/**                                                                                                                    // 7018
 * Return squared length of this vector                                                                                // 7019
 * @method normSquared                                                                                                 // 7020
 * @return {number} squared length                                                                                     // 7021
 */                                                                                                                    // 7022
Vector.prototype.normSquared = function normSquared() {                                                                // 7023
    return this.dot(this);                                                                                             // 7024
};                                                                                                                     // 7025
                                                                                                                       // 7026
/**                                                                                                                    // 7027
 * Return length of this vector                                                                                        // 7028
 * @method norm                                                                                                        // 7029
 * @return {number} length                                                                                             // 7030
 */                                                                                                                    // 7031
Vector.prototype.norm = function norm() {                                                                              // 7032
    return Math.sqrt(this.normSquared());                                                                              // 7033
};                                                                                                                     // 7034
                                                                                                                       // 7035
/**                                                                                                                    // 7036
 * Scale Vector to specified length.                                                                                   // 7037
 *   If length is less than internal tolerance, set vector to [length, 0, 0].                                          // 7038
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7039
 * @method normalize                                                                                                   // 7040
 *                                                                                                                     // 7041
 * @param {number} length target length, default 1.0                                                                   // 7042
 * @return {Vector}                                                                                                    // 7043
 */                                                                                                                    // 7044
Vector.prototype.normalize = function normalize(length) {                                                              // 7045
    if (arguments.length === 0) length = 1;                                                                            // 7046
    var norm = this.norm();                                                                                            // 7047
                                                                                                                       // 7048
    if (norm > 1e-7) return _setFromVector.call(_register, this.mult(length / norm));                                  // 7049
    else return _setXYZ.call(_register, length, 0, 0);                                                                 // 7050
};                                                                                                                     // 7051
                                                                                                                       // 7052
/**                                                                                                                    // 7053
 * Make a separate copy of the Vector.                                                                                 // 7054
 *                                                                                                                     // 7055
 * @method clone                                                                                                       // 7056
 *                                                                                                                     // 7057
 * @return {Vector}                                                                                                    // 7058
 */                                                                                                                    // 7059
Vector.prototype.clone = function clone() {                                                                            // 7060
    return new Vector(this);                                                                                           // 7061
};                                                                                                                     // 7062
                                                                                                                       // 7063
/**                                                                                                                    // 7064
 * True if and only if every value is 0 (or falsy)                                                                     // 7065
 *                                                                                                                     // 7066
 * @method isZero                                                                                                      // 7067
 *                                                                                                                     // 7068
 * @return {boolean}                                                                                                   // 7069
 */                                                                                                                    // 7070
Vector.prototype.isZero = function isZero() {                                                                          // 7071
    return !(this.x || this.y || this.z);                                                                              // 7072
};                                                                                                                     // 7073
                                                                                                                       // 7074
function _setXYZ(x,y,z) {                                                                                              // 7075
    this.x = x;                                                                                                        // 7076
    this.y = y;                                                                                                        // 7077
    this.z = z;                                                                                                        // 7078
    return this;                                                                                                       // 7079
}                                                                                                                      // 7080
                                                                                                                       // 7081
function _setFromArray(v) {                                                                                            // 7082
    return _setXYZ.call(this,v[0],v[1],v[2] || 0);                                                                     // 7083
}                                                                                                                      // 7084
                                                                                                                       // 7085
function _setFromVector(v) {                                                                                           // 7086
    return _setXYZ.call(this, v.x, v.y, v.z);                                                                          // 7087
}                                                                                                                      // 7088
                                                                                                                       // 7089
function _setFromNumber(x) {                                                                                           // 7090
    return _setXYZ.call(this,x,0,0);                                                                                   // 7091
}                                                                                                                      // 7092
                                                                                                                       // 7093
/**                                                                                                                    // 7094
 * Set this Vector to the values in the provided Array or Vector.                                                      // 7095
 *                                                                                                                     // 7096
 * @method set                                                                                                         // 7097
 * @param {object} v array, Vector, or number                                                                          // 7098
 * @return {Vector} this                                                                                               // 7099
 */                                                                                                                    // 7100
Vector.prototype.set = function set(v) {                                                                               // 7101
    if (v instanceof Array) return _setFromArray.call(this, v);                                                        // 7102
    if (typeof v === 'number') return _setFromNumber.call(this, v);                                                    // 7103
    return _setFromVector.call(this, v);                                                                               // 7104
};                                                                                                                     // 7105
                                                                                                                       // 7106
Vector.prototype.setXYZ = function(x,y,z) {                                                                            // 7107
    return _setXYZ.apply(this, arguments);                                                                             // 7108
};                                                                                                                     // 7109
                                                                                                                       // 7110
Vector.prototype.set1D = function(x) {                                                                                 // 7111
    return _setFromNumber.call(this, x);                                                                               // 7112
};                                                                                                                     // 7113
                                                                                                                       // 7114
/**                                                                                                                    // 7115
 * Put result of last internal register calculation in specified output vector.                                        // 7116
 *                                                                                                                     // 7117
 * @method put                                                                                                         // 7118
 * @param {Vector} v destination vector                                                                                // 7119
 * @return {Vector} destination vector                                                                                 // 7120
 */                                                                                                                    // 7121
                                                                                                                       // 7122
Vector.prototype.put = function put(v) {                                                                               // 7123
    if (this === _register) _setFromVector.call(v, _register);                                                         // 7124
    else _setFromVector.call(v, this);                                                                                 // 7125
};                                                                                                                     // 7126
                                                                                                                       // 7127
/**                                                                                                                    // 7128
 * Set this vector to [0,0,0]                                                                                          // 7129
 *                                                                                                                     // 7130
 * @method clear                                                                                                       // 7131
 */                                                                                                                    // 7132
Vector.prototype.clear = function clear() {                                                                            // 7133
    return _setXYZ.call(this,0,0,0);                                                                                   // 7134
};                                                                                                                     // 7135
                                                                                                                       // 7136
/**                                                                                                                    // 7137
 * Scale this Vector down to specified "cap" length.                                                                   // 7138
 *   If Vector shorter than cap, or cap is Infinity, do nothing.                                                       // 7139
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7140
 *                                                                                                                     // 7141
 * @method cap                                                                                                         // 7142
 * @return {Vector} capped vector                                                                                      // 7143
 */                                                                                                                    // 7144
Vector.prototype.cap = function cap(cap) {                                                                             // 7145
    if (cap === Infinity) return _setFromVector.call(_register, this);                                                 // 7146
    var norm = this.norm();                                                                                            // 7147
    if (norm > cap) return _setFromVector.call(_register, this.mult(cap / norm));                                      // 7148
    else return _setFromVector.call(_register, this);                                                                  // 7149
};                                                                                                                     // 7150
                                                                                                                       // 7151
/**                                                                                                                    // 7152
 * Return projection of this Vector onto another.                                                                      // 7153
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7154
 *                                                                                                                     // 7155
 * @method project                                                                                                     // 7156
 * @param {Vector} n vector to project upon                                                                            // 7157
 * @return {Vector} projected vector                                                                                   // 7158
 */                                                                                                                    // 7159
Vector.prototype.project = function project(n) {                                                                       // 7160
    return n.mult(this.dot(n));                                                                                        // 7161
};                                                                                                                     // 7162
                                                                                                                       // 7163
/**                                                                                                                    // 7164
 * Reflect this Vector across provided vector.                                                                         // 7165
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7166
 *                                                                                                                     // 7167
 * @method reflectAcross                                                                                               // 7168
 * @param {Vector} n vector to reflect across                                                                          // 7169
 * @return {Vector} reflected vector                                                                                   // 7170
 */                                                                                                                    // 7171
Vector.prototype.reflectAcross = function reflectAcross(n) {                                                           // 7172
    n.normalize().put(n);                                                                                              // 7173
    return _setFromVector(_register, this.sub(this.project(n).mult(2)));                                               // 7174
};                                                                                                                     // 7175
                                                                                                                       // 7176
/**                                                                                                                    // 7177
 * Convert Vector to three-element array.                                                                              // 7178
 *                                                                                                                     // 7179
 * @method get                                                                                                         // 7180
 * @return {array<number>} three-element array                                                                         // 7181
 */                                                                                                                    // 7182
Vector.prototype.get = function get() {                                                                                // 7183
    return [this.x, this.y, this.z];                                                                                   // 7184
};                                                                                                                     // 7185
                                                                                                                       // 7186
Vector.prototype.get1D = function() {                                                                                  // 7187
    return this.x;                                                                                                     // 7188
};                                                                                                                     // 7189
                                                                                                                       // 7190
module.exports = Vector;                                                                                               // 7191
},{}],42:[function(require,module,exports){                                                                            // 7192
module.exports = {                                                                                                     // 7193
  Matrix: require('./Matrix'),                                                                                         // 7194
  Quaternion: require('./Quaternion'),                                                                                 // 7195
  Random: require('./Random'),                                                                                         // 7196
  Utilities: require('./Utilities'),                                                                                   // 7197
  Vector: require('./Vector')                                                                                          // 7198
};                                                                                                                     // 7199
                                                                                                                       // 7200
},{"./Matrix":37,"./Quaternion":38,"./Random":39,"./Utilities":40,"./Vector":41}],43:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 7202
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 7203
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 7204
 *                                                                                                                     // 7205
 * Owner: david@famo.us                                                                                                // 7206
 * @license MPL 2.0                                                                                                    // 7207
 * @copyright Famous Industries, Inc. 2014                                                                             // 7208
 */                                                                                                                    // 7209
                                                                                                                       // 7210
var Transform = require('../core/Transform');                                                                          // 7211
var Transitionable = require('../transitions/Transitionable');                                                         // 7212
var EventHandler = require('../core/EventHandler');                                                                    // 7213
var Utilities = require('../math/Utilities');                                                                          // 7214
var GenericSync = require('../inputs/GenericSync');                                                                    // 7215
var MouseSync = require('../inputs/MouseSync');                                                                        // 7216
var TouchSync = require('../inputs/TouchSync');                                                                        // 7217
GenericSync.register({'mouse': MouseSync, 'touch': TouchSync});                                                        // 7218
                                                                                                                       // 7219
/**                                                                                                                    // 7220
 * Makes added render nodes responsive to drag beahvior.                                                               // 7221
 *   Emits events 'start', 'update', 'end'.                                                                            // 7222
 * @class Draggable                                                                                                    // 7223
 * @constructor                                                                                                        // 7224
 * @param {Object} [options] options configuration object.                                                             // 7225
 * @param {Number} [options.snapX] grid width for snapping during drag                                                 // 7226
 * @param {Number} [options.snapY] grid height for snapping during drag                                                // 7227
 * @param {Array.Number} [options.xRange] maxmimum [negative, positive] x displacement from start of drag              // 7228
 * @param {Array.Number} [options.yRange] maxmimum [negative, positive] y displacement from start of drag              // 7229
 * @param {Number} [options.scale] one pixel of input motion translates to this many pixels of output drag motion      // 7230
 * @param {Number} [options.projection] User should set to Draggable._direction.x or                                   // 7231
 *    Draggable._direction.y to constrain to one axis.                                                                 // 7232
 *                                                                                                                     // 7233
 */                                                                                                                    // 7234
function Draggable(options) {                                                                                          // 7235
    this.options = Object.create(Draggable.DEFAULT_OPTIONS);                                                           // 7236
    if (options) this.setOptions(options);                                                                             // 7237
                                                                                                                       // 7238
    this._positionState = new Transitionable([0,0]);                                                                   // 7239
    this._differential  = [0,0];                                                                                       // 7240
    this._active = true;                                                                                               // 7241
                                                                                                                       // 7242
    this.sync = new GenericSync(['mouse', 'touch'], {scale : this.options.scale});                                     // 7243
    this.eventOutput = new EventHandler();                                                                             // 7244
    EventHandler.setInputHandler(this,  this.sync);                                                                    // 7245
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 7246
                                                                                                                       // 7247
    _bindEvents.call(this);                                                                                            // 7248
}                                                                                                                      // 7249
                                                                                                                       // 7250
//binary representation of directions for bitwise operations                                                           // 7251
var _direction = {                                                                                                     // 7252
    x : 0x01,         //001                                                                                            // 7253
    y : 0x02          //010                                                                                            // 7254
};                                                                                                                     // 7255
                                                                                                                       // 7256
Draggable.DIRECTION_X = _direction.x;                                                                                  // 7257
Draggable.DIRECTION_Y = _direction.y;                                                                                  // 7258
                                                                                                                       // 7259
var _clamp = Utilities.clamp;                                                                                          // 7260
                                                                                                                       // 7261
Draggable.DEFAULT_OPTIONS = {                                                                                          // 7262
    projection  : _direction.x | _direction.y,                                                                         // 7263
    scale       : 1,                                                                                                   // 7264
    xRange      : null,                                                                                                // 7265
    yRange      : null,                                                                                                // 7266
    snapX       : 0,                                                                                                   // 7267
    snapY       : 0,                                                                                                   // 7268
    transition  : {duration : 0}                                                                                       // 7269
};                                                                                                                     // 7270
                                                                                                                       // 7271
function _mapDifferential(differential) {                                                                              // 7272
    var opts        = this.options;                                                                                    // 7273
    var projection  = opts.projection;                                                                                 // 7274
    var snapX       = opts.snapX;                                                                                      // 7275
    var snapY       = opts.snapY;                                                                                      // 7276
                                                                                                                       // 7277
    //axes                                                                                                             // 7278
    var tx = (projection & _direction.x) ? differential[0] : 0;                                                        // 7279
    var ty = (projection & _direction.y) ? differential[1] : 0;                                                        // 7280
                                                                                                                       // 7281
    //snapping                                                                                                         // 7282
    if (snapX > 0) tx -= tx % snapX;                                                                                   // 7283
    if (snapY > 0) ty -= ty % snapY;                                                                                   // 7284
                                                                                                                       // 7285
    return [tx, ty];                                                                                                   // 7286
}                                                                                                                      // 7287
                                                                                                                       // 7288
function _handleStart() {                                                                                              // 7289
    if (!this._active) return;                                                                                         // 7290
    if (this._positionState.isActive()) this._positionState.halt();                                                    // 7291
    this.eventOutput.emit('start', {position : this.getPosition()});                                                   // 7292
}                                                                                                                      // 7293
                                                                                                                       // 7294
function _handleMove(event) {                                                                                          // 7295
    if (!this._active) return;                                                                                         // 7296
                                                                                                                       // 7297
    var options = this.options;                                                                                        // 7298
    this._differential = event.position;                                                                               // 7299
    var newDifferential = _mapDifferential.call(this, this._differential);                                             // 7300
                                                                                                                       // 7301
    //buffer the differential if snapping is set                                                                       // 7302
    this._differential[0] -= newDifferential[0];                                                                       // 7303
    this._differential[1] -= newDifferential[1];                                                                       // 7304
                                                                                                                       // 7305
    var pos = this.getPosition();                                                                                      // 7306
                                                                                                                       // 7307
    //modify position, retain reference                                                                                // 7308
    pos[0] += newDifferential[0];                                                                                      // 7309
    pos[1] += newDifferential[1];                                                                                      // 7310
                                                                                                                       // 7311
    //handle bounding box                                                                                              // 7312
    if (options.xRange){                                                                                               // 7313
        var xRange = [options.xRange[0] + 0.5 * options.snapX, options.xRange[1] - 0.5 * options.snapX];               // 7314
        pos[0] = _clamp(pos[0], xRange);                                                                               // 7315
    }                                                                                                                  // 7316
                                                                                                                       // 7317
    if (options.yRange){                                                                                               // 7318
        var yRange = [options.yRange[0] + 0.5 * options.snapY, options.yRange[1] - 0.5 * options.snapY];               // 7319
        pos[1] = _clamp(pos[1], yRange);                                                                               // 7320
    }                                                                                                                  // 7321
                                                                                                                       // 7322
    this.eventOutput.emit('update', {position : pos});                                                                 // 7323
}                                                                                                                      // 7324
                                                                                                                       // 7325
function _handleEnd() {                                                                                                // 7326
    if (!this._active) return;                                                                                         // 7327
    this.eventOutput.emit('end', {position : this.getPosition()});                                                     // 7328
}                                                                                                                      // 7329
                                                                                                                       // 7330
function _bindEvents() {                                                                                               // 7331
    this.sync.on('start', _handleStart.bind(this));                                                                    // 7332
    this.sync.on('update', _handleMove.bind(this));                                                                    // 7333
    this.sync.on('end', _handleEnd.bind(this));                                                                        // 7334
}                                                                                                                      // 7335
                                                                                                                       // 7336
/**                                                                                                                    // 7337
 * Set internal options, overriding any default options                                                                // 7338
 *                                                                                                                     // 7339
 * @method setOptions                                                                                                  // 7340
 *                                                                                                                     // 7341
 * @param {Object} [options] overrides of default options.  See constructor.                                           // 7342
 */                                                                                                                    // 7343
Draggable.prototype.setOptions = function setOptions(options) {                                                        // 7344
    var currentOptions = this.options;                                                                                 // 7345
    if (options.projection !== undefined) {                                                                            // 7346
        var proj = options.projection;                                                                                 // 7347
        this.options.projection = 0;                                                                                   // 7348
        ['x', 'y'].forEach(function(val) {                                                                             // 7349
            if (proj.indexOf(val) !== -1) currentOptions.projection |= _direction[val];                                // 7350
        });                                                                                                            // 7351
    }                                                                                                                  // 7352
    if (options.scale  !== undefined) {                                                                                // 7353
        currentOptions.scale  = options.scale;                                                                         // 7354
        this.sync.setOptions({                                                                                         // 7355
            scale: options.scale                                                                                       // 7356
        });                                                                                                            // 7357
    }                                                                                                                  // 7358
    if (options.xRange !== undefined) currentOptions.xRange = options.xRange;                                          // 7359
    if (options.yRange !== undefined) currentOptions.yRange = options.yRange;                                          // 7360
    if (options.snapX  !== undefined) currentOptions.snapX  = options.snapX;                                           // 7361
    if (options.snapY  !== undefined) currentOptions.snapY  = options.snapY;                                           // 7362
};                                                                                                                     // 7363
                                                                                                                       // 7364
/**                                                                                                                    // 7365
 * Get current delta in position from where this draggable started.                                                    // 7366
 *                                                                                                                     // 7367
 * @method getPosition                                                                                                 // 7368
 *                                                                                                                     // 7369
 * @return {array<number>} [x, y] position delta from start.                                                           // 7370
 */                                                                                                                    // 7371
Draggable.prototype.getPosition = function getPosition() {                                                             // 7372
    return this._positionState.get();                                                                                  // 7373
};                                                                                                                     // 7374
                                                                                                                       // 7375
/**                                                                                                                    // 7376
 * Transition the element to the desired relative position via provided transition.                                    // 7377
 *  For example, calling this with [0,0] will not change the position.                                                 // 7378
 *  Callback will be executed on completion.                                                                           // 7379
 *                                                                                                                     // 7380
 * @method setRelativePosition                                                                                         // 7381
 *                                                                                                                     // 7382
 * @param {array<number>} position end state to which we interpolate                                                   // 7383
 * @param {transition} transition transition object specifying how object moves to new position                        // 7384
 * @param {function} callback zero-argument function to call on observed completion                                    // 7385
 */                                                                                                                    // 7386
Draggable.prototype.setRelativePosition = function setRelativePosition(position, transition, callback) {               // 7387
    var currPos = this.getPosition();                                                                                  // 7388
    var relativePosition = [currPos[0] + position[0], currPos[1] + position[1]];                                       // 7389
    this.setPosition(relativePosition, transition, callback);                                                          // 7390
};                                                                                                                     // 7391
                                                                                                                       // 7392
/**                                                                                                                    // 7393
 * Transition the element to the desired absolute position via provided transition.                                    // 7394
 *  Callback will be executed on completion.                                                                           // 7395
 *                                                                                                                     // 7396
 * @method setPosition                                                                                                 // 7397
 *                                                                                                                     // 7398
 * @param {array<number>} position end state to which we interpolate                                                   // 7399
 * @param {transition} transition transition object specifying how object moves to new position                        // 7400
 * @param {function} callback zero-argument function to call on observed completion                                    // 7401
 */                                                                                                                    // 7402
Draggable.prototype.setPosition = function setPosition(position, transition, callback) {                               // 7403
    if (this._positionState.isActive()) this._positionState.halt();                                                    // 7404
    this._positionState.set(position, transition, callback);                                                           // 7405
};                                                                                                                     // 7406
                                                                                                                       // 7407
/**                                                                                                                    // 7408
 * Set this draggable to respond to user input.                                                                        // 7409
 *                                                                                                                     // 7410
 * @method activate                                                                                                    // 7411
 *                                                                                                                     // 7412
 */                                                                                                                    // 7413
Draggable.prototype.activate = function activate() {                                                                   // 7414
    this._active = true;                                                                                               // 7415
};                                                                                                                     // 7416
                                                                                                                       // 7417
/**                                                                                                                    // 7418
 * Set this draggable to ignore user input.                                                                            // 7419
 *                                                                                                                     // 7420
 * @method deactivate                                                                                                  // 7421
 *                                                                                                                     // 7422
 */                                                                                                                    // 7423
Draggable.prototype.deactivate = function deactivate() {                                                               // 7424
    this._active = false;                                                                                              // 7425
};                                                                                                                     // 7426
                                                                                                                       // 7427
/**                                                                                                                    // 7428
 * Switch the input response stage between active and inactive.                                                        // 7429
 *                                                                                                                     // 7430
 * @method toggle                                                                                                      // 7431
 *                                                                                                                     // 7432
 */                                                                                                                    // 7433
Draggable.prototype.toggle = function toggle() {                                                                       // 7434
    this._active = !this._active;                                                                                      // 7435
};                                                                                                                     // 7436
                                                                                                                       // 7437
/**                                                                                                                    // 7438
 * Return render spec for this Modifier, applying to the provided                                                      // 7439
 *    target component.  This is similar to render() for Surfaces.                                                     // 7440
 *                                                                                                                     // 7441
 * @private                                                                                                            // 7442
 * @method modify                                                                                                      // 7443
 *                                                                                                                     // 7444
 * @param {Object} target (already rendered) render spec to                                                            // 7445
 *    which to apply the transform.                                                                                    // 7446
 * @return {Object} render spec for this Modifier, including the                                                       // 7447
 *    provided target                                                                                                  // 7448
 */                                                                                                                    // 7449
Draggable.prototype.modify = function modify(target) {                                                                 // 7450
    var pos = this.getPosition();                                                                                      // 7451
    return {                                                                                                           // 7452
        transform: Transform.translate(pos[0], pos[1]),                                                                // 7453
        target: target                                                                                                 // 7454
    };                                                                                                                 // 7455
};                                                                                                                     // 7456
                                                                                                                       // 7457
module.exports = Draggable;                                                                                            // 7458
},{"../core/EventHandler":7,"../core/Transform":15,"../inputs/GenericSync":27,"../inputs/MouseSync":28,"../inputs/TouchSync":33,"../math/Utilities":40,"../transitions/Transitionable":88}],44:[function(require,module,exports){
var Transitionable = require('../transitions/Transitionable');                                                         // 7460
var OptionsManager = require('../core/OptionsManager');                                                                // 7461
                                                                                                                       // 7462
/**                                                                                                                    // 7463
 * Modifier that allows you to fade the opacity of affected renderables in and out.                                    // 7464
 * @class Fader                                                                                                        // 7465
 * @constructor                                                                                                        // 7466
 * @param {Object} [options] options configuration object.                                                             // 7467
 * @param {Boolean} [options.cull=false] Stops returning affected renderables up the tree when they're fully faded when true.
 * @param {Transition} [options.transition=true] The main transition for showing and hiding.                           // 7469
 * @param {Transition} [options.pulseInTransition=true] Controls the transition to a pulsed state when the Fader instance's pulse
 * method is called.                                                                                                   // 7471
 * @param {Transition} [options.pulseOutTransition=true]Controls the transition back from a pulsed state when the Fader instance's pulse
 * method is called.                                                                                                   // 7473
 *                                                                                                                     // 7474
 */                                                                                                                    // 7475
function Fader(options, startState) {                                                                                  // 7476
    this.options = Object.create(Fader.DEFAULT_OPTIONS);                                                               // 7477
    this._optionsManager = new OptionsManager(this.options);                                                           // 7478
                                                                                                                       // 7479
    if (options) this.setOptions(options);                                                                             // 7480
                                                                                                                       // 7481
    if (!startState) startState = 0;                                                                                   // 7482
    this.transitionHelper = new Transitionable(startState);                                                            // 7483
}                                                                                                                      // 7484
                                                                                                                       // 7485
Fader.DEFAULT_OPTIONS = {                                                                                              // 7486
    cull: false,                                                                                                       // 7487
    transition: true,                                                                                                  // 7488
    pulseInTransition: true,                                                                                           // 7489
    pulseOutTransition: true                                                                                           // 7490
};                                                                                                                     // 7491
                                                                                                                       // 7492
/**                                                                                                                    // 7493
 * Set internal options, overriding any default options                                                                // 7494
 *                                                                                                                     // 7495
 * @method setOptions                                                                                                  // 7496
 *                                                                                                                     // 7497
 * @param {Object} [options] overrides of default options.  See constructor.                                           // 7498
 */                                                                                                                    // 7499
Fader.prototype.setOptions = function setOptions(options) {                                                            // 7500
    return this._optionsManager.setOptions(options);                                                                   // 7501
};                                                                                                                     // 7502
                                                                                                                       // 7503
/**                                                                                                                    // 7504
 * Fully displays the Fader instance's associated renderables.                                                         // 7505
 *                                                                                                                     // 7506
 * @method show                                                                                                        // 7507
 * @param {Transition} [transition] The transition that coordinates setting to the new state.                          // 7508
 * @param {Function} [callback] A callback that executes once you've transitioned to the fully shown state.            // 7509
 */                                                                                                                    // 7510
Fader.prototype.show = function show(transition, callback) {                                                           // 7511
    transition = transition || this.options.transition;                                                                // 7512
    this.set(1, transition, callback);                                                                                 // 7513
};                                                                                                                     // 7514
                                                                                                                       // 7515
/**                                                                                                                    // 7516
 * Fully fades the Fader instance's associated renderables.                                                            // 7517
 *                                                                                                                     // 7518
 * @method hide                                                                                                        // 7519
 * @param {Transition} [transition] The transition that coordinates setting to the new state.                          // 7520
 * @param {Function} [callback] A callback that executes once you've transitioned to the fully faded state.            // 7521
 */                                                                                                                    // 7522
Fader.prototype.hide = function hide(transition, callback) {                                                           // 7523
    transition = transition || this.options.transition;                                                                // 7524
    this.set(0, transition, callback);                                                                                 // 7525
};                                                                                                                     // 7526
                                                                                                                       // 7527
/**                                                                                                                    // 7528
 * Manually sets the opacity state of the fader to the passed-in one. Executes with an optional                        // 7529
 * transition and callback.                                                                                            // 7530
 *                                                                                                                     // 7531
 * @method set                                                                                                         // 7532
 * @param {Number} state A number from zero to one: the amount of opacity you want to set to.                          // 7533
 * @param {Transition} [transition] The transition that coordinates setting to the new state.                          // 7534
 * @param {Function} [callback] A callback that executes once you've finished executing the pulse.                     // 7535
 */                                                                                                                    // 7536
Fader.prototype.set = function set(state, transition, callback) {                                                      // 7537
    this.halt();                                                                                                       // 7538
    this.transitionHelper.set(state, transition, callback);                                                            // 7539
};                                                                                                                     // 7540
                                                                                                                       // 7541
/**                                                                                                                    // 7542
 * Halt the transition                                                                                                 // 7543
 *                                                                                                                     // 7544
 * @method halt                                                                                                        // 7545
 */                                                                                                                    // 7546
Fader.prototype.halt = function halt() {                                                                               // 7547
    this.transitionHelper.halt();                                                                                      // 7548
};                                                                                                                     // 7549
                                                                                                                       // 7550
/**                                                                                                                    // 7551
 * Tells you if your Fader instance is above its visibility threshold.                                                 // 7552
 *                                                                                                                     // 7553
 * @method isVisible                                                                                                   // 7554
 * @return {Boolean} Whether or not your Fader instance is visible.                                                    // 7555
 */                                                                                                                    // 7556
Fader.prototype.isVisible = function isVisible() {                                                                     // 7557
    return (this.transitionHelper.get() > 0);                                                                          // 7558
};                                                                                                                     // 7559
                                                                                                                       // 7560
/**                                                                                                                    // 7561
 * Return render spec for this Modifier, applying to the provided                                                      // 7562
 *    target component.  This is similar to render() for Surfaces.                                                     // 7563
 *                                                                                                                     // 7564
 * @private                                                                                                            // 7565
 * @method modify                                                                                                      // 7566
 *                                                                                                                     // 7567
 * @param {Object} target (already rendered) render spec to                                                            // 7568
 *    which to apply the transform.                                                                                    // 7569
 * @return {Object} render spec for this Modifier, including the                                                       // 7570
 *    provided target                                                                                                  // 7571
 */                                                                                                                    // 7572
Fader.prototype.modify = function modify(target) {                                                                     // 7573
    var currOpacity = this.transitionHelper.get();                                                                     // 7574
    if (this.options.cull && !currOpacity) return undefined;                                                           // 7575
    else return {opacity: currOpacity, target: target};                                                                // 7576
};                                                                                                                     // 7577
                                                                                                                       // 7578
module.exports = Fader;                                                                                                // 7579
},{"../core/OptionsManager":10,"../transitions/Transitionable":88}],45:[function(require,module,exports){              // 7580
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 7581
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 7582
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 7583
 *                                                                                                                     // 7584
 * Owner: david@famo.us                                                                                                // 7585
 * @license MPL 2.0                                                                                                    // 7586
 * @copyright Famous Industries, Inc. 2014                                                                             // 7587
 */                                                                                                                    // 7588
                                                                                                                       // 7589
                                                                                                                       // 7590
                                                                                                                       // 7591
                                                                                                                       // 7592
/**                                                                                                                    // 7593
 * A class to add and remove a chain of modifiers                                                                      // 7594
 *   at a single point in the render tree                                                                              // 7595
 *                                                                                                                     // 7596
 * @class ModifierChain                                                                                                // 7597
 * @constructor                                                                                                        // 7598
 */                                                                                                                    // 7599
function ModifierChain() {                                                                                             // 7600
    this._chain = [];                                                                                                  // 7601
    if (arguments.length) this.addModifier.apply(this, arguments);                                                     // 7602
}                                                                                                                      // 7603
                                                                                                                       // 7604
/**                                                                                                                    // 7605
 * Add a modifier, or comma separated modifiers, to the modifier chain.                                                // 7606
 *                                                                                                                     // 7607
 * @method addModifier                                                                                                 // 7608
 *                                                                                                                     // 7609
 * @param {...Modifier*} varargs args list of Modifiers                                                                // 7610
 */                                                                                                                    // 7611
ModifierChain.prototype.addModifier = function addModifier(varargs) {                                                  // 7612
    Array.prototype.push.apply(this._chain, arguments);                                                                // 7613
};                                                                                                                     // 7614
                                                                                                                       // 7615
/**                                                                                                                    // 7616
 * Remove a modifier from the modifier chain.                                                                          // 7617
 *                                                                                                                     // 7618
 * @method removeModifier                                                                                              // 7619
 *                                                                                                                     // 7620
 * @param {Modifier} modifier                                                                                          // 7621
 */                                                                                                                    // 7622
ModifierChain.prototype.removeModifier = function removeModifier(modifier) {                                           // 7623
    var index = this._chain.indexOf(modifier);                                                                         // 7624
    if (index < 0) return;                                                                                             // 7625
    this._chain.splice(index, 1);                                                                                      // 7626
};                                                                                                                     // 7627
                                                                                                                       // 7628
/**                                                                                                                    // 7629
 * Return render spec for this Modifier, applying to the provided                                                      // 7630
 *    target component.  This is similar to render() for Surfaces.                                                     // 7631
 *                                                                                                                     // 7632
 * @private                                                                                                            // 7633
 * @method modify                                                                                                      // 7634
 *                                                                                                                     // 7635
 * @param {Object} input (already rendered) render spec to                                                             // 7636
 *    which to apply the transform.                                                                                    // 7637
 * @return {Object} render spec for this Modifier, including the                                                       // 7638
 *    provided target                                                                                                  // 7639
 */                                                                                                                    // 7640
ModifierChain.prototype.modify = function modify(input) {                                                              // 7641
    var chain  = this._chain;                                                                                          // 7642
    var result = input;                                                                                                // 7643
    for (var i = 0; i < chain.length; i++) {                                                                           // 7644
        result = chain[i].modify(result);                                                                              // 7645
    }                                                                                                                  // 7646
    return result;                                                                                                     // 7647
};                                                                                                                     // 7648
                                                                                                                       // 7649
module.exports = ModifierChain;                                                                                        // 7650
},{}],46:[function(require,module,exports){                                                                            // 7651
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 7652
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 7653
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 7654
 *                                                                                                                     // 7655
 * Owner: mark@famo.us                                                                                                 // 7656
 * @license MPL 2.0                                                                                                    // 7657
 * @copyright Famous Industries, Inc. 2014                                                                             // 7658
 */                                                                                                                    // 7659
                                                                                                                       // 7660
var Modifier = require('../core/Modifier');                                                                            // 7661
var Transform = require('../core/Transform');                                                                          // 7662
var Transitionable = require('../transitions/Transitionable');                                                         // 7663
var TransitionableTransform = require('../transitions/TransitionableTransform');                                       // 7664
                                                                                                                       // 7665
/**                                                                                                                    // 7666
 *  A collection of visual changes to be                                                                               // 7667
 *    applied to another renderable component, strongly coupled with the state that defines                            // 7668
 *    those changes. This collection includes a                                                                        // 7669
 *    transform matrix, an opacity constant, a size, an origin specifier, and an alignment specifier.                  // 7670
 *    StateModifier objects can be added to any RenderNode or object                                                   // 7671
 *    capable of displaying renderables.  The StateModifier's children and descendants                                 // 7672
 *    are transformed by the amounts specified in the modifier's properties.                                           // 7673
 *                                                                                                                     // 7674
 * @class StateModifier                                                                                                // 7675
 * @constructor                                                                                                        // 7676
 * @param {Object} [options] overrides of default options                                                              // 7677
 * @param {Transform} [options.transform] affine transformation matrix                                                 // 7678
 * @param {Number} [options.opacity]                                                                                   // 7679
 * @param {Array.Number} [options.origin] origin adjustment                                                            // 7680
 * @param {Array.Number} [options.align] align adjustment                                                              // 7681
 * @param {Array.Number} [options.size] size to apply to descendants                                                   // 7682
 * @param {Array.Number} [options.propportions] proportions to apply to descendants                                    // 7683
 */                                                                                                                    // 7684
function StateModifier(options) {                                                                                      // 7685
    this._transformState = new TransitionableTransform(Transform.identity);                                            // 7686
    this._opacityState = new Transitionable(1);                                                                        // 7687
    this._originState = new Transitionable([0, 0]);                                                                    // 7688
    this._alignState = new Transitionable([0, 0]);                                                                     // 7689
    this._sizeState = new Transitionable([0, 0]);                                                                      // 7690
    this._proportionsState = new Transitionable([0, 0]);                                                               // 7691
                                                                                                                       // 7692
    this._modifier = new Modifier({                                                                                    // 7693
        transform: this._transformState,                                                                               // 7694
        opacity: this._opacityState,                                                                                   // 7695
        origin: null,                                                                                                  // 7696
        align: null,                                                                                                   // 7697
        size: null,                                                                                                    // 7698
        proportions: null                                                                                              // 7699
    });                                                                                                                // 7700
                                                                                                                       // 7701
    this._hasOrigin = false;                                                                                           // 7702
    this._hasAlign = false;                                                                                            // 7703
    this._hasSize = false;                                                                                             // 7704
    this._hasProportions = false;                                                                                      // 7705
                                                                                                                       // 7706
    if (options) {                                                                                                     // 7707
        if (options.transform) this.setTransform(options.transform);                                                   // 7708
        if (options.opacity !== undefined) this.setOpacity(options.opacity);                                           // 7709
        if (options.origin) this.setOrigin(options.origin);                                                            // 7710
        if (options.align) this.setAlign(options.align);                                                               // 7711
        if (options.size) this.setSize(options.size);                                                                  // 7712
        if (options.proportions) this.setProportions(options.proportions);                                             // 7713
    }                                                                                                                  // 7714
}                                                                                                                      // 7715
                                                                                                                       // 7716
/**                                                                                                                    // 7717
 * Set the transform matrix of this modifier, either statically or                                                     // 7718
 *   through a provided Transitionable.                                                                                // 7719
 *                                                                                                                     // 7720
 * @method setTransform                                                                                                // 7721
 *                                                                                                                     // 7722
 * @param {Transform} transform Transform to transition to.                                                            // 7723
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7724
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7725
 *    instantaneous.                                                                                                   // 7726
 * @param {Function} [callback] callback to call after transition completes                                            // 7727
 * @return {StateModifier} this                                                                                        // 7728
 */                                                                                                                    // 7729
StateModifier.prototype.setTransform = function setTransform(transform, transition, callback) {                        // 7730
    this._transformState.set(transform, transition, callback);                                                         // 7731
    return this;                                                                                                       // 7732
};                                                                                                                     // 7733
                                                                                                                       // 7734
/**                                                                                                                    // 7735
 * Set the opacity of this modifier, either statically or                                                              // 7736
 *   through a provided Transitionable.                                                                                // 7737
 *                                                                                                                     // 7738
 * @method setOpacity                                                                                                  // 7739
 *                                                                                                                     // 7740
 * @param {Number} opacity Opacity value to transition to.                                                             // 7741
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7742
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7743
 *    instantaneous.                                                                                                   // 7744
 * @param {Function} callback callback to call after transition completes                                              // 7745
 * @return {StateModifier} this                                                                                        // 7746
 */                                                                                                                    // 7747
StateModifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {                              // 7748
    this._opacityState.set(opacity, transition, callback);                                                             // 7749
    return this;                                                                                                       // 7750
};                                                                                                                     // 7751
                                                                                                                       // 7752
/**                                                                                                                    // 7753
 * Set the origin of this modifier, either statically or                                                               // 7754
 *   through a provided Transitionable.                                                                                // 7755
 *                                                                                                                     // 7756
 * @method setOrigin                                                                                                   // 7757
 *                                                                                                                     // 7758
 * @param {Array.Number} origin two element array with values between 0 and 1.                                         // 7759
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7760
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7761
 *    instantaneous.                                                                                                   // 7762
 * @param {Function} callback callback to call after transition completes                                              // 7763
 * @return {StateModifier} this                                                                                        // 7764
 */                                                                                                                    // 7765
StateModifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {                                 // 7766
    if (origin === null) {                                                                                             // 7767
        if (this._hasOrigin) {                                                                                         // 7768
            this._modifier.originFrom(null);                                                                           // 7769
            this._hasOrigin = false;                                                                                   // 7770
        }                                                                                                              // 7771
        return this;                                                                                                   // 7772
    }                                                                                                                  // 7773
    else if (!this._hasOrigin) {                                                                                       // 7774
        this._hasOrigin = true;                                                                                        // 7775
        this._modifier.originFrom(this._originState);                                                                  // 7776
    }                                                                                                                  // 7777
    this._originState.set(origin, transition, callback);                                                               // 7778
    return this;                                                                                                       // 7779
};                                                                                                                     // 7780
                                                                                                                       // 7781
/**                                                                                                                    // 7782
 * Set the alignment of this modifier, either statically or                                                            // 7783
 *   through a provided Transitionable.                                                                                // 7784
 *                                                                                                                     // 7785
 * @method setAlign                                                                                                    // 7786
 *                                                                                                                     // 7787
 * @param {Array.Number} align two element array with values between 0 and 1.                                          // 7788
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7789
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7790
 *    instantaneous.                                                                                                   // 7791
 * @param {Function} callback callback to call after transition completes                                              // 7792
 * @return {StateModifier} this                                                                                        // 7793
 */                                                                                                                    // 7794
StateModifier.prototype.setAlign = function setOrigin(align, transition, callback) {                                   // 7795
    if (align === null) {                                                                                              // 7796
        if (this._hasAlign) {                                                                                          // 7797
            this._modifier.alignFrom(null);                                                                            // 7798
            this._hasAlign = false;                                                                                    // 7799
        }                                                                                                              // 7800
        return this;                                                                                                   // 7801
    }                                                                                                                  // 7802
    else if (!this._hasAlign) {                                                                                        // 7803
        this._hasAlign = true;                                                                                         // 7804
        this._modifier.alignFrom(this._alignState);                                                                    // 7805
    }                                                                                                                  // 7806
    this._alignState.set(align, transition, callback);                                                                 // 7807
    return this;                                                                                                       // 7808
};                                                                                                                     // 7809
                                                                                                                       // 7810
/**                                                                                                                    // 7811
 * Set the size of this modifier, either statically or                                                                 // 7812
 *   through a provided Transitionable.                                                                                // 7813
 *                                                                                                                     // 7814
 * @method setSize                                                                                                     // 7815
 *                                                                                                                     // 7816
 * @param {Array.Number} size two element array of [width, height]                                                     // 7817
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7818
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7819
 *    instantaneous.                                                                                                   // 7820
 * @param {Function} callback callback to call after transition completes                                              // 7821
 * @return {StateModifier} this                                                                                        // 7822
 */                                                                                                                    // 7823
StateModifier.prototype.setSize = function setSize(size, transition, callback) {                                       // 7824
    if (size === null) {                                                                                               // 7825
        if (this._hasSize) {                                                                                           // 7826
            this._modifier.sizeFrom(null);                                                                             // 7827
            this._hasSize = false;                                                                                     // 7828
        }                                                                                                              // 7829
        return this;                                                                                                   // 7830
    }                                                                                                                  // 7831
    else if (!this._hasSize) {                                                                                         // 7832
        this._hasSize = true;                                                                                          // 7833
        this._modifier.sizeFrom(this._sizeState);                                                                      // 7834
    }                                                                                                                  // 7835
    this._sizeState.set(size, transition, callback);                                                                   // 7836
    return this;                                                                                                       // 7837
};                                                                                                                     // 7838
                                                                                                                       // 7839
/**                                                                                                                    // 7840
 * Set the proportions of this modifier, either statically or                                                          // 7841
 *   through a provided Transitionable.                                                                                // 7842
 *                                                                                                                     // 7843
 * @method setProportions                                                                                              // 7844
 *                                                                                                                     // 7845
 * @param {Array.Number} proportions two element array with values between 0 and 1.                                    // 7846
 * @param {Transitionable} transition Valid transitionable object                                                      // 7847
 * @param {Function} callback callback to call after transition completes                                              // 7848
 * @return {StateModifier} this                                                                                        // 7849
 */                                                                                                                    // 7850
StateModifier.prototype.setProportions = function setSize(proportions, transition, callback) {                         // 7851
    if (proportions === null) {                                                                                        // 7852
        if (this._hasProportions) {                                                                                    // 7853
            this._modifier.proportionsFrom(null);                                                                      // 7854
            this._hasProportions = false;                                                                              // 7855
        }                                                                                                              // 7856
        return this;                                                                                                   // 7857
    }                                                                                                                  // 7858
    else if (!this._hasProportions) {                                                                                  // 7859
        this._hasProportions = true;                                                                                   // 7860
        this._modifier.proportionsFrom(this._proportionsState);                                                        // 7861
    }                                                                                                                  // 7862
    this._proportionsState.set(proportions, transition, callback);                                                     // 7863
    return this;                                                                                                       // 7864
};                                                                                                                     // 7865
                                                                                                                       // 7866
/**                                                                                                                    // 7867
 * Stop the transition.                                                                                                // 7868
 *                                                                                                                     // 7869
 * @method halt                                                                                                        // 7870
 */                                                                                                                    // 7871
StateModifier.prototype.halt = function halt() {                                                                       // 7872
    this._transformState.halt();                                                                                       // 7873
    this._opacityState.halt();                                                                                         // 7874
    this._originState.halt();                                                                                          // 7875
    this._alignState.halt();                                                                                           // 7876
    this._sizeState.halt();                                                                                            // 7877
    this._proportionsState.halt();                                                                                     // 7878
};                                                                                                                     // 7879
                                                                                                                       // 7880
/**                                                                                                                    // 7881
 * Get the current state of the transform matrix component.                                                            // 7882
 *                                                                                                                     // 7883
 * @method getTransform                                                                                                // 7884
 * @return {Object} transform provider object                                                                          // 7885
 */                                                                                                                    // 7886
StateModifier.prototype.getTransform = function getTransform() {                                                       // 7887
    return this._transformState.get();                                                                                 // 7888
};                                                                                                                     // 7889
                                                                                                                       // 7890
/**                                                                                                                    // 7891
 * Get the destination state of the transform component.                                                               // 7892
 *                                                                                                                     // 7893
 * @method getFinalTransform                                                                                           // 7894
 * @return {Transform} transform matrix                                                                                // 7895
 */                                                                                                                    // 7896
StateModifier.prototype.getFinalTransform = function getFinalTransform() {                                             // 7897
    return this._transformState.getFinal();                                                                            // 7898
};                                                                                                                     // 7899
                                                                                                                       // 7900
/**                                                                                                                    // 7901
 * Get the current state of the opacity component.                                                                     // 7902
 *                                                                                                                     // 7903
 * @method getOpacity                                                                                                  // 7904
 * @return {Object} opacity provider object                                                                            // 7905
 */                                                                                                                    // 7906
StateModifier.prototype.getOpacity = function getOpacity() {                                                           // 7907
    return this._opacityState.get();                                                                                   // 7908
};                                                                                                                     // 7909
                                                                                                                       // 7910
/**                                                                                                                    // 7911
 * Get the current state of the origin component.                                                                      // 7912
 *                                                                                                                     // 7913
 * @method getOrigin                                                                                                   // 7914
 * @return {Object} origin provider object                                                                             // 7915
 */                                                                                                                    // 7916
StateModifier.prototype.getOrigin = function getOrigin() {                                                             // 7917
    return this._hasOrigin ? this._originState.get() : null;                                                           // 7918
};                                                                                                                     // 7919
                                                                                                                       // 7920
/**                                                                                                                    // 7921
 * Get the current state of the align component.                                                                       // 7922
 *                                                                                                                     // 7923
 * @method getAlign                                                                                                    // 7924
 * @return {Object} align provider object                                                                              // 7925
 */                                                                                                                    // 7926
StateModifier.prototype.getAlign = function getAlign() {                                                               // 7927
    return this._hasAlign ? this._alignState.get() : null;                                                             // 7928
};                                                                                                                     // 7929
                                                                                                                       // 7930
/**                                                                                                                    // 7931
 * Get the current state of the size component.                                                                        // 7932
 *                                                                                                                     // 7933
 * @method getSize                                                                                                     // 7934
 * @return {Object} size provider object                                                                               // 7935
 */                                                                                                                    // 7936
StateModifier.prototype.getSize = function getSize() {                                                                 // 7937
    return this._hasSize ? this._sizeState.get() : null;                                                               // 7938
};                                                                                                                     // 7939
                                                                                                                       // 7940
/**                                                                                                                    // 7941
 * Get the current state of the propportions component.                                                                // 7942
 *                                                                                                                     // 7943
 * @method getProportions                                                                                              // 7944
 * @return {Object} size provider object                                                                               // 7945
 */                                                                                                                    // 7946
StateModifier.prototype.getProportions = function getProportions() {                                                   // 7947
    return this._hasProportions ? this._proportionsState.get() : null;                                                 // 7948
};                                                                                                                     // 7949
                                                                                                                       // 7950
/**                                                                                                                    // 7951
 * Return render spec for this StateModifier, applying to the provided                                                 // 7952
 *    target component.  This is similar to render() for Surfaces.                                                     // 7953
 *                                                                                                                     // 7954
 * @private                                                                                                            // 7955
 * @method modify                                                                                                      // 7956
 *                                                                                                                     // 7957
 * @param {Object} target (already rendered) render spec to                                                            // 7958
 *    which to apply the transform.                                                                                    // 7959
 * @return {Object} render spec for this StateModifier, including the                                                  // 7960
 *    provided target                                                                                                  // 7961
 */                                                                                                                    // 7962
StateModifier.prototype.modify = function modify(target) {                                                             // 7963
    return this._modifier.modify(target);                                                                              // 7964
};                                                                                                                     // 7965
                                                                                                                       // 7966
module.exports = StateModifier;                                                                                        // 7967
},{"../core/Modifier":9,"../core/Transform":15,"../transitions/Transitionable":88,"../transitions/TransitionableTransform":89}],47:[function(require,module,exports){
module.exports = {                                                                                                     // 7969
  Draggable: require('./Draggable'),                                                                                   // 7970
  Fader: require('./Fader'),                                                                                           // 7971
  ModifierChain: require('./ModifierChain'),                                                                           // 7972
  StateModifier: require('./StateModifier')                                                                            // 7973
};                                                                                                                     // 7974
                                                                                                                       // 7975
},{"./Draggable":43,"./Fader":44,"./ModifierChain":45,"./StateModifier":46}],48:[function(require,module,exports){     // 7976
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 7977
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 7978
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 7979
 *                                                                                                                     // 7980
 * @license MPL 2.0                                                                                                    // 7981
 * @copyright Famous Industries, Inc. 2014                                                                             // 7982
 */                                                                                                                    // 7983
var EventHandler = require('../core/EventHandler');                                                                    // 7984
                                                                                                                       // 7985
/**                                                                                                                    // 7986
 * The Physics Engine is responsible for mediating bodies with their                                                   // 7987
 *   interaction with forces and constraints (agents). Specifically, it                                                // 7988
 *   is responsible for:                                                                                               // 7989
 *                                                                                                                     // 7990
 *   - adding and removing bodies                                                                                      // 7991
 *   - updating a body's state over time                                                                               // 7992
 *   - attaching and detaching agents                                                                                  // 7993
 *   - sleeping upon equillibrium and waking upon excitation                                                           // 7994
 *                                                                                                                     // 7995
 * @class PhysicsEngine                                                                                                // 7996
 * @constructor                                                                                                        // 7997
 * @param options {Object} options                                                                                     // 7998
 */                                                                                                                    // 7999
function PhysicsEngine(options) {                                                                                      // 8000
    this.options = Object.create(PhysicsEngine.DEFAULT_OPTIONS);                                                       // 8001
    if (options) this.setOptions(options);                                                                             // 8002
                                                                                                                       // 8003
    this._particles      = [];   //list of managed particles                                                           // 8004
    this._bodies         = [];   //list of managed bodies                                                              // 8005
    this._agentData      = {};   //hash of managed agent data                                                          // 8006
    this._forces         = [];   //list of Ids of agents that are forces                                               // 8007
    this._constraints    = [];   //list of Ids of agents that are constraints                                          // 8008
                                                                                                                       // 8009
    this._buffer         = 0.0;                                                                                        // 8010
    this._prevTime       = now();                                                                                      // 8011
    this._isSleeping     = false;                                                                                      // 8012
    this._eventHandler   = null;                                                                                       // 8013
    this._currAgentId    = 0;                                                                                          // 8014
    this._hasBodies      = false;                                                                                      // 8015
    this._eventHandler   = null;                                                                                       // 8016
}                                                                                                                      // 8017
                                                                                                                       // 8018
/** const */                                                                                                           // 8019
var TIMESTEP = 17;                                                                                                     // 8020
var MIN_TIME_STEP = 1000 / 120;                                                                                        // 8021
var MAX_TIME_STEP = 17;                                                                                                // 8022
                                                                                                                       // 8023
var now = Date.now;                                                                                                    // 8024
                                                                                                                       // 8025
// Catalogue of outputted events                                                                                       // 8026
var _events = {                                                                                                        // 8027
    start : 'start',                                                                                                   // 8028
    update : 'update',                                                                                                 // 8029
    end : 'end'                                                                                                        // 8030
};                                                                                                                     // 8031
                                                                                                                       // 8032
/**                                                                                                                    // 8033
 * @property PhysicsEngine.DEFAULT_OPTIONS                                                                             // 8034
 * @type Object                                                                                                        // 8035
 * @protected                                                                                                          // 8036
 * @static                                                                                                             // 8037
 */                                                                                                                    // 8038
PhysicsEngine.DEFAULT_OPTIONS = {                                                                                      // 8039
                                                                                                                       // 8040
    /**                                                                                                                // 8041
     * The number of iterations the engine takes to resolve constraints                                                // 8042
     * @attribute constraintSteps                                                                                      // 8043
     * @type Number                                                                                                    // 8044
     */                                                                                                                // 8045
    constraintSteps : 1,                                                                                               // 8046
                                                                                                                       // 8047
    /**                                                                                                                // 8048
     * The energy threshold required for the Physics Engine to update                                                  // 8049
     * @attribute sleepTolerance                                                                                       // 8050
     * @type Number                                                                                                    // 8051
     */                                                                                                                // 8052
    sleepTolerance : 1e-7,                                                                                             // 8053
                                                                                                                       // 8054
    /**                                                                                                                // 8055
     * The maximum velocity magnitude of a physics body                                                                // 8056
     *      Range : [0, Infinity]                                                                                      // 8057
     * @attribute velocityCap                                                                                          // 8058
     * @type Number                                                                                                    // 8059
     */                                                                                                                // 8060
    velocityCap : undefined,                                                                                           // 8061
                                                                                                                       // 8062
    /**                                                                                                                // 8063
     * The maximum angular velocity magnitude of a physics body                                                        // 8064
     *      Range : [0, Infinity]                                                                                      // 8065
     * @attribute angularVelocityCap                                                                                   // 8066
     * @type Number                                                                                                    // 8067
     */                                                                                                                // 8068
    angularVelocityCap : undefined                                                                                     // 8069
};                                                                                                                     // 8070
                                                                                                                       // 8071
/**                                                                                                                    // 8072
 * Options setter                                                                                                      // 8073
 *                                                                                                                     // 8074
 * @method setOptions                                                                                                  // 8075
 * @param opts {Object}                                                                                                // 8076
 */                                                                                                                    // 8077
PhysicsEngine.prototype.setOptions = function setOptions(opts) {                                                       // 8078
    for (var key in opts) if (this.options[key]) this.options[key] = opts[key];                                        // 8079
};                                                                                                                     // 8080
                                                                                                                       // 8081
/**                                                                                                                    // 8082
 * Method to add a physics body to the engine. Necessary to update the                                                 // 8083
 *   body over time.                                                                                                   // 8084
 *                                                                                                                     // 8085
 * @method addBody                                                                                                     // 8086
 * @param body {Body}                                                                                                  // 8087
 * @return body {Body}                                                                                                 // 8088
 */                                                                                                                    // 8089
PhysicsEngine.prototype.addBody = function addBody(body) {                                                             // 8090
    body._engine = this;                                                                                               // 8091
    if (body.isBody) {                                                                                                 // 8092
        this._bodies.push(body);                                                                                       // 8093
        this._hasBodies = true;                                                                                        // 8094
    }                                                                                                                  // 8095
    else this._particles.push(body);                                                                                   // 8096
    body.on('start', this.wake.bind(this));                                                                            // 8097
    return body;                                                                                                       // 8098
};                                                                                                                     // 8099
                                                                                                                       // 8100
/**                                                                                                                    // 8101
 * Remove a body from the engine. Detaches body from all forces and                                                    // 8102
 *   constraints.                                                                                                      // 8103
 *                                                                                                                     // 8104
 * TODO: Fix for in loop                                                                                               // 8105
 *                                                                                                                     // 8106
 * @method removeBody                                                                                                  // 8107
 * @param body {Body}                                                                                                  // 8108
 */                                                                                                                    // 8109
PhysicsEngine.prototype.removeBody = function removeBody(body) {                                                       // 8110
    var array = (body.isBody) ? this._bodies : this._particles;                                                        // 8111
    var index = array.indexOf(body);                                                                                   // 8112
    if (index > -1) {                                                                                                  // 8113
        for (var agent in this._agentData) this.detachFrom(agent.id, body);                                            // 8114
        array.splice(index,1);                                                                                         // 8115
    }                                                                                                                  // 8116
    if (this.getBodies().length === 0) this._hasBodies = false;                                                        // 8117
};                                                                                                                     // 8118
                                                                                                                       // 8119
function _mapAgentArray(agent) {                                                                                       // 8120
    if (agent.applyForce)      return this._forces;                                                                    // 8121
    if (agent.applyConstraint) return this._constraints;                                                               // 8122
}                                                                                                                      // 8123
                                                                                                                       // 8124
function _attachOne(agent, targets, source) {                                                                          // 8125
    if (targets === undefined) targets = this.getParticlesAndBodies();                                                 // 8126
    if (!(targets instanceof Array)) targets = [targets];                                                              // 8127
                                                                                                                       // 8128
    agent.on('change', this.wake.bind(this));                                                                          // 8129
                                                                                                                       // 8130
    this._agentData[this._currAgentId] = {                                                                             // 8131
        agent   : agent,                                                                                               // 8132
        id      : this._currAgentId,                                                                                   // 8133
        targets : targets,                                                                                             // 8134
        source  : source                                                                                               // 8135
    };                                                                                                                 // 8136
                                                                                                                       // 8137
    _mapAgentArray.call(this, agent).push(this._currAgentId);                                                          // 8138
    return this._currAgentId++;                                                                                        // 8139
}                                                                                                                      // 8140
                                                                                                                       // 8141
/**                                                                                                                    // 8142
 * Attaches a force or constraint to a Body. Returns an AgentId of the                                                 // 8143
 *   attached agent which can be used to detach the agent.                                                             // 8144
 *                                                                                                                     // 8145
 * @method attach                                                                                                      // 8146
 * @param agents {Agent|Array.Agent} A force, constraint, or array of them.                                            // 8147
 * @param [targets=All] {Body|Array.Body} The Body or Bodies affected by the agent                                     // 8148
 * @param [source] {Body} The source of the agent                                                                      // 8149
 * @return AgentId {Number}                                                                                            // 8150
 */                                                                                                                    // 8151
PhysicsEngine.prototype.attach = function attach(agents, targets, source) {                                            // 8152
    this.wake();                                                                                                       // 8153
                                                                                                                       // 8154
    if (agents instanceof Array) {                                                                                     // 8155
        var agentIDs = [];                                                                                             // 8156
        for (var i = 0; i < agents.length; i++)                                                                        // 8157
            agentIDs[i] = _attachOne.call(this, agents[i], targets, source);                                           // 8158
        return agentIDs;                                                                                               // 8159
    }                                                                                                                  // 8160
    else return _attachOne.call(this, agents, targets, source);                                                        // 8161
};                                                                                                                     // 8162
                                                                                                                       // 8163
/**                                                                                                                    // 8164
 * Append a body to the targets of a previously defined physics agent.                                                 // 8165
 *                                                                                                                     // 8166
 * @method attachTo                                                                                                    // 8167
 * @param agentID {AgentId} The agentId of a previously defined agent                                                  // 8168
 * @param target {Body} The Body affected by the agent                                                                 // 8169
 */                                                                                                                    // 8170
PhysicsEngine.prototype.attachTo = function attachTo(agentID, target) {                                                // 8171
    _getAgentData.call(this, agentID).targets.push(target);                                                            // 8172
};                                                                                                                     // 8173
                                                                                                                       // 8174
/**                                                                                                                    // 8175
 * Undoes PhysicsEngine.attach. Removes an agent and its associated                                                    // 8176
 *   effect on its affected Bodies.                                                                                    // 8177
 *                                                                                                                     // 8178
 * @method detach                                                                                                      // 8179
 * @param id {AgentId} The agentId of a previously defined agent                                                       // 8180
 */                                                                                                                    // 8181
PhysicsEngine.prototype.detach = function detach(id) {                                                                 // 8182
    // detach from forces/constraints array                                                                            // 8183
    var agent = this.getAgent(id);                                                                                     // 8184
    var agentArray = _mapAgentArray.call(this, agent);                                                                 // 8185
    var index = agentArray.indexOf(id);                                                                                // 8186
    agentArray.splice(index,1);                                                                                        // 8187
                                                                                                                       // 8188
    // detach agents array                                                                                             // 8189
    delete this._agentData[id];                                                                                        // 8190
};                                                                                                                     // 8191
                                                                                                                       // 8192
/**                                                                                                                    // 8193
 * Remove a single Body from a previously defined agent.                                                               // 8194
 *                                                                                                                     // 8195
 * @method detach                                                                                                      // 8196
 * @param id {AgentId} The agentId of a previously defined agent                                                       // 8197
 * @param target {Body} The body to remove from the agent                                                              // 8198
 */                                                                                                                    // 8199
PhysicsEngine.prototype.detachFrom = function detachFrom(id, target) {                                                 // 8200
    var boundAgent = _getAgentData.call(this, id);                                                                     // 8201
    if (boundAgent.source === target) this.detach(id);                                                                 // 8202
    else {                                                                                                             // 8203
        var targets = boundAgent.targets;                                                                              // 8204
        var index = targets.indexOf(target);                                                                           // 8205
        if (index > -1) targets.splice(index,1);                                                                       // 8206
    }                                                                                                                  // 8207
};                                                                                                                     // 8208
                                                                                                                       // 8209
/**                                                                                                                    // 8210
 * A convenience method to give the Physics Engine a clean slate of                                                    // 8211
 * agents. Preserves all added Body objects.                                                                           // 8212
 *                                                                                                                     // 8213
 * @method detachAll                                                                                                   // 8214
 */                                                                                                                    // 8215
PhysicsEngine.prototype.detachAll = function detachAll() {                                                             // 8216
    this._agentData     = {};                                                                                          // 8217
    this._forces        = [];                                                                                          // 8218
    this._constraints   = [];                                                                                          // 8219
    this._currAgentId   = 0;                                                                                           // 8220
};                                                                                                                     // 8221
                                                                                                                       // 8222
function _getAgentData(id) {                                                                                           // 8223
    return this._agentData[id];                                                                                        // 8224
}                                                                                                                      // 8225
                                                                                                                       // 8226
/**                                                                                                                    // 8227
 * Returns the corresponding agent given its agentId.                                                                  // 8228
 *                                                                                                                     // 8229
 * @method getAgent                                                                                                    // 8230
 * @param id {AgentId}                                                                                                 // 8231
 */                                                                                                                    // 8232
PhysicsEngine.prototype.getAgent = function getAgent(id) {                                                             // 8233
    return _getAgentData.call(this, id).agent;                                                                         // 8234
};                                                                                                                     // 8235
                                                                                                                       // 8236
/**                                                                                                                    // 8237
 * Returns all particles that are currently managed by the Physics Engine.                                             // 8238
 *                                                                                                                     // 8239
 * @method getParticles                                                                                                // 8240
 * @return particles {Array.Particles}                                                                                 // 8241
 */                                                                                                                    // 8242
PhysicsEngine.prototype.getParticles = function getParticles() {                                                       // 8243
    return this._particles;                                                                                            // 8244
};                                                                                                                     // 8245
                                                                                                                       // 8246
/**                                                                                                                    // 8247
 * Returns all bodies, except particles, that are currently managed by the Physics Engine.                             // 8248
 *                                                                                                                     // 8249
 * @method getBodies                                                                                                   // 8250
 * @return bodies {Array.Bodies}                                                                                       // 8251
 */                                                                                                                    // 8252
PhysicsEngine.prototype.getBodies = function getBodies() {                                                             // 8253
    return this._bodies;                                                                                               // 8254
};                                                                                                                     // 8255
                                                                                                                       // 8256
/**                                                                                                                    // 8257
 * Returns all bodies that are currently managed by the Physics Engine.                                                // 8258
 *                                                                                                                     // 8259
 * @method getBodies                                                                                                   // 8260
 * @return bodies {Array.Bodies}                                                                                       // 8261
 */                                                                                                                    // 8262
PhysicsEngine.prototype.getParticlesAndBodies = function getParticlesAndBodies() {                                     // 8263
    return this.getParticles().concat(this.getBodies());                                                               // 8264
};                                                                                                                     // 8265
                                                                                                                       // 8266
/**                                                                                                                    // 8267
 * Iterates over every Particle and applies a function whose first                                                     // 8268
 *   argument is the Particle                                                                                          // 8269
 *                                                                                                                     // 8270
 * @method forEachParticle                                                                                             // 8271
 * @param fn {Function} Function to iterate over                                                                       // 8272
 * @param [dt] {Number} Delta time                                                                                     // 8273
 */                                                                                                                    // 8274
PhysicsEngine.prototype.forEachParticle = function forEachParticle(fn, dt) {                                           // 8275
    var particles = this.getParticles();                                                                               // 8276
    for (var index = 0, len = particles.length; index < len; index++)                                                  // 8277
        fn.call(this, particles[index], dt);                                                                           // 8278
};                                                                                                                     // 8279
                                                                                                                       // 8280
/**                                                                                                                    // 8281
 * Iterates over every Body that isn't a Particle and applies                                                          // 8282
 *   a function whose first argument is the Body                                                                       // 8283
 *                                                                                                                     // 8284
 * @method forEachBody                                                                                                 // 8285
 * @param fn {Function} Function to iterate over                                                                       // 8286
 * @param [dt] {Number} Delta time                                                                                     // 8287
 */                                                                                                                    // 8288
PhysicsEngine.prototype.forEachBody = function forEachBody(fn, dt) {                                                   // 8289
    if (!this._hasBodies) return;                                                                                      // 8290
    var bodies = this.getBodies();                                                                                     // 8291
    for (var index = 0, len = bodies.length; index < len; index++)                                                     // 8292
        fn.call(this, bodies[index], dt);                                                                              // 8293
};                                                                                                                     // 8294
                                                                                                                       // 8295
/**                                                                                                                    // 8296
 * Iterates over every Body and applies a function whose first                                                         // 8297
 *   argument is the Body                                                                                              // 8298
 *                                                                                                                     // 8299
 * @method forEach                                                                                                     // 8300
 * @param fn {Function} Function to iterate over                                                                       // 8301
 * @param [dt] {Number} Delta time                                                                                     // 8302
 */                                                                                                                    // 8303
PhysicsEngine.prototype.forEach = function forEach(fn, dt) {                                                           // 8304
    this.forEachParticle(fn, dt);                                                                                      // 8305
    this.forEachBody(fn, dt);                                                                                          // 8306
};                                                                                                                     // 8307
                                                                                                                       // 8308
function _updateForce(index) {                                                                                         // 8309
    var boundAgent = _getAgentData.call(this, this._forces[index]);                                                    // 8310
    boundAgent.agent.applyForce(boundAgent.targets, boundAgent.source);                                                // 8311
}                                                                                                                      // 8312
                                                                                                                       // 8313
function _updateForces() {                                                                                             // 8314
    for (var index = this._forces.length - 1; index > -1; index--)                                                     // 8315
        _updateForce.call(this, index);                                                                                // 8316
}                                                                                                                      // 8317
                                                                                                                       // 8318
function _updateConstraint(index, dt) {                                                                                // 8319
    var boundAgent = this._agentData[this._constraints[index]];                                                        // 8320
    return boundAgent.agent.applyConstraint(boundAgent.targets, boundAgent.source, dt);                                // 8321
}                                                                                                                      // 8322
                                                                                                                       // 8323
function _updateConstraints(dt) {                                                                                      // 8324
    var iteration = 0;                                                                                                 // 8325
    while (iteration < this.options.constraintSteps) {                                                                 // 8326
        for (var index = this._constraints.length - 1; index > -1; index--)                                            // 8327
            _updateConstraint.call(this, index, dt);                                                                   // 8328
        iteration++;                                                                                                   // 8329
    }                                                                                                                  // 8330
}                                                                                                                      // 8331
                                                                                                                       // 8332
function _updateVelocities(body, dt) {                                                                                 // 8333
    body.integrateVelocity(dt);                                                                                        // 8334
    if (this.options.velocityCap)                                                                                      // 8335
        body.velocity.cap(this.options.velocityCap).put(body.velocity);                                                // 8336
}                                                                                                                      // 8337
                                                                                                                       // 8338
function _updateAngularVelocities(body, dt) {                                                                          // 8339
    body.integrateAngularMomentum(dt);                                                                                 // 8340
    body.updateAngularVelocity();                                                                                      // 8341
    if (this.options.angularVelocityCap)                                                                               // 8342
        body.angularVelocity.cap(this.options.angularVelocityCap).put(body.angularVelocity);                           // 8343
}                                                                                                                      // 8344
                                                                                                                       // 8345
function _updateOrientations(body, dt) {                                                                               // 8346
    body.integrateOrientation(dt);                                                                                     // 8347
}                                                                                                                      // 8348
                                                                                                                       // 8349
function _updatePositions(body, dt) {                                                                                  // 8350
    body.integratePosition(dt);                                                                                        // 8351
    body.emit(_events.update, body);                                                                                   // 8352
}                                                                                                                      // 8353
                                                                                                                       // 8354
function _integrate(dt) {                                                                                              // 8355
    _updateForces.call(this, dt);                                                                                      // 8356
    this.forEach(_updateVelocities, dt);                                                                               // 8357
    this.forEachBody(_updateAngularVelocities, dt);                                                                    // 8358
    _updateConstraints.call(this, dt);                                                                                 // 8359
    this.forEachBody(_updateOrientations, dt);                                                                         // 8360
    this.forEach(_updatePositions, dt);                                                                                // 8361
}                                                                                                                      // 8362
                                                                                                                       // 8363
function _getParticlesEnergy() {                                                                                       // 8364
    var energy = 0.0;                                                                                                  // 8365
    var particleEnergy = 0.0;                                                                                          // 8366
    this.forEach(function(particle) {                                                                                  // 8367
        particleEnergy = particle.getEnergy();                                                                         // 8368
        energy += particleEnergy;                                                                                      // 8369
    });                                                                                                                // 8370
    return energy;                                                                                                     // 8371
}                                                                                                                      // 8372
                                                                                                                       // 8373
function _getAgentsEnergy() {                                                                                          // 8374
    var energy = 0;                                                                                                    // 8375
    for (var id in this._agentData)                                                                                    // 8376
        energy += this.getAgentEnergy(id);                                                                             // 8377
    return energy;                                                                                                     // 8378
}                                                                                                                      // 8379
                                                                                                                       // 8380
/**                                                                                                                    // 8381
 * Calculates the potential energy of an agent, like a spring, by its Id                                               // 8382
 *                                                                                                                     // 8383
 * @method getAgentEnergy                                                                                              // 8384
 * @param agentId {Number} The attached agent Id                                                                       // 8385
 * @return energy {Number}                                                                                             // 8386
 */                                                                                                                    // 8387
PhysicsEngine.prototype.getAgentEnergy = function(agentId) {                                                           // 8388
    var agentData = _getAgentData.call(this, agentId);                                                                 // 8389
    return agentData.agent.getEnergy(agentData.targets, agentData.source);                                             // 8390
};                                                                                                                     // 8391
                                                                                                                       // 8392
/**                                                                                                                    // 8393
 * Calculates the kinetic energy of all Body objects and potential energy                                              // 8394
 *   of all attached agents.                                                                                           // 8395
 *                                                                                                                     // 8396
 * TODO: implement.                                                                                                    // 8397
 * @method getEnergy                                                                                                   // 8398
 * @return energy {Number}                                                                                             // 8399
 */                                                                                                                    // 8400
PhysicsEngine.prototype.getEnergy = function getEnergy() {                                                             // 8401
    return _getParticlesEnergy.call(this) + _getAgentsEnergy.call(this);                                               // 8402
};                                                                                                                     // 8403
                                                                                                                       // 8404
/**                                                                                                                    // 8405
 * Updates all Body objects managed by the physics engine over the                                                     // 8406
 *   time duration since the last time step was called.                                                                // 8407
 *                                                                                                                     // 8408
 * @method step                                                                                                        // 8409
 */                                                                                                                    // 8410
PhysicsEngine.prototype.step = function step() {                                                                       // 8411
    if (this.isSleeping()) return;                                                                                     // 8412
                                                                                                                       // 8413
    //set current frame's time                                                                                         // 8414
    var currTime = now();                                                                                              // 8415
                                                                                                                       // 8416
    //milliseconds elapsed since last frame                                                                            // 8417
    var dtFrame = currTime - this._prevTime;                                                                           // 8418
                                                                                                                       // 8419
    this._prevTime = currTime;                                                                                         // 8420
                                                                                                                       // 8421
    if (dtFrame < MIN_TIME_STEP) return;                                                                               // 8422
    if (dtFrame > MAX_TIME_STEP) dtFrame = MAX_TIME_STEP;                                                              // 8423
                                                                                                                       // 8424
    //robust integration                                                                                               // 8425
//        this._buffer += dtFrame;                                                                                     // 8426
//        while (this._buffer > this._timestep){                                                                       // 8427
//            _integrate.call(this, this._timestep);                                                                   // 8428
//            this._buffer -= this._timestep;                                                                          // 8429
//        };                                                                                                           // 8430
//        _integrate.call(this, this._buffer);                                                                         // 8431
//        this._buffer = 0.0;                                                                                          // 8432
                                                                                                                       // 8433
    _integrate.call(this, TIMESTEP);                                                                                   // 8434
                                                                                                                       // 8435
    this.emit(_events.update, this);                                                                                   // 8436
                                                                                                                       // 8437
    if (this.getEnergy() < this.options.sleepTolerance) this.sleep();                                                  // 8438
};                                                                                                                     // 8439
                                                                                                                       // 8440
/**                                                                                                                    // 8441
 * Tells whether the Physics Engine is sleeping or awake.                                                              // 8442
 *                                                                                                                     // 8443
 * @method isSleeping                                                                                                  // 8444
 * @return {Boolean}                                                                                                   // 8445
 */                                                                                                                    // 8446
PhysicsEngine.prototype.isSleeping = function isSleeping() {                                                           // 8447
    return this._isSleeping;                                                                                           // 8448
};                                                                                                                     // 8449
                                                                                                                       // 8450
/**                                                                                                                    // 8451
 * Tells whether the Physics Engine is sleeping or awake.                                                              // 8452
 *                                                                                                                     // 8453
 * @method isActive                                                                                                    // 8454
 * @return {Boolean}                                                                                                   // 8455
 */                                                                                                                    // 8456
PhysicsEngine.prototype.isActive = function isSleeping() {                                                             // 8457
    return !this._isSleeping;                                                                                          // 8458
};                                                                                                                     // 8459
                                                                                                                       // 8460
/**                                                                                                                    // 8461
 * Stops the Physics Engine update loop. Emits an 'end' event.                                                         // 8462
 *                                                                                                                     // 8463
 * @method sleep                                                                                                       // 8464
 */                                                                                                                    // 8465
PhysicsEngine.prototype.sleep = function sleep() {                                                                     // 8466
    if (this._isSleeping) return;                                                                                      // 8467
    this.forEach(function(body) {                                                                                      // 8468
        body.sleep();                                                                                                  // 8469
    });                                                                                                                // 8470
    this.emit(_events.end, this);                                                                                      // 8471
    this._isSleeping = true;                                                                                           // 8472
};                                                                                                                     // 8473
                                                                                                                       // 8474
/**                                                                                                                    // 8475
 * Restarts the Physics Engine update loop. Emits an 'start' event.                                                    // 8476
 *                                                                                                                     // 8477
 * @method wake                                                                                                        // 8478
 */                                                                                                                    // 8479
PhysicsEngine.prototype.wake = function wake() {                                                                       // 8480
    if (!this._isSleeping) return;                                                                                     // 8481
    this._prevTime = now();                                                                                            // 8482
    this.emit(_events.start, this);                                                                                    // 8483
    this._isSleeping = false;                                                                                          // 8484
};                                                                                                                     // 8485
                                                                                                                       // 8486
PhysicsEngine.prototype.emit = function emit(type, data) {                                                             // 8487
    if (this._eventHandler === null) return;                                                                           // 8488
    this._eventHandler.emit(type, data);                                                                               // 8489
};                                                                                                                     // 8490
                                                                                                                       // 8491
PhysicsEngine.prototype.on = function on(event, fn) {                                                                  // 8492
    if (this._eventHandler === null) this._eventHandler = new EventHandler();                                          // 8493
    this._eventHandler.on(event, fn);                                                                                  // 8494
};                                                                                                                     // 8495
                                                                                                                       // 8496
module.exports = PhysicsEngine;                                                                                        // 8497
},{"../core/EventHandler":7}],49:[function(require,module,exports){                                                    // 8498
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8499
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8500
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8501
 *                                                                                                                     // 8502
 * Owner: david@famo.us                                                                                                // 8503
 * @license MPL 2.0                                                                                                    // 8504
 * @copyright Famous Industries, Inc. 2014                                                                             // 8505
 */                                                                                                                    // 8506
                                                                                                                       // 8507
var Particle = require('./Particle');                                                                                  // 8508
var Transform = require('../../core/Transform');                                                                       // 8509
var Vector = require('../../math/Vector');                                                                             // 8510
var Quaternion = require('../../math/Quaternion');                                                                     // 8511
var Matrix = require('../../math/Matrix');                                                                             // 8512
var Integrator = require('../integrators/SymplecticEuler');                                                            // 8513
                                                                                                                       // 8514
/**                                                                                                                    // 8515
 * A unit controlled by the physics engine which extends the zero-dimensional                                          // 8516
 *   Particle to include geometry. In addition to maintaining the state                                                // 8517
 *   of a Particle its state includes orientation, angular velocity                                                    // 8518
 *   and angular momentum and responds to torque forces.                                                               // 8519
 *                                                                                                                     // 8520
 * @class Body                                                                                                         // 8521
 * @extends Particle                                                                                                   // 8522
 * @constructor                                                                                                        // 8523
 */                                                                                                                    // 8524
function Body(options) {                                                                                               // 8525
    Particle.call(this, options);                                                                                      // 8526
    options = options || {};                                                                                           // 8527
                                                                                                                       // 8528
    this.orientation     = new Quaternion();                                                                           // 8529
    this.angularVelocity = new Vector();                                                                               // 8530
    this.angularMomentum = new Vector();                                                                               // 8531
    this.torque          = new Vector();                                                                               // 8532
                                                                                                                       // 8533
    if (options.orientation)     this.orientation.set(options.orientation);                                            // 8534
    if (options.angularVelocity) this.angularVelocity.set(options.angularVelocity);                                    // 8535
    if (options.angularMomentum) this.angularMomentum.set(options.angularMomentum);                                    // 8536
    if (options.torque)          this.torque.set(options.torque);                                                      // 8537
                                                                                                                       // 8538
    this.angularVelocity.w = 0;        //quaternify the angular velocity                                               // 8539
    this.setMomentsOfInertia();                                                                                        // 8540
                                                                                                                       // 8541
    // registers                                                                                                       // 8542
    this.pWorld = new Vector();        //placeholder for world space position                                          // 8543
}                                                                                                                      // 8544
                                                                                                                       // 8545
Body.DEFAULT_OPTIONS = Particle.DEFAULT_OPTIONS;                                                                       // 8546
Body.DEFAULT_OPTIONS.orientation = [0, 0, 0, 1];                                                                       // 8547
Body.DEFAULT_OPTIONS.angularVelocity = [0, 0, 0];                                                                      // 8548
                                                                                                                       // 8549
Body.prototype = Object.create(Particle.prototype);                                                                    // 8550
Body.prototype.constructor = Body;                                                                                     // 8551
                                                                                                                       // 8552
Body.prototype.isBody = true;                                                                                          // 8553
                                                                                                                       // 8554
Body.prototype.setMass = function setMass() {                                                                          // 8555
    Particle.prototype.setMass.apply(this, arguments);                                                                 // 8556
    this.setMomentsOfInertia();                                                                                        // 8557
};                                                                                                                     // 8558
                                                                                                                       // 8559
/**                                                                                                                    // 8560
 * Setter for moment of inertia, which is necessary to give proper                                                     // 8561
 *   angular inertia depending on the geometry of the body.                                                            // 8562
 *                                                                                                                     // 8563
 * @method setMomentsOfInertia                                                                                         // 8564
 */                                                                                                                    // 8565
Body.prototype.setMomentsOfInertia = function setMomentsOfInertia() {                                                  // 8566
    this.inertia = new Matrix();                                                                                       // 8567
    this.inverseInertia = new Matrix();                                                                                // 8568
};                                                                                                                     // 8569
                                                                                                                       // 8570
/**                                                                                                                    // 8571
 * Update the angular velocity from the angular momentum state.                                                        // 8572
 *                                                                                                                     // 8573
 * @method updateAngularVelocity                                                                                       // 8574
 */                                                                                                                    // 8575
Body.prototype.updateAngularVelocity = function updateAngularVelocity() {                                              // 8576
    this.angularVelocity.set(this.inverseInertia.vectorMultiply(this.angularMomentum));                                // 8577
};                                                                                                                     // 8578
                                                                                                                       // 8579
/**                                                                                                                    // 8580
 * Determine world coordinates from the local coordinate system. Useful                                                // 8581
 *   if the Body has rotated in space.                                                                                 // 8582
 *                                                                                                                     // 8583
 * @method toWorldCoordinates                                                                                          // 8584
 * @param localPosition {Vector} local coordinate vector                                                               // 8585
 * @return global coordinate vector {Vector}                                                                           // 8586
 */                                                                                                                    // 8587
Body.prototype.toWorldCoordinates = function toWorldCoordinates(localPosition) {                                       // 8588
    return this.pWorld.set(this.orientation.rotateVector(localPosition));                                              // 8589
};                                                                                                                     // 8590
                                                                                                                       // 8591
/**                                                                                                                    // 8592
 * Calculates the kinetic and intertial energy of a body.                                                              // 8593
 *                                                                                                                     // 8594
 * @method getEnergy                                                                                                   // 8595
 * @return energy {Number}                                                                                             // 8596
 */                                                                                                                    // 8597
Body.prototype.getEnergy = function getEnergy() {                                                                      // 8598
    return Particle.prototype.getEnergy.call(this)                                                                     // 8599
        + 0.5 * this.inertia.vectorMultiply(this.angularVelocity).dot(this.angularVelocity);                           // 8600
};                                                                                                                     // 8601
                                                                                                                       // 8602
/**                                                                                                                    // 8603
 * Extends Particle.reset to reset orientation, angular velocity                                                       // 8604
 *   and angular momentum.                                                                                             // 8605
 *                                                                                                                     // 8606
 * @method reset                                                                                                       // 8607
 * @param [p] {Array|Vector} position                                                                                  // 8608
 * @param [v] {Array|Vector} velocity                                                                                  // 8609
 * @param [q] {Array|Quaternion} orientation                                                                           // 8610
 * @param [L] {Array|Vector} angular momentum                                                                          // 8611
 */                                                                                                                    // 8612
Body.prototype.reset = function reset(p, v, q, L) {                                                                    // 8613
    Particle.prototype.reset.call(this, p, v);                                                                         // 8614
    this.angularVelocity.clear();                                                                                      // 8615
    this.setOrientation(q || [1,0,0,0]);                                                                               // 8616
    this.setAngularMomentum(L || [0,0,0]);                                                                             // 8617
};                                                                                                                     // 8618
                                                                                                                       // 8619
/**                                                                                                                    // 8620
 * Setter for orientation                                                                                              // 8621
 *                                                                                                                     // 8622
 * @method setOrientation                                                                                              // 8623
 * @param q {Array|Quaternion} orientation                                                                             // 8624
 */                                                                                                                    // 8625
Body.prototype.setOrientation = function setOrientation(q) {                                                           // 8626
    this.orientation.set(q);                                                                                           // 8627
};                                                                                                                     // 8628
                                                                                                                       // 8629
/**                                                                                                                    // 8630
 * Setter for angular velocity                                                                                         // 8631
 *                                                                                                                     // 8632
 * @method setAngularVelocity                                                                                          // 8633
 * @param w {Array|Vector} angular velocity                                                                            // 8634
 */                                                                                                                    // 8635
Body.prototype.setAngularVelocity = function setAngularVelocity(w) {                                                   // 8636
    this.wake();                                                                                                       // 8637
    this.angularVelocity.set(w);                                                                                       // 8638
};                                                                                                                     // 8639
                                                                                                                       // 8640
/**                                                                                                                    // 8641
 * Setter for angular momentum                                                                                         // 8642
 *                                                                                                                     // 8643
 * @method setAngularMomentum                                                                                          // 8644
 * @param L {Array|Vector} angular momentum                                                                            // 8645
 */                                                                                                                    // 8646
Body.prototype.setAngularMomentum = function setAngularMomentum(L) {                                                   // 8647
    this.wake();                                                                                                       // 8648
    this.angularMomentum.set(L);                                                                                       // 8649
};                                                                                                                     // 8650
                                                                                                                       // 8651
/**                                                                                                                    // 8652
 * Extends Particle.applyForce with an optional argument                                                               // 8653
 *   to apply the force at an off-centered location, resulting in a torque.                                            // 8654
 *                                                                                                                     // 8655
 * @method applyForce                                                                                                  // 8656
 * @param force {Vector} force                                                                                         // 8657
 * @param [location] {Vector} off-center location on the body                                                          // 8658
 */                                                                                                                    // 8659
Body.prototype.applyForce = function applyForce(force, location) {                                                     // 8660
    Particle.prototype.applyForce.call(this, force);                                                                   // 8661
    if (location !== undefined) this.applyTorque(location.cross(force));                                               // 8662
};                                                                                                                     // 8663
                                                                                                                       // 8664
/**                                                                                                                    // 8665
 * Applied a torque force to a body, inducing a rotation.                                                              // 8666
 *                                                                                                                     // 8667
 * @method applyTorque                                                                                                 // 8668
 * @param torque {Vector} torque                                                                                       // 8669
 */                                                                                                                    // 8670
Body.prototype.applyTorque = function applyTorque(torque) {                                                            // 8671
    this.wake();                                                                                                       // 8672
    this.torque.set(this.torque.add(torque));                                                                          // 8673
};                                                                                                                     // 8674
                                                                                                                       // 8675
/**                                                                                                                    // 8676
 * Extends Particle.getTransform to include a rotational component                                                     // 8677
 *   derived from the particle's orientation.                                                                          // 8678
 *                                                                                                                     // 8679
 * @method getTransform                                                                                                // 8680
 * @return transform {Transform}                                                                                       // 8681
 */                                                                                                                    // 8682
Body.prototype.getTransform = function getTransform() {                                                                // 8683
    return Transform.thenMove(                                                                                         // 8684
        this.orientation.getTransform(),                                                                               // 8685
        Transform.getTranslate(Particle.prototype.getTransform.call(this))                                             // 8686
    );                                                                                                                 // 8687
};                                                                                                                     // 8688
                                                                                                                       // 8689
/**                                                                                                                    // 8690
 * Extends Particle._integrate to also update the rotational states                                                    // 8691
 *   of the body.                                                                                                      // 8692
 *                                                                                                                     // 8693
 * @method getTransform                                                                                                // 8694
 * @protected                                                                                                          // 8695
 * @param dt {Number} delta time                                                                                       // 8696
 */                                                                                                                    // 8697
Body.prototype._integrate = function _integrate(dt) {                                                                  // 8698
    Particle.prototype._integrate.call(this, dt);                                                                      // 8699
    this.integrateAngularMomentum(dt);                                                                                 // 8700
    this.updateAngularVelocity(dt);                                                                                    // 8701
    this.integrateOrientation(dt);                                                                                     // 8702
};                                                                                                                     // 8703
                                                                                                                       // 8704
/**                                                                                                                    // 8705
 * Updates the angular momentum via the its integrator.                                                                // 8706
 *                                                                                                                     // 8707
 * @method integrateAngularMomentum                                                                                    // 8708
 * @param dt {Number} delta time                                                                                       // 8709
 */                                                                                                                    // 8710
Body.prototype.integrateAngularMomentum = function integrateAngularMomentum(dt) {                                      // 8711
    Integrator.integrateAngularMomentum(this, dt);                                                                     // 8712
};                                                                                                                     // 8713
                                                                                                                       // 8714
/**                                                                                                                    // 8715
 * Updates the orientation via the its integrator.                                                                     // 8716
 *                                                                                                                     // 8717
 * @method integrateOrientation                                                                                        // 8718
 * @param dt {Number} delta time                                                                                       // 8719
 */                                                                                                                    // 8720
Body.prototype.integrateOrientation = function integrateOrientation(dt) {                                              // 8721
    Integrator.integrateOrientation(this, dt);                                                                         // 8722
};                                                                                                                     // 8723
                                                                                                                       // 8724
module.exports = Body;                                                                                                 // 8725
},{"../../core/Transform":15,"../../math/Matrix":37,"../../math/Quaternion":38,"../../math/Vector":41,"../integrators/SymplecticEuler":72,"./Particle":51}],50:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8727
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8728
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8729
 *                                                                                                                     // 8730
 * Owner: david@famo.us                                                                                                // 8731
 * @license MPL 2.0                                                                                                    // 8732
 * @copyright Famous Industries, Inc. 2014                                                                             // 8733
 */                                                                                                                    // 8734
                                                                                                                       // 8735
var Body = require('./Body');                                                                                          // 8736
var Matrix = require('../../math/Matrix');                                                                             // 8737
                                                                                                                       // 8738
/**                                                                                                                    // 8739
 * Implements a circle, or spherical, geometry for a Body with                                                         // 8740
 * radius.                                                                                                             // 8741
 *                                                                                                                     // 8742
 * @class Circle                                                                                                       // 8743
 * @extends Body                                                                                                       // 8744
 * @constructor                                                                                                        // 8745
 */                                                                                                                    // 8746
function Circle(options) {                                                                                             // 8747
    options = options || {};                                                                                           // 8748
    this.setRadius(options.radius || 0);                                                                               // 8749
    Body.call(this, options);                                                                                          // 8750
}                                                                                                                      // 8751
                                                                                                                       // 8752
Circle.prototype = Object.create(Body.prototype);                                                                      // 8753
Circle.prototype.constructor = Circle;                                                                                 // 8754
                                                                                                                       // 8755
/**                                                                                                                    // 8756
 * Basic setter for radius.                                                                                            // 8757
 * @method setRadius                                                                                                   // 8758
 * @param r {Number} radius                                                                                            // 8759
 */                                                                                                                    // 8760
Circle.prototype.setRadius = function setRadius(r) {                                                                   // 8761
    this.radius = r;                                                                                                   // 8762
    this.size = [2*this.radius, 2*this.radius];                                                                        // 8763
    this.setMomentsOfInertia();                                                                                        // 8764
};                                                                                                                     // 8765
                                                                                                                       // 8766
Circle.prototype.setMomentsOfInertia = function setMomentsOfInertia() {                                                // 8767
    var m = this.mass;                                                                                                 // 8768
    var r = this.radius;                                                                                               // 8769
                                                                                                                       // 8770
    this.inertia = new Matrix([                                                                                        // 8771
        [0.25 * m * r * r, 0, 0],                                                                                      // 8772
        [0, 0.25 * m * r * r, 0],                                                                                      // 8773
        [0, 0, 0.5 * m * r * r]                                                                                        // 8774
    ]);                                                                                                                // 8775
                                                                                                                       // 8776
    this.inverseInertia = new Matrix([                                                                                 // 8777
        [4 / (m * r * r), 0, 0],                                                                                       // 8778
        [0, 4 / (m * r * r), 0],                                                                                       // 8779
        [0, 0, 2 / (m * r * r)]                                                                                        // 8780
    ]);                                                                                                                // 8781
};                                                                                                                     // 8782
                                                                                                                       // 8783
module.exports = Circle;                                                                                               // 8784
},{"../../math/Matrix":37,"./Body":49}],51:[function(require,module,exports){                                          // 8785
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8786
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8787
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8788
 *                                                                                                                     // 8789
 * Owner: david@famo.us                                                                                                // 8790
 * @license MPL 2.0                                                                                                    // 8791
 * @copyright Famous Industries, Inc. 2014                                                                             // 8792
 */                                                                                                                    // 8793
                                                                                                                       // 8794
var Vector = require('../../math/Vector');                                                                             // 8795
var Transform = require('../../core/Transform');                                                                       // 8796
var EventHandler = require('../../core/EventHandler');                                                                 // 8797
var Integrator = require('../integrators/SymplecticEuler');                                                            // 8798
                                                                                                                       // 8799
/**                                                                                                                    // 8800
 * A point body that is controlled by the Physics Engine. A particle has                                               // 8801
 *   position and velocity states that are updated by the Physics Engine.                                              // 8802
 *   Ultimately, a particle is a special type of modifier, and can be added to                                         // 8803
 *   the Famo.us Scene Graph like any other modifier.                                                                  // 8804
 *                                                                                                                     // 8805
 * @class Particle                                                                                                     // 8806
 * @uses EventHandler                                                                                                  // 8807
 * @extensionfor Body                                                                                                  // 8808
 *                                                                                                                     // 8809
 * @param [options] {Options}           An object of configurable options.                                             // 8810
 * @param [options.position] {Array}    The position of the particle.                                                  // 8811
 * @param [options.velocity] {Array}    The velocity of the particle.                                                  // 8812
 * @param [options.mass] {Number}       The mass of the particle.                                                      // 8813
 */                                                                                                                    // 8814
 function Particle(options) {                                                                                          // 8815
    options = options || {};                                                                                           // 8816
    var defaults = Particle.DEFAULT_OPTIONS;                                                                           // 8817
                                                                                                                       // 8818
    // registers                                                                                                       // 8819
    this.position = new Vector();                                                                                      // 8820
    this.velocity = new Vector();                                                                                      // 8821
    this.force = new Vector();                                                                                         // 8822
                                                                                                                       // 8823
    // state variables                                                                                                 // 8824
    this._engine = null;                                                                                               // 8825
    this._isSleeping = true;                                                                                           // 8826
    this._eventOutput = null;                                                                                          // 8827
                                                                                                                       // 8828
    // set scalars                                                                                                     // 8829
    this.mass = (options.mass !== undefined)                                                                           // 8830
        ? options.mass                                                                                                 // 8831
        : defaults.mass;                                                                                               // 8832
                                                                                                                       // 8833
    this.inverseMass = 1 / this.mass;                                                                                  // 8834
                                                                                                                       // 8835
    // set vectors                                                                                                     // 8836
    this.setPosition(options.position || defaults.position);                                                           // 8837
    this.setVelocity(options.velocity || defaults.velocity);                                                           // 8838
    this.force.set(options.force || [0,0,0]);                                                                          // 8839
                                                                                                                       // 8840
    this.transform = Transform.identity.slice();                                                                       // 8841
                                                                                                                       // 8842
    // cached _spec                                                                                                    // 8843
    this._spec = {                                                                                                     // 8844
        size : [true, true],                                                                                           // 8845
        target : {                                                                                                     // 8846
            transform : this.transform,                                                                                // 8847
            origin : [0.5, 0.5],                                                                                       // 8848
            target : null                                                                                              // 8849
        }                                                                                                              // 8850
    };                                                                                                                 // 8851
}                                                                                                                      // 8852
                                                                                                                       // 8853
Particle.DEFAULT_OPTIONS = {                                                                                           // 8854
    position : [0, 0, 0],                                                                                              // 8855
    velocity : [0, 0, 0],                                                                                              // 8856
    mass : 1                                                                                                           // 8857
};                                                                                                                     // 8858
                                                                                                                       // 8859
//Catalogue of outputted events                                                                                        // 8860
var _events = {                                                                                                        // 8861
    start : 'start',                                                                                                   // 8862
    update : 'update',                                                                                                 // 8863
    end : 'end'                                                                                                        // 8864
};                                                                                                                     // 8865
                                                                                                                       // 8866
// Cached timing function                                                                                              // 8867
var now = Date.now;                                                                                                    // 8868
                                                                                                                       // 8869
/**                                                                                                                    // 8870
 * @attribute isBody                                                                                                   // 8871
 * @type Boolean                                                                                                       // 8872
 * @static                                                                                                             // 8873
 */                                                                                                                    // 8874
Particle.prototype.isBody = false;                                                                                     // 8875
                                                                                                                       // 8876
/**                                                                                                                    // 8877
 * Determines if particle is active                                                                                    // 8878
 *                                                                                                                     // 8879
 * @method isActive                                                                                                    // 8880
 * @return {Boolean}                                                                                                   // 8881
 */                                                                                                                    // 8882
Particle.prototype.isActive = function isActive() {                                                                    // 8883
    return !this._isSleeping;                                                                                          // 8884
};                                                                                                                     // 8885
                                                                                                                       // 8886
/**                                                                                                                    // 8887
 * Stops the particle from updating                                                                                    // 8888
 *                                                                                                                     // 8889
 * @method sleep                                                                                                       // 8890
 */                                                                                                                    // 8891
Particle.prototype.sleep = function sleep() {                                                                          // 8892
    if (this._isSleeping) return;                                                                                      // 8893
    this.emit(_events.end, this);                                                                                      // 8894
    this._isSleeping = true;                                                                                           // 8895
};                                                                                                                     // 8896
                                                                                                                       // 8897
/**                                                                                                                    // 8898
 * Starts the particle update                                                                                          // 8899
 *                                                                                                                     // 8900
 * @method wake                                                                                                        // 8901
 */                                                                                                                    // 8902
Particle.prototype.wake = function wake() {                                                                            // 8903
    if (!this._isSleeping) return;                                                                                     // 8904
    this.emit(_events.start, this);                                                                                    // 8905
    this._isSleeping = false;                                                                                          // 8906
    this._prevTime = now();                                                                                            // 8907
    if (this._engine) this._engine.wake();                                                                             // 8908
};                                                                                                                     // 8909
                                                                                                                       // 8910
/**                                                                                                                    // 8911
 * Basic setter for position                                                                                           // 8912
 *                                                                                                                     // 8913
 * @method setPosition                                                                                                 // 8914
 * @param position {Array|Vector}                                                                                      // 8915
 */                                                                                                                    // 8916
Particle.prototype.setPosition = function setPosition(position) {                                                      // 8917
    this.position.set(position);                                                                                       // 8918
};                                                                                                                     // 8919
                                                                                                                       // 8920
/**                                                                                                                    // 8921
 * 1-dimensional setter for position                                                                                   // 8922
 *                                                                                                                     // 8923
 * @method setPosition1D                                                                                               // 8924
 * @param x {Number}                                                                                                   // 8925
 */                                                                                                                    // 8926
Particle.prototype.setPosition1D = function setPosition1D(x) {                                                         // 8927
    this.position.x = x;                                                                                               // 8928
};                                                                                                                     // 8929
                                                                                                                       // 8930
/**                                                                                                                    // 8931
 * Basic getter function for position                                                                                  // 8932
 *                                                                                                                     // 8933
 * @method getPosition                                                                                                 // 8934
 * @return position {Array}                                                                                            // 8935
 */                                                                                                                    // 8936
Particle.prototype.getPosition = function getPosition() {                                                              // 8937
    this._engine.step();                                                                                               // 8938
    return this.position.get();                                                                                        // 8939
};                                                                                                                     // 8940
                                                                                                                       // 8941
/**                                                                                                                    // 8942
 * 1-dimensional getter for position                                                                                   // 8943
 *                                                                                                                     // 8944
 * @method getPosition1D                                                                                               // 8945
 * @return value {Number}                                                                                              // 8946
 */                                                                                                                    // 8947
Particle.prototype.getPosition1D = function getPosition1D() {                                                          // 8948
    this._engine.step();                                                                                               // 8949
    return this.position.x;                                                                                            // 8950
};                                                                                                                     // 8951
                                                                                                                       // 8952
/**                                                                                                                    // 8953
 * Basic setter function for velocity Vector                                                                           // 8954
 *                                                                                                                     // 8955
 * @method setVelocity                                                                                                 // 8956
 * @function                                                                                                           // 8957
 */                                                                                                                    // 8958
Particle.prototype.setVelocity = function setVelocity(velocity) {                                                      // 8959
    this.velocity.set(velocity);                                                                                       // 8960
    if (!(velocity[0] === 0 && velocity[1] === 0 && velocity[2] === 0))                                                // 8961
        this.wake();                                                                                                   // 8962
};                                                                                                                     // 8963
                                                                                                                       // 8964
/**                                                                                                                    // 8965
 * 1-dimensional setter for velocity                                                                                   // 8966
 *                                                                                                                     // 8967
 * @method setVelocity1D                                                                                               // 8968
 * @param x {Number}                                                                                                   // 8969
 */                                                                                                                    // 8970
Particle.prototype.setVelocity1D = function setVelocity1D(x) {                                                         // 8971
    this.velocity.x = x;                                                                                               // 8972
    if (x !== 0) this.wake();                                                                                          // 8973
};                                                                                                                     // 8974
                                                                                                                       // 8975
/**                                                                                                                    // 8976
 * Basic getter function for velocity Vector                                                                           // 8977
 *                                                                                                                     // 8978
 * @method getVelocity                                                                                                 // 8979
 * @return velocity {Array}                                                                                            // 8980
 */                                                                                                                    // 8981
Particle.prototype.getVelocity = function getVelocity() {                                                              // 8982
    return this.velocity.get();                                                                                        // 8983
};                                                                                                                     // 8984
                                                                                                                       // 8985
/**                                                                                                                    // 8986
 * Basic setter function for force Vector                                                                              // 8987
 *                                                                                                                     // 8988
 * @method setForce                                                                                                    // 8989
 * @return force {Array}                                                                                               // 8990
 */                                                                                                                    // 8991
Particle.prototype.setForce = function setForce(force) {                                                               // 8992
    this.force.set(force);                                                                                             // 8993
    this.wake();                                                                                                       // 8994
};                                                                                                                     // 8995
                                                                                                                       // 8996
/**                                                                                                                    // 8997
 * 1-dimensional getter for velocity                                                                                   // 8998
 *                                                                                                                     // 8999
 * @method getVelocity1D                                                                                               // 9000
 * @return velocity {Number}                                                                                           // 9001
 */                                                                                                                    // 9002
Particle.prototype.getVelocity1D = function getVelocity1D() {                                                          // 9003
    return this.velocity.x;                                                                                            // 9004
};                                                                                                                     // 9005
                                                                                                                       // 9006
/**                                                                                                                    // 9007
 * Basic setter function for mass quantity                                                                             // 9008
 *                                                                                                                     // 9009
 * @method setMass                                                                                                     // 9010
 * @param mass {Number} mass                                                                                           // 9011
 */                                                                                                                    // 9012
Particle.prototype.setMass = function setMass(mass) {                                                                  // 9013
    this.mass = mass;                                                                                                  // 9014
    this.inverseMass = 1 / mass;                                                                                       // 9015
};                                                                                                                     // 9016
                                                                                                                       // 9017
/**                                                                                                                    // 9018
 * Basic getter function for mass quantity                                                                             // 9019
 *                                                                                                                     // 9020
 * @method getMass                                                                                                     // 9021
 * @return mass {Number}                                                                                               // 9022
 */                                                                                                                    // 9023
Particle.prototype.getMass = function getMass() {                                                                      // 9024
    return this.mass;                                                                                                  // 9025
};                                                                                                                     // 9026
                                                                                                                       // 9027
/**                                                                                                                    // 9028
 * Reset position and velocity                                                                                         // 9029
 *                                                                                                                     // 9030
 * @method reset                                                                                                       // 9031
 * @param position {Array|Vector}                                                                                      // 9032
 * @param velocity {Array|Vector}                                                                                      // 9033
 */                                                                                                                    // 9034
Particle.prototype.reset = function reset(position, velocity) {                                                        // 9035
    this.setPosition(position || [0,0,0]);                                                                             // 9036
    this.setVelocity(velocity || [0,0,0]);                                                                             // 9037
};                                                                                                                     // 9038
                                                                                                                       // 9039
/**                                                                                                                    // 9040
 * Add force vector to existing internal force Vector                                                                  // 9041
 *                                                                                                                     // 9042
 * @method applyForce                                                                                                  // 9043
 * @param force {Vector}                                                                                               // 9044
 */                                                                                                                    // 9045
Particle.prototype.applyForce = function applyForce(force) {                                                           // 9046
    if (force.isZero()) return;                                                                                        // 9047
    this.force.add(force).put(this.force);                                                                             // 9048
    this.wake();                                                                                                       // 9049
};                                                                                                                     // 9050
                                                                                                                       // 9051
/**                                                                                                                    // 9052
 * Add impulse (change in velocity) Vector to this Vector's velocity.                                                  // 9053
 *                                                                                                                     // 9054
 * @method applyImpulse                                                                                                // 9055
 * @param impulse {Vector}                                                                                             // 9056
 */                                                                                                                    // 9057
Particle.prototype.applyImpulse = function applyImpulse(impulse) {                                                     // 9058
    if (impulse.isZero()) return;                                                                                      // 9059
    var velocity = this.velocity;                                                                                      // 9060
    velocity.add(impulse.mult(this.inverseMass)).put(velocity);                                                        // 9061
};                                                                                                                     // 9062
                                                                                                                       // 9063
/**                                                                                                                    // 9064
 * Update a particle's velocity from its force accumulator                                                             // 9065
 *                                                                                                                     // 9066
 * @method integrateVelocity                                                                                           // 9067
 * @param dt {Number} Time differential                                                                                // 9068
 */                                                                                                                    // 9069
Particle.prototype.integrateVelocity = function integrateVelocity(dt) {                                                // 9070
    Integrator.integrateVelocity(this, dt);                                                                            // 9071
};                                                                                                                     // 9072
                                                                                                                       // 9073
/**                                                                                                                    // 9074
 * Update a particle's position from its velocity                                                                      // 9075
 *                                                                                                                     // 9076
 * @method integratePosition                                                                                           // 9077
 * @param dt {Number} Time differential                                                                                // 9078
 */                                                                                                                    // 9079
Particle.prototype.integratePosition = function integratePosition(dt) {                                                // 9080
    Integrator.integratePosition(this, dt);                                                                            // 9081
};                                                                                                                     // 9082
                                                                                                                       // 9083
/**                                                                                                                    // 9084
 * Update the position and velocity of the particle                                                                    // 9085
 *                                                                                                                     // 9086
 * @method _integrate                                                                                                  // 9087
 * @protected                                                                                                          // 9088
 * @param dt {Number} Time differential                                                                                // 9089
 */                                                                                                                    // 9090
Particle.prototype._integrate = function _integrate(dt) {                                                              // 9091
    this.integrateVelocity(dt);                                                                                        // 9092
    this.integratePosition(dt);                                                                                        // 9093
};                                                                                                                     // 9094
                                                                                                                       // 9095
/**                                                                                                                    // 9096
 * Get kinetic energy of the particle.                                                                                 // 9097
 *                                                                                                                     // 9098
 * @method getEnergy                                                                                                   // 9099
 * @function                                                                                                           // 9100
 */                                                                                                                    // 9101
Particle.prototype.getEnergy = function getEnergy() {                                                                  // 9102
    return 0.5 * this.mass * this.velocity.normSquared();                                                              // 9103
};                                                                                                                     // 9104
                                                                                                                       // 9105
/**                                                                                                                    // 9106
 * Generate transform from the current position state                                                                  // 9107
 *                                                                                                                     // 9108
 * @method getTransform                                                                                                // 9109
 * @return Transform {Transform}                                                                                       // 9110
 */                                                                                                                    // 9111
Particle.prototype.getTransform = function getTransform() {                                                            // 9112
    this._engine.step();                                                                                               // 9113
                                                                                                                       // 9114
    var position = this.position;                                                                                      // 9115
    var transform = this.transform;                                                                                    // 9116
                                                                                                                       // 9117
    transform[12] = position.x;                                                                                        // 9118
    transform[13] = position.y;                                                                                        // 9119
    transform[14] = position.z;                                                                                        // 9120
    return transform;                                                                                                  // 9121
};                                                                                                                     // 9122
                                                                                                                       // 9123
/**                                                                                                                    // 9124
 * The modify interface of a Modifier                                                                                  // 9125
 *                                                                                                                     // 9126
 * @method modify                                                                                                      // 9127
 * @param target {Spec}                                                                                                // 9128
 * @return Spec {Spec}                                                                                                 // 9129
 */                                                                                                                    // 9130
Particle.prototype.modify = function modify(target) {                                                                  // 9131
    var _spec = this._spec.target;                                                                                     // 9132
    _spec.transform = this.getTransform();                                                                             // 9133
    _spec.target = target;                                                                                             // 9134
    return this._spec;                                                                                                 // 9135
};                                                                                                                     // 9136
                                                                                                                       // 9137
// private                                                                                                             // 9138
function _createEventOutput() {                                                                                        // 9139
    this._eventOutput = new EventHandler();                                                                            // 9140
    this._eventOutput.bindThis(this);                                                                                  // 9141
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 9142
}                                                                                                                      // 9143
                                                                                                                       // 9144
Particle.prototype.emit = function emit(type, data) {                                                                  // 9145
    if (!this._eventOutput) return;                                                                                    // 9146
    this._eventOutput.emit(type, data);                                                                                // 9147
};                                                                                                                     // 9148
                                                                                                                       // 9149
Particle.prototype.on = function on() {                                                                                // 9150
    _createEventOutput.call(this);                                                                                     // 9151
    return this.on.apply(this, arguments);                                                                             // 9152
};                                                                                                                     // 9153
                                                                                                                       // 9154
Particle.prototype.removeListener = function removeListener() {                                                        // 9155
    _createEventOutput.call(this);                                                                                     // 9156
    return this.removeListener.apply(this, arguments);                                                                 // 9157
};                                                                                                                     // 9158
                                                                                                                       // 9159
Particle.prototype.pipe = function pipe() {                                                                            // 9160
    _createEventOutput.call(this);                                                                                     // 9161
    return this.pipe.apply(this, arguments);                                                                           // 9162
};                                                                                                                     // 9163
                                                                                                                       // 9164
Particle.prototype.unpipe = function unpipe() {                                                                        // 9165
    _createEventOutput.call(this);                                                                                     // 9166
    return this.unpipe.apply(this, arguments);                                                                         // 9167
};                                                                                                                     // 9168
                                                                                                                       // 9169
module.exports = Particle;                                                                                             // 9170
},{"../../core/EventHandler":7,"../../core/Transform":15,"../../math/Vector":41,"../integrators/SymplecticEuler":72}],52:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9172
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9173
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9174
 *                                                                                                                     // 9175
 * Owner: david@famo.us                                                                                                // 9176
 * @license MPL 2.0                                                                                                    // 9177
 * @copyright Famous Industries, Inc. 2014                                                                             // 9178
 */                                                                                                                    // 9179
                                                                                                                       // 9180
var Body = require('./Body');                                                                                          // 9181
var Matrix = require('../../math/Matrix');                                                                             // 9182
                                                                                                                       // 9183
/**                                                                                                                    // 9184
 * Implements a rectangular geometry for an Body with                                                                  // 9185
 * size = [width, height].                                                                                             // 9186
 *                                                                                                                     // 9187
 * @class Rectangle                                                                                                    // 9188
 * @extends Body                                                                                                       // 9189
 * @constructor                                                                                                        // 9190
 */                                                                                                                    // 9191
function Rectangle(options) {                                                                                          // 9192
    options = options || {};                                                                                           // 9193
    this.size = options.size || [0,0];                                                                                 // 9194
    Body.call(this, options);                                                                                          // 9195
}                                                                                                                      // 9196
                                                                                                                       // 9197
Rectangle.prototype = Object.create(Body.prototype);                                                                   // 9198
Rectangle.prototype.constructor = Rectangle;                                                                           // 9199
                                                                                                                       // 9200
/**                                                                                                                    // 9201
 * Basic setter for size.                                                                                              // 9202
 * @method setSize                                                                                                     // 9203
 * @param size {Array} size = [width, height]                                                                          // 9204
 */                                                                                                                    // 9205
Rectangle.prototype.setSize = function setSize(size) {                                                                 // 9206
    this.size = size;                                                                                                  // 9207
    this.setMomentsOfInertia();                                                                                        // 9208
};                                                                                                                     // 9209
                                                                                                                       // 9210
Rectangle.prototype.setMomentsOfInertia = function setMomentsOfInertia() {                                             // 9211
    var m = this.mass;                                                                                                 // 9212
    var w = this.size[0];                                                                                              // 9213
    var h = this.size[1];                                                                                              // 9214
                                                                                                                       // 9215
    this.inertia = new Matrix([                                                                                        // 9216
        [m * h * h / 12, 0, 0],                                                                                        // 9217
        [0, m * w * w / 12, 0],                                                                                        // 9218
        [0, 0, m * (w * w + h * h) / 12]                                                                               // 9219
    ]);                                                                                                                // 9220
                                                                                                                       // 9221
    this.inverseInertia = new Matrix([                                                                                 // 9222
        [12 / (m * h * h), 0, 0],                                                                                      // 9223
        [0, 12 / (m * w * w), 0],                                                                                      // 9224
        [0, 0, 12 / (m * (w * w + h * h))]                                                                             // 9225
    ]);                                                                                                                // 9226
};                                                                                                                     // 9227
                                                                                                                       // 9228
module.exports = Rectangle;                                                                                            // 9229
},{"../../math/Matrix":37,"./Body":49}],53:[function(require,module,exports){                                          // 9230
module.exports = {                                                                                                     // 9231
  Body: require('./Body'),                                                                                             // 9232
  Circle: require('./Circle'),                                                                                         // 9233
  Particle: require('./Particle'),                                                                                     // 9234
  Rectangle: require('./Rectangle')                                                                                    // 9235
};                                                                                                                     // 9236
                                                                                                                       // 9237
},{"./Body":49,"./Circle":50,"./Particle":51,"./Rectangle":52}],54:[function(require,module,exports){                  // 9238
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9239
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9240
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9241
 *                                                                                                                     // 9242
 * Owner: david@famo.us                                                                                                // 9243
 * @license MPL 2.0                                                                                                    // 9244
 * @copyright Famous Industries, Inc. 2014                                                                             // 9245
 */                                                                                                                    // 9246
                                                                                                                       // 9247
var Constraint = require('./Constraint');                                                                              // 9248
var Vector = require('../../math/Vector');                                                                             // 9249
                                                                                                                       // 9250
/**                                                                                                                    // 9251
 *  Allows for two circular bodies to collide and bounce off each other.                                               // 9252
 *                                                                                                                     // 9253
 *  @class Collision                                                                                                   // 9254
 *  @constructor                                                                                                       // 9255
 *  @extends Constraint                                                                                                // 9256
 *  @param {Options} [options] An object of configurable options.                                                      // 9257
 *  @param {Number} [options.restitution] The energy ratio lost in a collision (0 = stick, 1 = elastic) Range : [0, 1] // 9258
 *  @param {Number} [options.drift] Baumgarte stabilization parameter. Makes constraints "loosely" (0) or "tightly" (1) enforced. Range : [0, 1]
 *  @param {Number} [options.slop] Amount of penetration in pixels to ignore before collision event triggers           // 9260
 *                                                                                                                     // 9261
 */                                                                                                                    // 9262
function Collision(options) {                                                                                          // 9263
    this.options = Object.create(Collision.DEFAULT_OPTIONS);                                                           // 9264
    if (options) this.setOptions(options);                                                                             // 9265
                                                                                                                       // 9266
    //registers                                                                                                        // 9267
    this.normal   = new Vector();                                                                                      // 9268
    this.pDiff    = new Vector();                                                                                      // 9269
    this.vDiff    = new Vector();                                                                                      // 9270
    this.impulse1 = new Vector();                                                                                      // 9271
    this.impulse2 = new Vector();                                                                                      // 9272
                                                                                                                       // 9273
    Constraint.call(this);                                                                                             // 9274
}                                                                                                                      // 9275
                                                                                                                       // 9276
Collision.prototype = Object.create(Constraint.prototype);                                                             // 9277
Collision.prototype.constructor = Collision;                                                                           // 9278
                                                                                                                       // 9279
Collision.DEFAULT_OPTIONS = {                                                                                          // 9280
    restitution : 0.5,                                                                                                 // 9281
    drift : 0.5,                                                                                                       // 9282
    slop : 0                                                                                                           // 9283
};                                                                                                                     // 9284
                                                                                                                       // 9285
function _normalVelocity(particle1, particle2) {                                                                       // 9286
    return particle1.velocity.dot(particle2.velocity);                                                                 // 9287
}                                                                                                                      // 9288
                                                                                                                       // 9289
/*                                                                                                                     // 9290
 * Setter for options.                                                                                                 // 9291
 *                                                                                                                     // 9292
 * @method setOptions                                                                                                  // 9293
 * @param options {Objects}                                                                                            // 9294
 */                                                                                                                    // 9295
Collision.prototype.setOptions = function setOptions(options) {                                                        // 9296
    for (var key in options) this.options[key] = options[key];                                                         // 9297
};                                                                                                                     // 9298
                                                                                                                       // 9299
/**                                                                                                                    // 9300
 * Adds an impulse to a physics body's velocity due to the constraint                                                  // 9301
 *                                                                                                                     // 9302
 * @method applyConstraint                                                                                             // 9303
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 9304
 * @param source {Body}         The source of the constraint                                                           // 9305
 * @param dt {Number}           Delta time                                                                             // 9306
 */                                                                                                                    // 9307
Collision.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                  // 9308
    if (source === undefined) return;                                                                                  // 9309
                                                                                                                       // 9310
    var v1 = source.velocity;                                                                                          // 9311
    var p1 = source.position;                                                                                          // 9312
    var w1 = source.inverseMass;                                                                                       // 9313
    var r1 = source.radius;                                                                                            // 9314
                                                                                                                       // 9315
    var options = this.options;                                                                                        // 9316
    var drift = options.drift;                                                                                         // 9317
    var slop = -options.slop;                                                                                          // 9318
    var restitution = options.restitution;                                                                             // 9319
                                                                                                                       // 9320
    var n     = this.normal;                                                                                           // 9321
    var pDiff = this.pDiff;                                                                                            // 9322
    var vDiff = this.vDiff;                                                                                            // 9323
    var impulse1 = this.impulse1;                                                                                      // 9324
    var impulse2 = this.impulse2;                                                                                      // 9325
                                                                                                                       // 9326
    for (var i = 0; i < targets.length; i++) {                                                                         // 9327
        var target = targets[i];                                                                                       // 9328
                                                                                                                       // 9329
        if (target === source) continue;                                                                               // 9330
                                                                                                                       // 9331
        var v2 = target.velocity;                                                                                      // 9332
        var p2 = target.position;                                                                                      // 9333
        var w2 = target.inverseMass;                                                                                   // 9334
        var r2 = target.radius;                                                                                        // 9335
                                                                                                                       // 9336
        pDiff.set(p2.sub(p1));                                                                                         // 9337
        vDiff.set(v2.sub(v1));                                                                                         // 9338
                                                                                                                       // 9339
        var dist    = pDiff.norm();                                                                                    // 9340
        var overlap = dist - (r1 + r2);                                                                                // 9341
        var effMass = 1/(w1 + w2);                                                                                     // 9342
        var gamma   = 0;                                                                                               // 9343
                                                                                                                       // 9344
        if (overlap < 0) {                                                                                             // 9345
                                                                                                                       // 9346
            n.set(pDiff.normalize());                                                                                  // 9347
                                                                                                                       // 9348
            if (this._eventOutput) {                                                                                   // 9349
                var collisionData = {                                                                                  // 9350
                    target  : target,                                                                                  // 9351
                    source  : source,                                                                                  // 9352
                    overlap : overlap,                                                                                 // 9353
                    normal  : n                                                                                        // 9354
                };                                                                                                     // 9355
                                                                                                                       // 9356
                this._eventOutput.emit('preCollision', collisionData);                                                 // 9357
                this._eventOutput.emit('collision', collisionData);                                                    // 9358
            }                                                                                                          // 9359
                                                                                                                       // 9360
            var lambda = (overlap <= slop)                                                                             // 9361
                ? ((1 + restitution) * n.dot(vDiff) + drift/dt * (overlap - slop)) / (gamma + dt/effMass)              // 9362
                : ((1 + restitution) * n.dot(vDiff)) / (gamma + dt/effMass);                                           // 9363
                                                                                                                       // 9364
            n.mult(dt*lambda).put(impulse1);                                                                           // 9365
            impulse1.mult(-1).put(impulse2);                                                                           // 9366
                                                                                                                       // 9367
            source.applyImpulse(impulse1);                                                                             // 9368
            target.applyImpulse(impulse2);                                                                             // 9369
                                                                                                                       // 9370
            //source.setPosition(p1.add(n.mult(overlap/2)));                                                           // 9371
            //target.setPosition(p2.sub(n.mult(overlap/2)));                                                           // 9372
                                                                                                                       // 9373
            if (this._eventOutput) this._eventOutput.emit('postCollision', collisionData);                             // 9374
                                                                                                                       // 9375
        }                                                                                                              // 9376
    }                                                                                                                  // 9377
};                                                                                                                     // 9378
                                                                                                                       // 9379
module.exports = Collision;                                                                                            // 9380
},{"../../math/Vector":41,"./Constraint":55}],55:[function(require,module,exports){                                    // 9381
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9382
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9383
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9384
 *                                                                                                                     // 9385
 * Owner: david@famo.us                                                                                                // 9386
 * @license MPL 2.0                                                                                                    // 9387
 * @copyright Famous Industries, Inc. 2014                                                                             // 9388
 */                                                                                                                    // 9389
                                                                                                                       // 9390
var EventHandler = require('../../core/EventHandler');                                                                 // 9391
                                                                                                                       // 9392
/**                                                                                                                    // 9393
 *  Allows for two circular bodies to collide and bounce off each other.                                               // 9394
 *                                                                                                                     // 9395
 *  @class Constraint                                                                                                  // 9396
 *  @constructor                                                                                                       // 9397
 *  @uses EventHandler                                                                                                 // 9398
 *  @param options {Object}                                                                                            // 9399
 */                                                                                                                    // 9400
function Constraint() {                                                                                                // 9401
    this.options = this.options || {};                                                                                 // 9402
    this._eventOutput = new EventHandler();                                                                            // 9403
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 9404
}                                                                                                                      // 9405
                                                                                                                       // 9406
/*                                                                                                                     // 9407
 * Setter for options.                                                                                                 // 9408
 *                                                                                                                     // 9409
 * @method setOptions                                                                                                  // 9410
 * @param options {Objects}                                                                                            // 9411
 */                                                                                                                    // 9412
Constraint.prototype.setOptions = function setOptions(options) {                                                       // 9413
    this._eventOutput.emit('change', options);                                                                         // 9414
};                                                                                                                     // 9415
                                                                                                                       // 9416
/**                                                                                                                    // 9417
 * Adds an impulse to a physics body's velocity due to the constraint                                                  // 9418
 *                                                                                                                     // 9419
 * @method applyConstraint                                                                                             // 9420
 */                                                                                                                    // 9421
Constraint.prototype.applyConstraint = function applyConstraint() {};                                                  // 9422
                                                                                                                       // 9423
/**                                                                                                                    // 9424
 * Getter for energy                                                                                                   // 9425
 *                                                                                                                     // 9426
 * @method getEnergy                                                                                                   // 9427
 * @return energy {Number}                                                                                             // 9428
 */                                                                                                                    // 9429
Constraint.prototype.getEnergy = function getEnergy() {                                                                // 9430
    return 0.0;                                                                                                        // 9431
};                                                                                                                     // 9432
                                                                                                                       // 9433
module.exports = Constraint;                                                                                           // 9434
},{"../../core/EventHandler":7}],56:[function(require,module,exports){                                                 // 9435
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9436
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9437
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9438
 *                                                                                                                     // 9439
 * Owner: david@famo.us                                                                                                // 9440
 * @license MPL 2.0                                                                                                    // 9441
 * @copyright Famous Industries, Inc. 2014                                                                             // 9442
 */                                                                                                                    // 9443
                                                                                                                       // 9444
var Constraint = require('./Constraint');                                                                              // 9445
var Vector = require('../../math/Vector');                                                                             // 9446
                                                                                                                       // 9447
/**                                                                                                                    // 9448
 *  A constraint that keeps a physics body on a given implicit curve                                                   // 9449
 *    regardless of other physical forces are applied to it.                                                           // 9450
 *                                                                                                                     // 9451
 *    A curve constraint is two surface constraints in disguise, as a curve is                                         // 9452
 *    the intersection of two surfaces, and is essentially constrained to both                                         // 9453
 *                                                                                                                     // 9454
 *  @class Curve                                                                                                       // 9455
 *  @constructor                                                                                                       // 9456
 *  @extends Constraint                                                                                                // 9457
 *  @param {Options} [options] An object of configurable options.                                                      // 9458
 *  @param {Function} [options.equation] An implicitly defined surface f(x,y,z) = 0 that body is constrained to e.g. function(x,y,z) { x*x + y*y - r*r } corresponds to a circle of radius r pixels
 *  @param {Function} [options.plane] An implicitly defined second surface that the body is constrained to             // 9460
 *  @param {Number} [options.period] The spring-like reaction when the constraint is violated                          // 9461
 *  @param {Number} [options.number] The damping-like reaction when the constraint is violated                         // 9462
 */                                                                                                                    // 9463
function Curve(options) {                                                                                              // 9464
    this.options = Object.create(Curve.DEFAULT_OPTIONS);                                                               // 9465
    if (options) this.setOptions(options);                                                                             // 9466
                                                                                                                       // 9467
    //registers                                                                                                        // 9468
    this.J = new Vector();                                                                                             // 9469
    this.impulse = new Vector();                                                                                       // 9470
                                                                                                                       // 9471
    Constraint.call(this);                                                                                             // 9472
}                                                                                                                      // 9473
                                                                                                                       // 9474
Curve.prototype = Object.create(Constraint.prototype);                                                                 // 9475
Curve.prototype.constructor = Curve;                                                                                   // 9476
                                                                                                                       // 9477
/** @const */ var epsilon = 1e-7;                                                                                      // 9478
/** @const */ var pi = Math.PI;                                                                                        // 9479
                                                                                                                       // 9480
Curve.DEFAULT_OPTIONS = {                                                                                              // 9481
    equation  : function(x,y,z) {                                                                                      // 9482
        return 0;                                                                                                      // 9483
    },                                                                                                                 // 9484
    plane : function(x,y,z) {                                                                                          // 9485
        return z;                                                                                                      // 9486
    },                                                                                                                 // 9487
    period : 0,                                                                                                        // 9488
    dampingRatio : 0                                                                                                   // 9489
};                                                                                                                     // 9490
                                                                                                                       // 9491
/**                                                                                                                    // 9492
 * Basic options setter                                                                                                // 9493
 *                                                                                                                     // 9494
 * @method setOptions                                                                                                  // 9495
 * @param options {Objects}                                                                                            // 9496
 */                                                                                                                    // 9497
Curve.prototype.setOptions = function setOptions(options) {                                                            // 9498
    for (var key in options) this.options[key] = options[key];                                                         // 9499
};                                                                                                                     // 9500
                                                                                                                       // 9501
/**                                                                                                                    // 9502
 * Adds a curve impulse to a physics body.                                                                             // 9503
 *                                                                                                                     // 9504
 * @method applyConstraint                                                                                             // 9505
 * @param targets {Array.Body} Array of bodies to apply force to.                                                      // 9506
 * @param source {Body} Not applicable                                                                                 // 9507
 * @param dt {Number} Delta time                                                                                       // 9508
 */                                                                                                                    // 9509
Curve.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                      // 9510
    var options = this.options;                                                                                        // 9511
    var impulse = this.impulse;                                                                                        // 9512
    var J = this.J;                                                                                                    // 9513
                                                                                                                       // 9514
    var f = options.equation;                                                                                          // 9515
    var g = options.plane;                                                                                             // 9516
    var dampingRatio = options.dampingRatio;                                                                           // 9517
    var period = options.period;                                                                                       // 9518
                                                                                                                       // 9519
    for (var i = 0; i < targets.length; i++) {                                                                         // 9520
        var body = targets[i];                                                                                         // 9521
                                                                                                                       // 9522
        var v = body.velocity;                                                                                         // 9523
        var p = body.position;                                                                                         // 9524
        var m = body.mass;                                                                                             // 9525
                                                                                                                       // 9526
        var gamma;                                                                                                     // 9527
        var beta;                                                                                                      // 9528
                                                                                                                       // 9529
        if (period === 0) {                                                                                            // 9530
            gamma = 0;                                                                                                 // 9531
            beta = 1;                                                                                                  // 9532
        }                                                                                                              // 9533
        else {                                                                                                         // 9534
            var c = 4 * m * pi * dampingRatio / period;                                                                // 9535
            var k = 4 * m * pi * pi / (period * period);                                                               // 9536
                                                                                                                       // 9537
            gamma = 1 / (c + dt*k);                                                                                    // 9538
            beta  = dt*k / (c + dt*k);                                                                                 // 9539
        }                                                                                                              // 9540
                                                                                                                       // 9541
        var x = p.x;                                                                                                   // 9542
        var y = p.y;                                                                                                   // 9543
        var z = p.z;                                                                                                   // 9544
                                                                                                                       // 9545
        var f0  = f(x, y, z);                                                                                          // 9546
        var dfx = (f(x + epsilon, p, p) - f0) / epsilon;                                                               // 9547
        var dfy = (f(x, y + epsilon, p) - f0) / epsilon;                                                               // 9548
        var dfz = (f(x, y, p + epsilon) - f0) / epsilon;                                                               // 9549
                                                                                                                       // 9550
        var g0  = g(x, y, z);                                                                                          // 9551
        var dgx = (g(x + epsilon, y, z) - g0) / epsilon;                                                               // 9552
        var dgy = (g(x, y + epsilon, z) - g0) / epsilon;                                                               // 9553
        var dgz = (g(x, y, z + epsilon) - g0) / epsilon;                                                               // 9554
                                                                                                                       // 9555
        J.setXYZ(dfx + dgx, dfy + dgy, dfz + dgz);                                                                     // 9556
                                                                                                                       // 9557
        var antiDrift = beta/dt * (f0 + g0);                                                                           // 9558
        var lambda = -(J.dot(v) + antiDrift) / (gamma + dt * J.normSquared() / m);                                     // 9559
                                                                                                                       // 9560
        impulse.set(J.mult(dt*lambda));                                                                                // 9561
        body.applyImpulse(impulse);                                                                                    // 9562
    }                                                                                                                  // 9563
};                                                                                                                     // 9564
                                                                                                                       // 9565
module.exports = Curve;                                                                                                // 9566
},{"../../math/Vector":41,"./Constraint":55}],57:[function(require,module,exports){                                    // 9567
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9568
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9569
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9570
 *                                                                                                                     // 9571
 * Owner: david@famo.us                                                                                                // 9572
 * @license MPL 2.0                                                                                                    // 9573
 * @copyright Famous Industries, Inc. 2014                                                                             // 9574
 */                                                                                                                    // 9575
                                                                                                                       // 9576
var Constraint = require('./Constraint');                                                                              // 9577
var Vector = require('../../math/Vector');                                                                             // 9578
                                                                                                                       // 9579
/**                                                                                                                    // 9580
 *  A constraint that keeps a physics body a given distance away from a given                                          // 9581
 *  anchor, or another attached body.                                                                                  // 9582
 *                                                                                                                     // 9583
 *                                                                                                                     // 9584
 *  @class Distance                                                                                                    // 9585
 *  @constructor                                                                                                       // 9586
 *  @extends Constraint                                                                                                // 9587
 *  @param {Options} [options] An object of configurable options.                                                      // 9588
 *  @param {Array} [options.anchor] The location of the anchor                                                         // 9589
 *  @param {Number} [options.length] The amount of distance from the anchor the constraint should enforce              // 9590
 *  @param {Number} [options.minLength] The minimum distance before the constraint is activated. Use this property for a "rope" effect.
 *  @param {Number} [options.period] The spring-like reaction when the constraint is broken.                           // 9592
 *  @param {Number} [options.dampingRatio] The damping-like reaction when the constraint is broken.                    // 9593
 *                                                                                                                     // 9594
 */                                                                                                                    // 9595
function Distance(options) {                                                                                           // 9596
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 9597
    if (options) this.setOptions(options);                                                                             // 9598
                                                                                                                       // 9599
    //registers                                                                                                        // 9600
    this.impulse  = new Vector();                                                                                      // 9601
    this.normal   = new Vector();                                                                                      // 9602
    this.diffP    = new Vector();                                                                                      // 9603
    this.diffV    = new Vector();                                                                                      // 9604
                                                                                                                       // 9605
    Constraint.call(this);                                                                                             // 9606
}                                                                                                                      // 9607
                                                                                                                       // 9608
Distance.prototype = Object.create(Constraint.prototype);                                                              // 9609
Distance.prototype.constructor = Distance;                                                                             // 9610
                                                                                                                       // 9611
Distance.DEFAULT_OPTIONS = {                                                                                           // 9612
    anchor : null,                                                                                                     // 9613
    length : 0,                                                                                                        // 9614
    minLength : 0,                                                                                                     // 9615
    period : 0,                                                                                                        // 9616
    dampingRatio : 0                                                                                                   // 9617
};                                                                                                                     // 9618
                                                                                                                       // 9619
/** @const */ var pi = Math.PI;                                                                                        // 9620
                                                                                                                       // 9621
/**                                                                                                                    // 9622
 * Basic options setter                                                                                                // 9623
 *                                                                                                                     // 9624
 * @method setOptions                                                                                                  // 9625
 * @param options {Objects}                                                                                            // 9626
 */                                                                                                                    // 9627
Distance.prototype.setOptions = function setOptions(options) {                                                         // 9628
    if (options.anchor) {                                                                                              // 9629
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 9630
        if (options.anchor   instanceof Vector)  this.options.anchor = options.anchor;                                 // 9631
        if (options.anchor   instanceof Array)  this.options.anchor = new Vector(options.anchor);                      // 9632
    }                                                                                                                  // 9633
    if (options.length !== undefined) this.options.length = options.length;                                            // 9634
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 9635
    if (options.period !== undefined) this.options.period = options.period;                                            // 9636
    if (options.minLength !== undefined) this.options.minLength = options.minLength;                                   // 9637
};                                                                                                                     // 9638
                                                                                                                       // 9639
function _calcError(impulse, body) {                                                                                   // 9640
    return body.mass * impulse.norm();                                                                                 // 9641
}                                                                                                                      // 9642
                                                                                                                       // 9643
/**                                                                                                                    // 9644
 * Set the anchor position                                                                                             // 9645
 *                                                                                                                     // 9646
 * @method setOptions                                                                                                  // 9647
 * @param anchor {Array}                                                                                               // 9648
 */                                                                                                                    // 9649
Distance.prototype.setAnchor = function setAnchor(anchor) {                                                            // 9650
    if (!this.options.anchor) this.options.anchor = new Vector();                                                      // 9651
    this.options.anchor.set(anchor);                                                                                   // 9652
};                                                                                                                     // 9653
                                                                                                                       // 9654
/**                                                                                                                    // 9655
 * Adds an impulse to a physics body's velocity due to the constraint                                                  // 9656
 *                                                                                                                     // 9657
 * @method applyConstraint                                                                                             // 9658
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 9659
 * @param source {Body}         The source of the constraint                                                           // 9660
 * @param dt {Number}           Delta time                                                                             // 9661
 */                                                                                                                    // 9662
Distance.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                   // 9663
    var n        = this.normal;                                                                                        // 9664
    var diffP    = this.diffP;                                                                                         // 9665
    var diffV    = this.diffV;                                                                                         // 9666
    var impulse  = this.impulse;                                                                                       // 9667
    var options  = this.options;                                                                                       // 9668
                                                                                                                       // 9669
    var dampingRatio = options.dampingRatio;                                                                           // 9670
    var period       = options.period;                                                                                 // 9671
    var minLength    = options.minLength;                                                                              // 9672
                                                                                                                       // 9673
    var p2;                                                                                                            // 9674
    var w2;                                                                                                            // 9675
                                                                                                                       // 9676
    if (source) {                                                                                                      // 9677
        var v2 = source.velocity;                                                                                      // 9678
        p2 = source.position;                                                                                          // 9679
        w2 = source.inverseMass;                                                                                       // 9680
    }                                                                                                                  // 9681
    else {                                                                                                             // 9682
        p2 = this.options.anchor;                                                                                      // 9683
        w2 = 0;                                                                                                        // 9684
    }                                                                                                                  // 9685
                                                                                                                       // 9686
    var length = this.options.length;                                                                                  // 9687
                                                                                                                       // 9688
    for (var i = 0; i < targets.length; i++) {                                                                         // 9689
        var body = targets[i];                                                                                         // 9690
                                                                                                                       // 9691
        var v1 = body.velocity;                                                                                        // 9692
        var p1 = body.position;                                                                                        // 9693
        var w1 = body.inverseMass;                                                                                     // 9694
                                                                                                                       // 9695
        diffP.set(p1.sub(p2));                                                                                         // 9696
        n.set(diffP.normalize());                                                                                      // 9697
                                                                                                                       // 9698
        var dist = diffP.norm() - length;                                                                              // 9699
                                                                                                                       // 9700
        //rope effect                                                                                                  // 9701
        if (Math.abs(dist) < minLength) return;                                                                        // 9702
                                                                                                                       // 9703
        if (source) diffV.set(v1.sub(v2));                                                                             // 9704
        else diffV.set(v1);                                                                                            // 9705
                                                                                                                       // 9706
        var effMass = 1 / (w1 + w2);                                                                                   // 9707
        var gamma;                                                                                                     // 9708
        var beta;                                                                                                      // 9709
                                                                                                                       // 9710
        if (period === 0) {                                                                                            // 9711
            gamma = 0;                                                                                                 // 9712
            beta  = 1;                                                                                                 // 9713
        }                                                                                                              // 9714
        else {                                                                                                         // 9715
            var c = 4 * effMass * pi * dampingRatio / period;                                                          // 9716
            var k = 4 * effMass * pi * pi / (period * period);                                                         // 9717
                                                                                                                       // 9718
            gamma = 1 / (c + dt*k);                                                                                    // 9719
            beta  = dt*k / (c + dt*k);                                                                                 // 9720
        }                                                                                                              // 9721
                                                                                                                       // 9722
        var antiDrift = beta/dt * dist;                                                                                // 9723
        var lambda    = -(n.dot(diffV) + antiDrift) / (gamma + dt/effMass);                                            // 9724
                                                                                                                       // 9725
        impulse.set(n.mult(dt*lambda));                                                                                // 9726
        body.applyImpulse(impulse);                                                                                    // 9727
                                                                                                                       // 9728
        if (source) source.applyImpulse(impulse.mult(-1));                                                             // 9729
    }                                                                                                                  // 9730
};                                                                                                                     // 9731
                                                                                                                       // 9732
module.exports = Distance;                                                                                             // 9733
},{"../../math/Vector":41,"./Constraint":55}],58:[function(require,module,exports){                                    // 9734
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9735
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9736
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9737
 *                                                                                                                     // 9738
 * Owner: david@famo.us                                                                                                // 9739
 * @license MPL 2.0                                                                                                    // 9740
 * @copyright Famous Industries, Inc. 2014                                                                             // 9741
 */                                                                                                                    // 9742
                                                                                                                       // 9743
var Constraint = require('./Constraint');                                                                              // 9744
var Vector = require('../../math/Vector');                                                                             // 9745
                                                                                                                       // 9746
/**                                                                                                                    // 9747
 *  A spring constraint is like a spring force, except that it is always                                               // 9748
 *    numerically stable (even for low periods), at the expense of introducing                                         // 9749
 *    damping (even with dampingRatio set to 0).                                                                       // 9750
 *                                                                                                                     // 9751
 *    Use this if you need fast spring-like behavior, e.g., snapping                                                   // 9752
 *                                                                                                                     // 9753
 *  @class Snap                                                                                                        // 9754
 *  @constructor                                                                                                       // 9755
 *  @extends Constraint                                                                                                // 9756
 *  @param {Options} [options] An object of configurable options.                                                      // 9757
 *  @param {Number} [options.period] The amount of time in milliseconds taken for one complete oscillation when there is no damping. Range : [150, Infinity]
 *  @param {Number} [options.dampingRatio] Additional damping of the spring. Range : [0, 1]. At 0 this spring will still be damped, at 1 the spring will be critically damped (the spring will never oscillate)
 *  @param {Number} [options.length] The rest length of the spring. Range: [0, Infinity].                              // 9760
 *  @param {Array} [options.anchor] The location of the spring's anchor, if not another physics body.                  // 9761
 *                                                                                                                     // 9762
 */                                                                                                                    // 9763
function Snap(options) {                                                                                               // 9764
    Constraint.call(this);                                                                                             // 9765
                                                                                                                       // 9766
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 9767
    if (options) this.setOptions(options);                                                                             // 9768
                                                                                                                       // 9769
    //registers                                                                                                        // 9770
    this.pDiff  = new Vector();                                                                                        // 9771
    this.vDiff  = new Vector();                                                                                        // 9772
    this.impulse1 = new Vector();                                                                                      // 9773
    this.impulse2 = new Vector();                                                                                      // 9774
}                                                                                                                      // 9775
                                                                                                                       // 9776
Snap.prototype = Object.create(Constraint.prototype);                                                                  // 9777
Snap.prototype.constructor = Snap;                                                                                     // 9778
                                                                                                                       // 9779
Snap.DEFAULT_OPTIONS = {                                                                                               // 9780
    period : 300,                                                                                                      // 9781
    dampingRatio : 0.1,                                                                                                // 9782
    length : 0,                                                                                                        // 9783
    anchor : undefined                                                                                                 // 9784
};                                                                                                                     // 9785
                                                                                                                       // 9786
/** const */ var pi = Math.PI;                                                                                         // 9787
                                                                                                                       // 9788
/**                                                                                                                    // 9789
 * Basic options setter                                                                                                // 9790
 *                                                                                                                     // 9791
 * @method setOptions                                                                                                  // 9792
 * @param options {Objects} options                                                                                    // 9793
 */                                                                                                                    // 9794
Snap.prototype.setOptions = function setOptions(options) {                                                             // 9795
    if (options.anchor !== undefined) {                                                                                // 9796
        if (options.anchor   instanceof Vector) this.options.anchor = options.anchor;                                  // 9797
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 9798
        if (options.anchor   instanceof Array)  this.options.anchor = new Vector(options.anchor);                      // 9799
    }                                                                                                                  // 9800
    if (options.length !== undefined) this.options.length = options.length;                                            // 9801
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 9802
    if (options.period !== undefined) this.options.period = options.period;                                            // 9803
    Constraint.prototype.setOptions.call(this, options);                                                               // 9804
};                                                                                                                     // 9805
                                                                                                                       // 9806
/**                                                                                                                    // 9807
 * Calculates energy of spring                                                                                         // 9808
 *                                                                                                                     // 9809
 * @method getEnergy                                                                                                   // 9810
 * @param targets {Body} target physics body                                                                           // 9811
 * @param source {Body} source physics body                                                                            // 9812
 * @return energy {Number}                                                                                             // 9813
 */                                                                                                                    // 9814
Snap.prototype.getEnergy = function getEnergy(targets, source) {                                                       // 9815
    var options     = this.options;                                                                                    // 9816
    var restLength  = options.length;                                                                                  // 9817
    var anchor      = options.anchor || source.position;                                                               // 9818
    var strength    = Math.pow(2 * pi / options.period, 2);                                                            // 9819
                                                                                                                       // 9820
    var energy = 0.0;                                                                                                  // 9821
    for (var i = 0; i < targets.length; i++){                                                                          // 9822
        var target = targets[i];                                                                                       // 9823
        var dist = anchor.sub(target.position).norm() - restLength;                                                    // 9824
        energy += 0.5 * strength * dist * dist;                                                                        // 9825
    }                                                                                                                  // 9826
    return energy;                                                                                                     // 9827
};                                                                                                                     // 9828
                                                                                                                       // 9829
/**                                                                                                                    // 9830
 * Adds a spring impulse to a physics body's velocity due to the constraint                                            // 9831
 *                                                                                                                     // 9832
 * @method applyConstraint                                                                                             // 9833
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 9834
 * @param source {Body}         The source of the constraint                                                           // 9835
 * @param dt {Number}           Delta time                                                                             // 9836
 */                                                                                                                    // 9837
Snap.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                       // 9838
    var options      = this.options;                                                                                   // 9839
    var pDiff        = this.pDiff;                                                                                     // 9840
    var vDiff        = this.vDiff;                                                                                     // 9841
    var impulse1     = this.impulse1;                                                                                  // 9842
    var impulse2     = this.impulse2;                                                                                  // 9843
    var length       = options.length;                                                                                 // 9844
    var anchor       = options.anchor || source.position;                                                              // 9845
    var period       = options.period;                                                                                 // 9846
    var dampingRatio = options.dampingRatio;                                                                           // 9847
                                                                                                                       // 9848
    for (var i = 0; i < targets.length ; i++) {                                                                        // 9849
        var target = targets[i];                                                                                       // 9850
                                                                                                                       // 9851
        var p1 = target.position;                                                                                      // 9852
        var v1 = target.velocity;                                                                                      // 9853
        var m1 = target.mass;                                                                                          // 9854
        var w1 = target.inverseMass;                                                                                   // 9855
                                                                                                                       // 9856
        pDiff.set(p1.sub(anchor));                                                                                     // 9857
        var dist = pDiff.norm() - length;                                                                              // 9858
        var effMass;                                                                                                   // 9859
                                                                                                                       // 9860
        if (source) {                                                                                                  // 9861
            var w2 = source.inverseMass;                                                                               // 9862
            var v2 = source.velocity;                                                                                  // 9863
            vDiff.set(v1.sub(v2));                                                                                     // 9864
            effMass = 1 / (w1 + w2);                                                                                   // 9865
        }                                                                                                              // 9866
        else {                                                                                                         // 9867
            vDiff.set(v1);                                                                                             // 9868
            effMass = m1;                                                                                              // 9869
        }                                                                                                              // 9870
                                                                                                                       // 9871
        var gamma;                                                                                                     // 9872
        var beta;                                                                                                      // 9873
                                                                                                                       // 9874
        if (this.options.period === 0) {                                                                               // 9875
            gamma = 0;                                                                                                 // 9876
            beta = 1;                                                                                                  // 9877
        }                                                                                                              // 9878
        else {                                                                                                         // 9879
            var k = 4 * effMass * pi * pi / (period * period);                                                         // 9880
            var c = 4 * effMass * pi * dampingRatio / period;                                                          // 9881
                                                                                                                       // 9882
            beta  = dt * k / (c + dt * k);                                                                             // 9883
            gamma = 1 / (c + dt*k);                                                                                    // 9884
        }                                                                                                              // 9885
                                                                                                                       // 9886
        var antiDrift = beta/dt * dist;                                                                                // 9887
        pDiff.normalize(-antiDrift)                                                                                    // 9888
            .sub(vDiff)                                                                                                // 9889
            .mult(dt / (gamma + dt/effMass))                                                                           // 9890
            .put(impulse1);                                                                                            // 9891
                                                                                                                       // 9892
        // var n = new Vector();                                                                                       // 9893
        // n.set(pDiff.normalize());                                                                                   // 9894
        // var lambda = -(n.dot(vDiff) + antiDrift) / (gamma + dt/effMass);                                            // 9895
        // impulse2.set(n.mult(dt*lambda));                                                                            // 9896
                                                                                                                       // 9897
        target.applyImpulse(impulse1);                                                                                 // 9898
                                                                                                                       // 9899
        if (source) {                                                                                                  // 9900
            impulse1.mult(-1).put(impulse2);                                                                           // 9901
            source.applyImpulse(impulse2);                                                                             // 9902
        }                                                                                                              // 9903
    }                                                                                                                  // 9904
};                                                                                                                     // 9905
                                                                                                                       // 9906
module.exports = Snap;                                                                                                 // 9907
},{"../../math/Vector":41,"./Constraint":55}],59:[function(require,module,exports){                                    // 9908
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9909
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9910
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9911
 *                                                                                                                     // 9912
 * Owner: david@famo.us                                                                                                // 9913
 * @license MPL 2.0                                                                                                    // 9914
 * @copyright Famous Industries, Inc. 2014                                                                             // 9915
 */                                                                                                                    // 9916
                                                                                                                       // 9917
var Constraint = require('./Constraint');                                                                              // 9918
var Vector = require('../../math/Vector');                                                                             // 9919
                                                                                                                       // 9920
/**                                                                                                                    // 9921
 *  A constraint that keeps a physics body on a given implicit surface                                                 // 9922
 *    regardless of other physical forces are applied to it.                                                           // 9923
 *                                                                                                                     // 9924
 *  @class Surface                                                                                                     // 9925
 *  @constructor                                                                                                       // 9926
 *  @extends Constraint                                                                                                // 9927
 *  @param {Options} [options] An object of configurable options.                                                      // 9928
 *  @param {Function} [options.equation] An implicitly defined surface f(x,y,z) = 0 that body is constrained to e.g. function(x,y,z) { x*x + y*y + z*z - r*r } corresponds to a sphere of radius r pixels.
 *  @param {Number} [options.period] The spring-like reaction when the constraint is violated.                         // 9930
 *  @param {Number} [options.dampingRatio] The damping-like reaction when the constraint is violated.                  // 9931
 */                                                                                                                    // 9932
function Surface(options) {                                                                                            // 9933
    this.options = Object.create(Surface.DEFAULT_OPTIONS);                                                             // 9934
    if (options) this.setOptions(options);                                                                             // 9935
                                                                                                                       // 9936
    this.J = new Vector();                                                                                             // 9937
    this.impulse  = new Vector();                                                                                      // 9938
                                                                                                                       // 9939
    Constraint.call(this);                                                                                             // 9940
}                                                                                                                      // 9941
                                                                                                                       // 9942
Surface.prototype = Object.create(Constraint.prototype);                                                               // 9943
Surface.prototype.constructor = Surface;                                                                               // 9944
                                                                                                                       // 9945
Surface.DEFAULT_OPTIONS = {                                                                                            // 9946
    equation : undefined,                                                                                              // 9947
    period : 0,                                                                                                        // 9948
    dampingRatio : 0                                                                                                   // 9949
};                                                                                                                     // 9950
                                                                                                                       // 9951
/** @const */ var epsilon = 1e-7;                                                                                      // 9952
/** @const */ var pi = Math.PI;                                                                                        // 9953
                                                                                                                       // 9954
/**                                                                                                                    // 9955
 * Basic options setter                                                                                                // 9956
 *                                                                                                                     // 9957
 * @method setOptions                                                                                                  // 9958
 * @param options {Objects}                                                                                            // 9959
 */                                                                                                                    // 9960
Surface.prototype.setOptions = function setOptions(options) {                                                          // 9961
    for (var key in options) this.options[key] = options[key];                                                         // 9962
};                                                                                                                     // 9963
                                                                                                                       // 9964
/**                                                                                                                    // 9965
 * Adds a surface impulse to a physics body.                                                                           // 9966
 *                                                                                                                     // 9967
 * @method applyConstraint                                                                                             // 9968
 * @param targets {Array.Body} Array of bodies to apply force to.                                                      // 9969
 * @param source {Body} Not applicable                                                                                 // 9970
 * @param dt {Number} Delta time                                                                                       // 9971
 */                                                                                                                    // 9972
Surface.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                    // 9973
    var impulse = this.impulse;                                                                                        // 9974
    var J       = this.J;                                                                                              // 9975
    var options = this.options;                                                                                        // 9976
                                                                                                                       // 9977
    var f = options.equation;                                                                                          // 9978
    var dampingRatio = options.dampingRatio;                                                                           // 9979
    var period = options.period;                                                                                       // 9980
                                                                                                                       // 9981
    for (var i = 0; i < targets.length; i++) {                                                                         // 9982
        var particle = targets[i];                                                                                     // 9983
                                                                                                                       // 9984
        var v = particle.velocity;                                                                                     // 9985
        var p = particle.position;                                                                                     // 9986
        var m = particle.mass;                                                                                         // 9987
                                                                                                                       // 9988
        var gamma;                                                                                                     // 9989
        var beta;                                                                                                      // 9990
                                                                                                                       // 9991
        if (period === 0) {                                                                                            // 9992
            gamma = 0;                                                                                                 // 9993
            beta = 1;                                                                                                  // 9994
        }                                                                                                              // 9995
        else {                                                                                                         // 9996
            var c = 4 * m * pi * dampingRatio / period;                                                                // 9997
            var k = 4 * m * pi * pi / (period * period);                                                               // 9998
                                                                                                                       // 9999
            gamma = 1 / (c + dt*k);                                                                                    // 10000
            beta  = dt*k / (c + dt*k);                                                                                 // 10001
        }                                                                                                              // 10002
                                                                                                                       // 10003
        var x = p.x;                                                                                                   // 10004
        var y = p.y;                                                                                                   // 10005
        var z = p.z;                                                                                                   // 10006
                                                                                                                       // 10007
        var f0  = f(x, y, z);                                                                                          // 10008
        var dfx = (f(x + epsilon, p, p) - f0) / epsilon;                                                               // 10009
        var dfy = (f(x, y + epsilon, p) - f0) / epsilon;                                                               // 10010
        var dfz = (f(x, y, p + epsilon) - f0) / epsilon;                                                               // 10011
        J.setXYZ(dfx, dfy, dfz);                                                                                       // 10012
                                                                                                                       // 10013
        var antiDrift = beta/dt * f0;                                                                                  // 10014
        var lambda = -(J.dot(v) + antiDrift) / (gamma + dt * J.normSquared() / m);                                     // 10015
                                                                                                                       // 10016
        impulse.set(J.mult(dt*lambda));                                                                                // 10017
        particle.applyImpulse(impulse);                                                                                // 10018
    }                                                                                                                  // 10019
};                                                                                                                     // 10020
                                                                                                                       // 10021
module.exports = Surface;                                                                                              // 10022
},{"../../math/Vector":41,"./Constraint":55}],60:[function(require,module,exports){                                    // 10023
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10024
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10025
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10026
 *                                                                                                                     // 10027
 * Owner: david@famo.us                                                                                                // 10028
 * @license MPL 2.0                                                                                                    // 10029
 * @copyright Famous Industries, Inc. 2014                                                                             // 10030
 */                                                                                                                    // 10031
                                                                                                                       // 10032
var Constraint = require('./Constraint');                                                                              // 10033
var Vector = require('../../math/Vector');                                                                             // 10034
                                                                                                                       // 10035
/**                                                                                                                    // 10036
 *  A wall describes an infinite two-dimensional plane that physics bodies                                             // 10037
 *    can collide with. To define a wall, you must give it a distance (from                                            // 10038
 *    the center of the physics engine's origin, and a normal defining the plane                                       // 10039
 *    of the wall.                                                                                                     // 10040
 *                                                                                                                     // 10041
 *    (wall)                                                                                                           // 10042
 *      |                                                                                                              // 10043
 *      | (normal)     (origin)                                                                                        // 10044
 *      | --->            *                                                                                            // 10045
 *      |                                                                                                              // 10046
 *      |    (distance)                                                                                                // 10047
 *      ...................                                                                                            // 10048
 *            (100px)                                                                                                  // 10049
 *                                                                                                                     // 10050
 *      e.g., Wall({normal : [1,0,0], distance : 100})                                                                 // 10051
 *      would be a wall 100 pixels to the left, whose normal points right                                              // 10052
 *                                                                                                                     // 10053
 *  @class Wall                                                                                                        // 10054
 *  @constructor                                                                                                       // 10055
 *  @extends Constraint                                                                                                // 10056
 *  @param {Options} [options] An object of configurable options.                                                      // 10057
 *  @param {Number} [options.restitution] The energy ratio lost in a collision (0 = stick, 1 = elastic). Range : [0, 1]
 *  @param {Number} [options.drift] Baumgarte stabilization parameter. Makes constraints "loosely" (0) or "tightly" (1) enforced. Range : [0, 1]
 *  @param {Number} [options.slop] Amount of penetration in pixels to ignore before collision event triggers.          // 10060
 *  @param {Array} [options.normal] The normal direction to the wall.                                                  // 10061
 *  @param {Number} [options.distance] The distance from the origin that the wall is placed.                           // 10062
 *  @param {onContact} [options.onContact] How to handle collision against the wall.                                   // 10063
 *                                                                                                                     // 10064
 */                                                                                                                    // 10065
function Wall(options) {                                                                                               // 10066
    this.options = Object.create(Wall.DEFAULT_OPTIONS);                                                                // 10067
    if (options) this.setOptions(options);                                                                             // 10068
                                                                                                                       // 10069
    //registers                                                                                                        // 10070
    this.diff = new Vector();                                                                                          // 10071
    this.impulse = new Vector();                                                                                       // 10072
                                                                                                                       // 10073
    Constraint.call(this);                                                                                             // 10074
}                                                                                                                      // 10075
                                                                                                                       // 10076
Wall.prototype = Object.create(Constraint.prototype);                                                                  // 10077
Wall.prototype.constructor = Wall;                                                                                     // 10078
                                                                                                                       // 10079
/**                                                                                                                    // 10080
 * @property Wall.ON_CONTACT                                                                                           // 10081
 * @type Object                                                                                                        // 10082
 * @protected                                                                                                          // 10083
 * @static                                                                                                             // 10084
 */                                                                                                                    // 10085
Wall.ON_CONTACT = {                                                                                                    // 10086
                                                                                                                       // 10087
    /**                                                                                                                // 10088
     * Physical bodies bounce off the wall                                                                             // 10089
     * @attribute REFLECT                                                                                              // 10090
     */                                                                                                                // 10091
    REFLECT : 0,                                                                                                       // 10092
                                                                                                                       // 10093
    /**                                                                                                                // 10094
     * Physical bodies are unaffected. Usecase is to fire events on contact.                                           // 10095
     * @attribute SILENT                                                                                               // 10096
     */                                                                                                                // 10097
    SILENT : 1                                                                                                         // 10098
};                                                                                                                     // 10099
                                                                                                                       // 10100
Wall.DEFAULT_OPTIONS = {                                                                                               // 10101
    restitution : 0.5,                                                                                                 // 10102
    drift : 0.5,                                                                                                       // 10103
    slop : 0,                                                                                                          // 10104
    normal : [1, 0, 0],                                                                                                // 10105
    distance : 0,                                                                                                      // 10106
    onContact : Wall.ON_CONTACT.REFLECT                                                                                // 10107
};                                                                                                                     // 10108
                                                                                                                       // 10109
/*                                                                                                                     // 10110
 * Setter for options.                                                                                                 // 10111
 *                                                                                                                     // 10112
 * @method setOptions                                                                                                  // 10113
 * @param options {Objects}                                                                                            // 10114
 */                                                                                                                    // 10115
Wall.prototype.setOptions = function setOptions(options) {                                                             // 10116
    if (options.normal !== undefined) {                                                                                // 10117
        if (options.normal instanceof Vector) this.options.normal = options.normal.clone();                            // 10118
        if (options.normal instanceof Array)  this.options.normal = new Vector(options.normal);                        // 10119
    }                                                                                                                  // 10120
    if (options.restitution !== undefined) this.options.restitution = options.restitution;                             // 10121
    if (options.drift !== undefined) this.options.drift = options.drift;                                               // 10122
    if (options.slop !== undefined) this.options.slop = options.slop;                                                  // 10123
    if (options.distance !== undefined) this.options.distance = options.distance;                                      // 10124
    if (options.onContact !== undefined) this.options.onContact = options.onContact;                                   // 10125
};                                                                                                                     // 10126
                                                                                                                       // 10127
function _getNormalVelocity(n, v) {                                                                                    // 10128
    return v.dot(n);                                                                                                   // 10129
}                                                                                                                      // 10130
                                                                                                                       // 10131
function _getDistanceFromOrigin(p) {                                                                                   // 10132
    var n = this.options.normal;                                                                                       // 10133
    var d = this.options.distance;                                                                                     // 10134
    return p.dot(n) + d;                                                                                               // 10135
}                                                                                                                      // 10136
                                                                                                                       // 10137
function _onEnter(particle, overlap, dt) {                                                                             // 10138
    var p = particle.position;                                                                                         // 10139
    var v = particle.velocity;                                                                                         // 10140
    var m = particle.mass;                                                                                             // 10141
    var n = this.options.normal;                                                                                       // 10142
    var action = this.options.onContact;                                                                               // 10143
    var restitution = this.options.restitution;                                                                        // 10144
    var impulse = this.impulse;                                                                                        // 10145
                                                                                                                       // 10146
    var drift = this.options.drift;                                                                                    // 10147
    var slop = -this.options.slop;                                                                                     // 10148
    var gamma = 0;                                                                                                     // 10149
                                                                                                                       // 10150
    if (this._eventOutput) {                                                                                           // 10151
        var data = {particle : particle, wall : this, overlap : overlap, normal : n};                                  // 10152
        this._eventOutput.emit('preCollision', data);                                                                  // 10153
        this._eventOutput.emit('collision', data);                                                                     // 10154
    }                                                                                                                  // 10155
                                                                                                                       // 10156
    switch (action) {                                                                                                  // 10157
        case Wall.ON_CONTACT.REFLECT:                                                                                  // 10158
            var lambda = (overlap < slop)                                                                              // 10159
                ? -((1 + restitution) * n.dot(v) + drift / dt * (overlap - slop)) / (m * dt + gamma)                   // 10160
                : -((1 + restitution) * n.dot(v)) / (m * dt + gamma);                                                  // 10161
                                                                                                                       // 10162
            impulse.set(n.mult(dt * lambda));                                                                          // 10163
            particle.applyImpulse(impulse);                                                                            // 10164
            particle.setPosition(p.add(n.mult(-overlap)));                                                             // 10165
            break;                                                                                                     // 10166
    }                                                                                                                  // 10167
                                                                                                                       // 10168
    if (this._eventOutput) this._eventOutput.emit('postCollision', data);                                              // 10169
}                                                                                                                      // 10170
                                                                                                                       // 10171
function _onExit(particle, overlap, dt) {                                                                              // 10172
    var action = this.options.onContact;                                                                               // 10173
    var p = particle.position;                                                                                         // 10174
    var n = this.options.normal;                                                                                       // 10175
                                                                                                                       // 10176
    if (action === Wall.ON_CONTACT.REFLECT) {                                                                          // 10177
        particle.setPosition(p.add(n.mult(-overlap)));                                                                 // 10178
    }                                                                                                                  // 10179
}                                                                                                                      // 10180
                                                                                                                       // 10181
/**                                                                                                                    // 10182
 * Adds an impulse to a physics body's velocity due to the wall constraint                                             // 10183
 *                                                                                                                     // 10184
 * @method applyConstraint                                                                                             // 10185
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 10186
 * @param source {Body}         The source of the constraint                                                           // 10187
 * @param dt {Number}           Delta time                                                                             // 10188
 */                                                                                                                    // 10189
Wall.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                       // 10190
    var n = this.options.normal;                                                                                       // 10191
                                                                                                                       // 10192
    for (var i = 0; i < targets.length; i++) {                                                                         // 10193
        var particle = targets[i];                                                                                     // 10194
        var p = particle.position;                                                                                     // 10195
        var v = particle.velocity;                                                                                     // 10196
        var r = particle.radius || 0;                                                                                  // 10197
                                                                                                                       // 10198
        var overlap = _getDistanceFromOrigin.call(this, p.add(n.mult(-r)));                                            // 10199
        var nv = _getNormalVelocity.call(this, n, v);                                                                  // 10200
                                                                                                                       // 10201
        if (overlap <= 0) {                                                                                            // 10202
            if (nv < 0) _onEnter.call(this, particle, overlap, dt);                                                    // 10203
            else _onExit.call(this, particle, overlap, dt);                                                            // 10204
        }                                                                                                              // 10205
    }                                                                                                                  // 10206
};                                                                                                                     // 10207
                                                                                                                       // 10208
module.exports = Wall;                                                                                                 // 10209
},{"../../math/Vector":41,"./Constraint":55}],61:[function(require,module,exports){                                    // 10210
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10211
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10212
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10213
 *                                                                                                                     // 10214
 * Owner: david@famo.us                                                                                                // 10215
 * @license MPL 2.0                                                                                                    // 10216
 * @copyright Famous Industries, Inc. 2014                                                                             // 10217
 */                                                                                                                    // 10218
                                                                                                                       // 10219
var Constraint = require('./Constraint');                                                                              // 10220
var Wall = require('./Wall');                                                                                          // 10221
var Vector = require('../../math/Vector');                                                                             // 10222
                                                                                                                       // 10223
/**                                                                                                                    // 10224
 *  Walls combines one or more Wall primitives and exposes a simple API to                                             // 10225
 *  interact with several walls at once. A common use case would be to set up                                          // 10226
 *  a bounding box for a physics body, that would collide with each side.                                              // 10227
 *                                                                                                                     // 10228
 *  @class Walls                                                                                                       // 10229
 *  @constructor                                                                                                       // 10230
 *  @extends Constraint                                                                                                // 10231
 *  @uses Wall                                                                                                         // 10232
 *  @param {Options} [options] An object of configurable options.                                                      // 10233
 *  @param {Array} [options.sides] An array of sides e.g., [Walls.LEFT, Walls.TOP]                                     // 10234
 *  @param {Array} [options.size] The size of the bounding box of the walls.                                           // 10235
 *  @param {Array} [options.origin] The center of the wall relative to the size.                                       // 10236
 *  @param {Array} [options.drift] Baumgarte stabilization parameter. Makes constraints "loosely" (0) or "tightly" (1) enforced. Range : [0, 1]
 *  @param {Array} [options.slop] Amount of penetration in pixels to ignore before collision event triggers.           // 10238
 *  @param {Array} [options.restitution] The energy ratio lost in a collision (0 = stick, 1 = elastic) The energy ratio lost in a collision (0 = stick, 1 = elastic)
 *  @param {Array} [options.onContact] How to handle collision against the wall.                                       // 10240
 */                                                                                                                    // 10241
function Walls(options) {                                                                                              // 10242
    this.options = Object.create(Walls.DEFAULT_OPTIONS);                                                               // 10243
    if (options) this.setOptions(options);                                                                             // 10244
    _createComponents.call(this, options.sides || this.options.sides);                                                 // 10245
                                                                                                                       // 10246
    Constraint.call(this);                                                                                             // 10247
}                                                                                                                      // 10248
                                                                                                                       // 10249
Walls.prototype = Object.create(Constraint.prototype);                                                                 // 10250
Walls.prototype.constructor = Walls;                                                                                   // 10251
/**                                                                                                                    // 10252
 * @property Walls.ON_CONTACT                                                                                          // 10253
 * @type Object                                                                                                        // 10254
 * @extends Wall.ON_CONTACT                                                                                            // 10255
 * @static                                                                                                             // 10256
 */                                                                                                                    // 10257
Walls.ON_CONTACT = Wall.ON_CONTACT;                                                                                    // 10258
                                                                                                                       // 10259
/**                                                                                                                    // 10260
 * An enumeration of common types of walls                                                                             // 10261
 *    LEFT, RIGHT, TOP, BOTTOM, FRONT, BACK                                                                            // 10262
 *    TWO_DIMENSIONAL, THREE_DIMENSIONAL                                                                               // 10263
 *                                                                                                                     // 10264
 * @property Walls.SIDES                                                                                               // 10265
 * @type Object                                                                                                        // 10266
 * @final                                                                                                              // 10267
 * @static                                                                                                             // 10268
 */                                                                                                                    // 10269
Walls.SIDES = {                                                                                                        // 10270
    LEFT   : 0,                                                                                                        // 10271
    RIGHT  : 1,                                                                                                        // 10272
    TOP    : 2,                                                                                                        // 10273
    BOTTOM : 3,                                                                                                        // 10274
    FRONT  : 4,                                                                                                        // 10275
    BACK   : 5,                                                                                                        // 10276
    TWO_DIMENSIONAL : [0, 1, 2, 3],                                                                                    // 10277
    THREE_DIMENSIONAL : [0, 1, 2, 3, 4, 5]                                                                             // 10278
};                                                                                                                     // 10279
                                                                                                                       // 10280
Walls.DEFAULT_OPTIONS = {                                                                                              // 10281
    sides : Walls.SIDES.TWO_DIMENSIONAL,                                                                               // 10282
    size : [window.innerWidth, window.innerHeight, 0],                                                                 // 10283
    origin : [.5, .5, .5],                                                                                             // 10284
    drift : 0.5,                                                                                                       // 10285
    slop : 0,                                                                                                          // 10286
    restitution : 0.5,                                                                                                 // 10287
    onContact : Walls.ON_CONTACT.REFLECT                                                                               // 10288
};                                                                                                                     // 10289
                                                                                                                       // 10290
var _SIDE_NORMALS = {                                                                                                  // 10291
    0 : new Vector(1, 0, 0),                                                                                           // 10292
    1 : new Vector(-1, 0, 0),                                                                                          // 10293
    2 : new Vector(0, 1, 0),                                                                                           // 10294
    3 : new Vector(0,-1, 0),                                                                                           // 10295
    4 : new Vector(0, 0, 1),                                                                                           // 10296
    5 : new Vector(0, 0,-1)                                                                                            // 10297
};                                                                                                                     // 10298
                                                                                                                       // 10299
function _getDistance(side, size, origin) {                                                                            // 10300
    var distance;                                                                                                      // 10301
    var SIDES = Walls.SIDES;                                                                                           // 10302
    switch (parseInt(side)) {                                                                                          // 10303
        case SIDES.LEFT:                                                                                               // 10304
            distance = size[0] * origin[0];                                                                            // 10305
            break;                                                                                                     // 10306
        case SIDES.TOP:                                                                                                // 10307
            distance = size[1] * origin[1];                                                                            // 10308
            break;                                                                                                     // 10309
        case SIDES.FRONT:                                                                                              // 10310
            distance = size[2] * origin[2];                                                                            // 10311
            break;                                                                                                     // 10312
        case SIDES.RIGHT:                                                                                              // 10313
            distance = size[0] * (1 - origin[0]);                                                                      // 10314
            break;                                                                                                     // 10315
        case SIDES.BOTTOM:                                                                                             // 10316
            distance = size[1] * (1 - origin[1]);                                                                      // 10317
            break;                                                                                                     // 10318
        case SIDES.BACK:                                                                                               // 10319
            distance = size[2] * (1 - origin[2]);                                                                      // 10320
            break;                                                                                                     // 10321
    }                                                                                                                  // 10322
    return distance;                                                                                                   // 10323
}                                                                                                                      // 10324
                                                                                                                       // 10325
/*                                                                                                                     // 10326
 * Setter for options.                                                                                                 // 10327
 *                                                                                                                     // 10328
 * @method setOptions                                                                                                  // 10329
 * @param options {Objects}                                                                                            // 10330
 */                                                                                                                    // 10331
Walls.prototype.setOptions = function setOptions(options) {                                                            // 10332
    var resizeFlag = false;                                                                                            // 10333
    if (options.restitution !== undefined) _setOptionsForEach.call(this, {restitution : options.restitution});         // 10334
    if (options.drift !== undefined) _setOptionsForEach.call(this, {drift : options.drift});                           // 10335
    if (options.slop !== undefined) _setOptionsForEach.call(this, {slop : options.slop});                              // 10336
    if (options.onContact !== undefined) _setOptionsForEach.call(this, {onContact : options.onContact});               // 10337
    if (options.size !== undefined) resizeFlag = true;                                                                 // 10338
    if (options.sides !== undefined) this.options.sides = options.sides;                                               // 10339
    if (options.origin !== undefined) resizeFlag = true;                                                               // 10340
    if (resizeFlag) this.setSize(options.size, options.origin);                                                        // 10341
};                                                                                                                     // 10342
                                                                                                                       // 10343
function _createComponents(sides) {                                                                                    // 10344
    this.components = {};                                                                                              // 10345
    var components = this.components;                                                                                  // 10346
                                                                                                                       // 10347
    for (var i = 0; i < sides.length; i++) {                                                                           // 10348
        var side = sides[i];                                                                                           // 10349
        components[i] = new Wall({                                                                                     // 10350
            normal   : _SIDE_NORMALS[side].clone(),                                                                    // 10351
            distance : _getDistance(side, this.options.size, this.options.origin)                                      // 10352
        });                                                                                                            // 10353
    }                                                                                                                  // 10354
}                                                                                                                      // 10355
                                                                                                                       // 10356
/*                                                                                                                     // 10357
 * Setter for size.                                                                                                    // 10358
 *                                                                                                                     // 10359
 * @method setOptions                                                                                                  // 10360
 * @param options {Objects}                                                                                            // 10361
 */                                                                                                                    // 10362
Walls.prototype.setSize = function setSize(size, origin) {                                                             // 10363
    origin = origin || this.options.origin;                                                                            // 10364
    if (origin.length < 3) origin[2] = 0.5;                                                                            // 10365
                                                                                                                       // 10366
    this.forEach(function(wall, side) {                                                                                // 10367
        var d = _getDistance(side, size, origin);                                                                      // 10368
        wall.setOptions({distance : d});                                                                               // 10369
    });                                                                                                                // 10370
                                                                                                                       // 10371
    this.options.size   = size;                                                                                        // 10372
    this.options.origin = origin;                                                                                      // 10373
};                                                                                                                     // 10374
                                                                                                                       // 10375
function _setOptionsForEach(options) {                                                                                 // 10376
    this.forEach(function(wall) {                                                                                      // 10377
        wall.setOptions(options);                                                                                      // 10378
    });                                                                                                                // 10379
    for (var key in options) this.options[key] = options[key];                                                         // 10380
}                                                                                                                      // 10381
                                                                                                                       // 10382
/**                                                                                                                    // 10383
 * Adds an impulse to a physics body's velocity due to the walls constraint                                            // 10384
 *                                                                                                                     // 10385
 * @method applyConstraint                                                                                             // 10386
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 10387
 * @param source {Body}         The source of the constraint                                                           // 10388
 * @param dt {Number}           Delta time                                                                             // 10389
 */                                                                                                                    // 10390
Walls.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                      // 10391
    this.forEach(function(wall) {                                                                                      // 10392
        wall.applyConstraint(targets, source, dt);                                                                     // 10393
    });                                                                                                                // 10394
};                                                                                                                     // 10395
                                                                                                                       // 10396
/**                                                                                                                    // 10397
 * Apply a method to each wall making up the walls                                                                     // 10398
 *                                                                                                                     // 10399
 * @method applyConstraint                                                                                             // 10400
 * @param fn {Function}  Function that takes in a wall as its first parameter                                          // 10401
 */                                                                                                                    // 10402
Walls.prototype.forEach = function forEach(fn) {                                                                       // 10403
    var sides = this.options.sides;                                                                                    // 10404
    for (var key in this.sides) fn(sides[key], key);                                                                   // 10405
};                                                                                                                     // 10406
                                                                                                                       // 10407
/**                                                                                                                    // 10408
 * Rotates the walls by an angle in the XY-plane                                                                       // 10409
 *                                                                                                                     // 10410
 * @method applyConstraint                                                                                             // 10411
 * @param angle {Function}                                                                                             // 10412
 */                                                                                                                    // 10413
Walls.prototype.rotateZ = function rotateZ(angle) {                                                                    // 10414
    this.forEach(function(wall) {                                                                                      // 10415
        var n = wall.options.normal;                                                                                   // 10416
        n.rotateZ(angle).put(n);                                                                                       // 10417
    });                                                                                                                // 10418
};                                                                                                                     // 10419
                                                                                                                       // 10420
/**                                                                                                                    // 10421
 * Rotates the walls by an angle in the YZ-plane                                                                       // 10422
 *                                                                                                                     // 10423
 * @method applyConstraint                                                                                             // 10424
 * @param angle {Function}                                                                                             // 10425
 */                                                                                                                    // 10426
Walls.prototype.rotateX = function rotateX(angle) {                                                                    // 10427
    this.forEach(function(wall) {                                                                                      // 10428
        var n = wall.options.normal;                                                                                   // 10429
        n.rotateX(angle).put(n);                                                                                       // 10430
    });                                                                                                                // 10431
};                                                                                                                     // 10432
                                                                                                                       // 10433
/**                                                                                                                    // 10434
 * Rotates the walls by an angle in the XZ-plane                                                                       // 10435
 *                                                                                                                     // 10436
 * @method applyConstraint                                                                                             // 10437
 * @param angle {Function}                                                                                             // 10438
 */                                                                                                                    // 10439
Walls.prototype.rotateY = function rotateY(angle) {                                                                    // 10440
    this.forEach(function(wall) {                                                                                      // 10441
        var n = wall.options.normal;                                                                                   // 10442
        n.rotateY(angle).put(n);                                                                                       // 10443
    });                                                                                                                // 10444
};                                                                                                                     // 10445
                                                                                                                       // 10446
module.exports = Walls;                                                                                                // 10447
},{"../../math/Vector":41,"./Constraint":55,"./Wall":60}],62:[function(require,module,exports){                        // 10448
module.exports = {                                                                                                     // 10449
  Collision: require('./Collision'),                                                                                   // 10450
  Constraint: require('./Constraint'),                                                                                 // 10451
  Curve: require('./Curve'),                                                                                           // 10452
  Distance: require('./Distance'),                                                                                     // 10453
  Snap: require('./Snap'),                                                                                             // 10454
  Surface: require('./Surface'),                                                                                       // 10455
  Wall: require('./Wall'),                                                                                             // 10456
  Walls: require('./Walls')                                                                                            // 10457
};                                                                                                                     // 10458
                                                                                                                       // 10459
},{"./Collision":54,"./Constraint":55,"./Curve":56,"./Distance":57,"./Snap":58,"./Surface":59,"./Wall":60,"./Walls":61}],63:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10461
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10462
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10463
 *                                                                                                                     // 10464
 * Owner: david@famo.us                                                                                                // 10465
 * @license MPL 2.0                                                                                                    // 10466
 * @copyright Famous Industries, Inc. 2014                                                                             // 10467
 */                                                                                                                    // 10468
                                                                                                                       // 10469
var Force = require('./Force');                                                                                        // 10470
                                                                                                                       // 10471
/**                                                                                                                    // 10472
 * Drag is a force that opposes velocity. Attach it to the physics engine                                              // 10473
 * to slow down a physics body in motion.                                                                              // 10474
 *                                                                                                                     // 10475
 * @class Drag                                                                                                         // 10476
 * @constructor                                                                                                        // 10477
 * @extends Force                                                                                                      // 10478
 * @param {Object} options options to set on drag                                                                      // 10479
 */                                                                                                                    // 10480
function Drag(options) {                                                                                               // 10481
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 10482
    if (options) this.setOptions(options);                                                                             // 10483
                                                                                                                       // 10484
    Force.call(this);                                                                                                  // 10485
}                                                                                                                      // 10486
                                                                                                                       // 10487
Drag.prototype = Object.create(Force.prototype);                                                                       // 10488
Drag.prototype.constructor = Drag;                                                                                     // 10489
                                                                                                                       // 10490
/**                                                                                                                    // 10491
 * @property Drag.FORCE_FUNCTIONS                                                                                      // 10492
 * @type Object                                                                                                        // 10493
 * @protected                                                                                                          // 10494
 * @static                                                                                                             // 10495
 */                                                                                                                    // 10496
Drag.FORCE_FUNCTIONS = {                                                                                               // 10497
                                                                                                                       // 10498
    /**                                                                                                                // 10499
     * A drag force proportional to the velocity                                                                       // 10500
     * @attribute LINEAR                                                                                               // 10501
     * @type Function                                                                                                  // 10502
     * @param {Vector} velocity                                                                                        // 10503
     * @return {Vector} drag force                                                                                     // 10504
     */                                                                                                                // 10505
    LINEAR : function(velocity) {                                                                                      // 10506
        return velocity;                                                                                               // 10507
    },                                                                                                                 // 10508
                                                                                                                       // 10509
    /**                                                                                                                // 10510
     * A drag force proportional to the square of the velocity                                                         // 10511
     * @attribute QUADRATIC                                                                                            // 10512
     * @type Function                                                                                                  // 10513
     * @param {Vector} velocity                                                                                        // 10514
     * @return {Vector} drag force                                                                                     // 10515
     */                                                                                                                // 10516
    QUADRATIC : function(velocity) {                                                                                   // 10517
        return velocity.mult(velocity.norm());                                                                         // 10518
    }                                                                                                                  // 10519
};                                                                                                                     // 10520
                                                                                                                       // 10521
/**                                                                                                                    // 10522
 * @property Drag.DEFAULT_OPTIONS                                                                                      // 10523
 * @type Object                                                                                                        // 10524
 * @protected                                                                                                          // 10525
 * @static                                                                                                             // 10526
 */                                                                                                                    // 10527
Drag.DEFAULT_OPTIONS = {                                                                                               // 10528
                                                                                                                       // 10529
    /**                                                                                                                // 10530
     * The strength of the force                                                                                       // 10531
     *    Range : [0, 0.1]                                                                                             // 10532
     * @attribute strength                                                                                             // 10533
     * @type Number                                                                                                    // 10534
     * @default 0.01                                                                                                   // 10535
     */                                                                                                                // 10536
    strength : 0.01,                                                                                                   // 10537
                                                                                                                       // 10538
    /**                                                                                                                // 10539
     * The type of opposing force                                                                                      // 10540
     * @attribute forceFunction                                                                                        // 10541
     * @type Function                                                                                                  // 10542
     */                                                                                                                // 10543
    forceFunction : Drag.FORCE_FUNCTIONS.LINEAR                                                                        // 10544
};                                                                                                                     // 10545
                                                                                                                       // 10546
/**                                                                                                                    // 10547
 * Adds a drag force to a physics body's force accumulator.                                                            // 10548
 *                                                                                                                     // 10549
 * @method applyForce                                                                                                  // 10550
 * @param targets {Array.Body} Array of bodies to apply drag force to.                                                 // 10551
 */                                                                                                                    // 10552
Drag.prototype.applyForce = function applyForce(targets) {                                                             // 10553
    var strength        = this.options.strength;                                                                       // 10554
    var forceFunction   = this.options.forceFunction;                                                                  // 10555
    var force           = this.force;                                                                                  // 10556
    var index;                                                                                                         // 10557
    var particle;                                                                                                      // 10558
                                                                                                                       // 10559
    for (index = 0; index < targets.length; index++) {                                                                 // 10560
        particle = targets[index];                                                                                     // 10561
        forceFunction(particle.velocity).mult(-strength).put(force);                                                   // 10562
        particle.applyForce(force);                                                                                    // 10563
    }                                                                                                                  // 10564
};                                                                                                                     // 10565
                                                                                                                       // 10566
/**                                                                                                                    // 10567
 * Basic options setter                                                                                                // 10568
 *                                                                                                                     // 10569
 * @method setOptions                                                                                                  // 10570
 * @param {Objects} options                                                                                            // 10571
 */                                                                                                                    // 10572
Drag.prototype.setOptions = function setOptions(options) {                                                             // 10573
    for (var key in options) this.options[key] = options[key];                                                         // 10574
};                                                                                                                     // 10575
                                                                                                                       // 10576
module.exports = Drag;                                                                                                 // 10577
},{"./Force":64}],64:[function(require,module,exports){                                                                // 10578
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10579
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10580
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10581
 *                                                                                                                     // 10582
 * Owner: david@famo.us                                                                                                // 10583
 * @license MPL 2.0                                                                                                    // 10584
 * @copyright Famous Industries, Inc. 2014                                                                             // 10585
 */                                                                                                                    // 10586
                                                                                                                       // 10587
var Vector = require('../../math/Vector');                                                                             // 10588
var EventHandler = require('../../core/EventHandler');                                                                 // 10589
                                                                                                                       // 10590
/**                                                                                                                    // 10591
 * Force base class.                                                                                                   // 10592
 *                                                                                                                     // 10593
 * @class Force                                                                                                        // 10594
 * @uses EventHandler                                                                                                  // 10595
 * @constructor                                                                                                        // 10596
 */                                                                                                                    // 10597
function Force(force) {                                                                                                // 10598
    this.force = new Vector(force);                                                                                    // 10599
    this._eventOutput = new EventHandler();                                                                            // 10600
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 10601
}                                                                                                                      // 10602
                                                                                                                       // 10603
/**                                                                                                                    // 10604
 * Basic setter for options                                                                                            // 10605
 *                                                                                                                     // 10606
 * @method setOptions                                                                                                  // 10607
 * @param options {Objects}                                                                                            // 10608
 */                                                                                                                    // 10609
Force.prototype.setOptions = function setOptions(options) {                                                            // 10610
    this._eventOutput.emit('change', options);                                                                         // 10611
};                                                                                                                     // 10612
                                                                                                                       // 10613
/**                                                                                                                    // 10614
 * Adds a force to a physics body's force accumulator.                                                                 // 10615
 *                                                                                                                     // 10616
 * @method applyForce                                                                                                  // 10617
 * @param targets {Array.Body} Array of bodies to apply a force to.                                                    // 10618
 */                                                                                                                    // 10619
Force.prototype.applyForce = function applyForce(targets) {                                                            // 10620
    var length = targets.length;                                                                                       // 10621
    while (length--) {                                                                                                 // 10622
        targets[length].applyForce(this.force);                                                                        // 10623
    }                                                                                                                  // 10624
};                                                                                                                     // 10625
                                                                                                                       // 10626
/**                                                                                                                    // 10627
 * Getter for a force's potential energy.                                                                              // 10628
 *                                                                                                                     // 10629
 * @method getEnergy                                                                                                   // 10630
 * @return energy {Number}                                                                                             // 10631
 */                                                                                                                    // 10632
Force.prototype.getEnergy = function getEnergy() {                                                                     // 10633
    return 0.0;                                                                                                        // 10634
};                                                                                                                     // 10635
                                                                                                                       // 10636
module.exports = Force;                                                                                                // 10637
},{"../../core/EventHandler":7,"../../math/Vector":41}],65:[function(require,module,exports){                          // 10638
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10639
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10640
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10641
 *                                                                                                                     // 10642
 * Owner: david@famo.us                                                                                                // 10643
 * @license MPL 2.0                                                                                                    // 10644
 * @copyright Famous Industries, Inc. 2014                                                                             // 10645
 */                                                                                                                    // 10646
                                                                                                                       // 10647
var Force = require('./Force');                                                                                        // 10648
var Vector = require('../../math/Vector');                                                                             // 10649
                                                                                                                       // 10650
/**                                                                                                                    // 10651
 *  Repulsion is a force that repels (attracts) bodies away (towards)                                                  // 10652
 *    each other. A repulsion of negative strength is attractive.                                                      // 10653
 *                                                                                                                     // 10654
 *  @class Repulsion                                                                                                   // 10655
 *  @constructor                                                                                                       // 10656
 *  @extends Force                                                                                                     // 10657
 *  @param {Object} options overwrites default options                                                                 // 10658
 */                                                                                                                    // 10659
function Repulsion(options) {                                                                                          // 10660
    this.options = Object.create(Repulsion.DEFAULT_OPTIONS);                                                           // 10661
    if (options) this.setOptions(options);                                                                             // 10662
                                                                                                                       // 10663
    //registers                                                                                                        // 10664
    this.disp  = new Vector();                                                                                         // 10665
                                                                                                                       // 10666
    Force.call(this);                                                                                                  // 10667
}                                                                                                                      // 10668
                                                                                                                       // 10669
Repulsion.prototype = Object.create(Force.prototype);                                                                  // 10670
Repulsion.prototype.constructor = Repulsion;                                                                           // 10671
/**                                                                                                                    // 10672
 * @property Repulsion.DECAY_FUNCTIONS                                                                                 // 10673
 * @type Object                                                                                                        // 10674
 * @protected                                                                                                          // 10675
 * @static                                                                                                             // 10676
 */                                                                                                                    // 10677
Repulsion.DECAY_FUNCTIONS = {                                                                                          // 10678
                                                                                                                       // 10679
    /**                                                                                                                // 10680
     * A linear decay function                                                                                         // 10681
     * @attribute LINEAR                                                                                               // 10682
     * @type Function                                                                                                  // 10683
     * @param {Number} r distance from the source body                                                                 // 10684
     * @param {Number} cutoff the effective radius of influence                                                        // 10685
     */                                                                                                                // 10686
    LINEAR : function(r, cutoff) {                                                                                     // 10687
        return Math.max(1 - (1 / cutoff) * r, 0);                                                                      // 10688
    },                                                                                                                 // 10689
                                                                                                                       // 10690
    /**                                                                                                                // 10691
     * A Morse potential decay function (http://en.wikipedia.org/wiki/Morse_potential)                                 // 10692
     * @attribute MORSE                                                                                                // 10693
     * @type Function                                                                                                  // 10694
     * @param {Number} r distance from the source body                                                                 // 10695
     * @param {Number} cutoff the minimum radius of influence                                                          // 10696
     */                                                                                                                // 10697
    MORSE : function(r, cutoff) {                                                                                      // 10698
        var r0 = (cutoff === 0) ? 100 : cutoff;                                                                        // 10699
        var rShifted = r + r0 * (1 - Math.log(2)); //shift by x-intercept                                              // 10700
        return Math.max(1 - Math.pow(1 - Math.exp(rShifted/r0 - 1), 2), 0);                                            // 10701
    },                                                                                                                 // 10702
                                                                                                                       // 10703
    /**                                                                                                                // 10704
     * An inverse distance decay function                                                                              // 10705
     * @attribute INVERSE                                                                                              // 10706
     * @type Function                                                                                                  // 10707
     * @param {Number} r distance from the source body                                                                 // 10708
     * @param {Number} cutoff a distance shift to avoid singularities                                                  // 10709
     */                                                                                                                // 10710
    INVERSE : function(r, cutoff) {                                                                                    // 10711
        return 1 / (1 - cutoff + r);                                                                                   // 10712
    },                                                                                                                 // 10713
                                                                                                                       // 10714
    /**                                                                                                                // 10715
     * An inverse squared distance decay function                                                                      // 10716
     * @attribute GRAVITY                                                                                              // 10717
     * @type Function                                                                                                  // 10718
     * @param {Number} r distance from the source body                                                                 // 10719
     * @param {Number} cutoff a distance shift to avoid singularities                                                  // 10720
     */                                                                                                                // 10721
    GRAVITY : function(r, cutoff) {                                                                                    // 10722
        return 1 / (1 - cutoff + r*r);                                                                                 // 10723
    }                                                                                                                  // 10724
};                                                                                                                     // 10725
                                                                                                                       // 10726
/**                                                                                                                    // 10727
 * @property Repulsion.DEFAULT_OPTIONS                                                                                 // 10728
 * @type Object                                                                                                        // 10729
 * @protected                                                                                                          // 10730
 * @static                                                                                                             // 10731
 */                                                                                                                    // 10732
Repulsion.DEFAULT_OPTIONS = {                                                                                          // 10733
                                                                                                                       // 10734
    /**                                                                                                                // 10735
     * The strength of the force                                                                                       // 10736
     *    Range : [0, 100]                                                                                             // 10737
     * @attribute strength                                                                                             // 10738
     * @type Number                                                                                                    // 10739
     * @default 1                                                                                                      // 10740
     */                                                                                                                // 10741
    strength : 1,                                                                                                      // 10742
                                                                                                                       // 10743
    /**                                                                                                                // 10744
     * The location of the force, if not another physics body                                                          // 10745
     *                                                                                                                 // 10746
     * @attribute anchor                                                                                               // 10747
     * @type Number                                                                                                    // 10748
     * @default 0.01                                                                                                   // 10749
     * @optional                                                                                                       // 10750
     */                                                                                                                // 10751
    anchor : undefined,                                                                                                // 10752
                                                                                                                       // 10753
    /**                                                                                                                // 10754
     * The range of the repulsive force                                                                                // 10755
     * @attribute radii                                                                                                // 10756
     * @type Array                                                                                                     // 10757
     * @default [0, Infinity]                                                                                          // 10758
     */                                                                                                                // 10759
    range : [0, Infinity],                                                                                             // 10760
                                                                                                                       // 10761
    /**                                                                                                                // 10762
     * A normalization for the force to avoid singularities at the origin                                              // 10763
     * @attribute cutoff                                                                                               // 10764
     * @type Number                                                                                                    // 10765
     * @default 0                                                                                                      // 10766
     */                                                                                                                // 10767
    cutoff : 0,                                                                                                        // 10768
                                                                                                                       // 10769
    /**                                                                                                                // 10770
     * The maximum magnitude of the force                                                                              // 10771
     *    Range : [0, Infinity]                                                                                        // 10772
     * @attribute cap                                                                                                  // 10773
     * @type Number                                                                                                    // 10774
     * @default Infinity                                                                                               // 10775
     */                                                                                                                // 10776
    cap : Infinity,                                                                                                    // 10777
                                                                                                                       // 10778
    /**                                                                                                                // 10779
     * The type of decay the repulsive force should have                                                               // 10780
     * @attribute decayFunction                                                                                        // 10781
     * @type Function                                                                                                  // 10782
     */                                                                                                                // 10783
    decayFunction : Repulsion.DECAY_FUNCTIONS.GRAVITY                                                                  // 10784
};                                                                                                                     // 10785
                                                                                                                       // 10786
/*                                                                                                                     // 10787
 * Setter for options.                                                                                                 // 10788
 *                                                                                                                     // 10789
 * @method setOptions                                                                                                  // 10790
 * @param {Objects} options                                                                                            // 10791
 */                                                                                                                    // 10792
Repulsion.prototype.setOptions = function setOptions(options) {                                                        // 10793
    if (options.anchor !== undefined) {                                                                                // 10794
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 10795
        if (options.anchor   instanceof Array)  this.options.anchor = new Vector(options.anchor);                      // 10796
        delete options.anchor;                                                                                         // 10797
    }                                                                                                                  // 10798
    for (var key in options) this.options[key] = options[key];                                                         // 10799
};                                                                                                                     // 10800
                                                                                                                       // 10801
/**                                                                                                                    // 10802
 * Adds a drag force to a physics body's force accumulator.                                                            // 10803
 *                                                                                                                     // 10804
 * @method applyForce                                                                                                  // 10805
 * @param targets {Array.Body}  Array of bodies to apply force to.                                                     // 10806
 * @param source {Body}         The source of the force                                                                // 10807
 */                                                                                                                    // 10808
Repulsion.prototype.applyForce = function applyForce(targets, source) {                                                // 10809
    var options     = this.options;                                                                                    // 10810
    var force       = this.force;                                                                                      // 10811
    var disp        = this.disp;                                                                                       // 10812
                                                                                                                       // 10813
    var strength    = options.strength;                                                                                // 10814
    var anchor      = options.anchor || source.position;                                                               // 10815
    var cap         = options.cap;                                                                                     // 10816
    var cutoff      = options.cutoff;                                                                                  // 10817
    var rMin        = options.range[0];                                                                                // 10818
    var rMax        = options.range[1];                                                                                // 10819
    var decayFn     = options.decayFunction;                                                                           // 10820
                                                                                                                       // 10821
    if (strength === 0) return;                                                                                        // 10822
                                                                                                                       // 10823
    var length = targets.length;                                                                                       // 10824
    var particle;                                                                                                      // 10825
    var m1;                                                                                                            // 10826
    var p1;                                                                                                            // 10827
    var r;                                                                                                             // 10828
                                                                                                                       // 10829
    while (length--) {                                                                                                 // 10830
        particle = targets[length];                                                                                    // 10831
                                                                                                                       // 10832
        if (particle === source) continue;                                                                             // 10833
                                                                                                                       // 10834
        m1 = particle.mass;                                                                                            // 10835
        p1 = particle.position;                                                                                        // 10836
                                                                                                                       // 10837
        disp.set(p1.sub(anchor));                                                                                      // 10838
        r = disp.norm();                                                                                               // 10839
                                                                                                                       // 10840
        if (r < rMax && r > rMin) {                                                                                    // 10841
            force.set(disp.normalize(strength * m1 * decayFn(r, cutoff)).cap(cap));                                    // 10842
            particle.applyForce(force);                                                                                // 10843
        }                                                                                                              // 10844
    }                                                                                                                  // 10845
                                                                                                                       // 10846
};                                                                                                                     // 10847
                                                                                                                       // 10848
module.exports = Repulsion;                                                                                            // 10849
},{"../../math/Vector":41,"./Force":64}],66:[function(require,module,exports){                                         // 10850
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10851
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10852
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10853
 *                                                                                                                     // 10854
 * Owner: david@famo.us                                                                                                // 10855
 * @license MPL 2.0                                                                                                    // 10856
 * @copyright Famous Industries, Inc. 2014                                                                             // 10857
 */                                                                                                                    // 10858
                                                                                                                       // 10859
var Drag = require('./Drag');                                                                                          // 10860
                                                                                                                       // 10861
/**                                                                                                                    // 10862
 * Rotational drag is a force that opposes angular velocity.                                                           // 10863
 *   Attach it to a physics body to slow down its rotation.                                                            // 10864
 *                                                                                                                     // 10865
 * @class RotationalDrag                                                                                               // 10866
 * @constructor                                                                                                        // 10867
 * @extends Force                                                                                                      // 10868
 * @param {Object} options options to set on drag                                                                      // 10869
 */                                                                                                                    // 10870
function RotationalDrag(options) {                                                                                     // 10871
    Drag.call(this, options);                                                                                          // 10872
}                                                                                                                      // 10873
                                                                                                                       // 10874
RotationalDrag.prototype = Object.create(Drag.prototype);                                                              // 10875
RotationalDrag.prototype.constructor = RotationalDrag;                                                                 // 10876
                                                                                                                       // 10877
RotationalDrag.DEFAULT_OPTIONS = Drag.DEFAULT_OPTIONS;                                                                 // 10878
RotationalDrag.FORCE_FUNCTIONS = Drag.FORCE_FUNCTIONS;                                                                 // 10879
                                                                                                                       // 10880
/**                                                                                                                    // 10881
 * @property Repulsion.FORCE_FUNCTIONS                                                                                 // 10882
 * @type Object                                                                                                        // 10883
 * @protected                                                                                                          // 10884
 * @static                                                                                                             // 10885
 */                                                                                                                    // 10886
RotationalDrag.FORCE_FUNCTIONS = {                                                                                     // 10887
                                                                                                                       // 10888
    /**                                                                                                                // 10889
     * A drag force proprtional to the angular velocity                                                                // 10890
     * @attribute LINEAR                                                                                               // 10891
     * @type Function                                                                                                  // 10892
     * @param {Vector} angularVelocity                                                                                 // 10893
     * @return {Vector} drag force                                                                                     // 10894
     */                                                                                                                // 10895
    LINEAR : function(angularVelocity) {                                                                               // 10896
        return angularVelocity;                                                                                        // 10897
    },                                                                                                                 // 10898
                                                                                                                       // 10899
    /**                                                                                                                // 10900
     * A drag force proprtional to the square of the angular velocity                                                  // 10901
     * @attribute QUADRATIC                                                                                            // 10902
     * @type Function                                                                                                  // 10903
     * @param {Vector} angularVelocity                                                                                 // 10904
     * @return {Vector} drag force                                                                                     // 10905
     */                                                                                                                // 10906
    QUADRATIC : function(angularVelocity) {                                                                            // 10907
        return angularVelocity.mult(angularVelocity.norm());                                                           // 10908
    }                                                                                                                  // 10909
};                                                                                                                     // 10910
                                                                                                                       // 10911
/**                                                                                                                    // 10912
 * Adds a rotational drag force to a physics body's torque accumulator.                                                // 10913
 *                                                                                                                     // 10914
 * @method applyForce                                                                                                  // 10915
 * @param targets {Array.Body} Array of bodies to apply drag force to.                                                 // 10916
 */                                                                                                                    // 10917
RotationalDrag.prototype.applyForce = function applyForce(targets) {                                                   // 10918
    var strength       = this.options.strength;                                                                        // 10919
    var forceFunction  = this.options.forceFunction;                                                                   // 10920
    var force          = this.force;                                                                                   // 10921
                                                                                                                       // 10922
    //TODO: rotational drag as function of inertia                                                                     // 10923
                                                                                                                       // 10924
    var index;                                                                                                         // 10925
    var particle;                                                                                                      // 10926
                                                                                                                       // 10927
    for (index = 0; index < targets.length; index++) {                                                                 // 10928
        particle = targets[index];                                                                                     // 10929
        forceFunction(particle.angularVelocity).mult(-100*strength).put(force);                                        // 10930
        particle.applyTorque(force);                                                                                   // 10931
    }                                                                                                                  // 10932
};                                                                                                                     // 10933
                                                                                                                       // 10934
/*                                                                                                                     // 10935
 * Setter for options.                                                                                                 // 10936
 *                                                                                                                     // 10937
 * @method setOptions                                                                                                  // 10938
 * @param {Objects} options                                                                                            // 10939
 */                                                                                                                    // 10940
RotationalDrag.prototype.setOptions = function setOptions(options) {                                                   // 10941
    for (var key in options) this.options[key] = options[key];                                                         // 10942
};                                                                                                                     // 10943
                                                                                                                       // 10944
module.exports = RotationalDrag;                                                                                       // 10945
},{"./Drag":63}],67:[function(require,module,exports){                                                                 // 10946
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10947
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10948
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10949
 *                                                                                                                     // 10950
 * Owner: david@famo.us                                                                                                // 10951
 * @license MPL 2.0                                                                                                    // 10952
 * @copyright Famous Industries, Inc. 2014                                                                             // 10953
 */                                                                                                                    // 10954
                                                                                                                       // 10955
//TODO: test inheritance                                                                                               // 10956
var Force = require('./Force');                                                                                        // 10957
var Spring = require('./Spring');                                                                                      // 10958
var Quaternion = require('../../math/Quaternion');                                                                     // 10959
                                                                                                                       // 10960
/**                                                                                                                    // 10961
 *  A force that rotates a physics body back to target Euler angles.                                                   // 10962
 *  Just as a spring translates a body to a particular X, Y, Z, location,                                              // 10963
 *  a rotational spring rotates a body to a particular X, Y, Z Euler angle.                                            // 10964
 *      Note: there is no physical agent that does this in the "real world"                                            // 10965
 *                                                                                                                     // 10966
 *  @class RotationalSpring                                                                                            // 10967
 *  @constructor                                                                                                       // 10968
 *  @extends Spring                                                                                                    // 10969
 *  @param {Object} options options to set on drag                                                                     // 10970
 */                                                                                                                    // 10971
function RotationalSpring(options) {                                                                                   // 10972
    Spring.call(this, options);                                                                                        // 10973
}                                                                                                                      // 10974
                                                                                                                       // 10975
RotationalSpring.prototype = Object.create(Spring.prototype);                                                          // 10976
RotationalSpring.prototype.constructor = RotationalSpring;                                                             // 10977
                                                                                                                       // 10978
RotationalSpring.DEFAULT_OPTIONS = Spring.DEFAULT_OPTIONS;                                                             // 10979
RotationalSpring.FORCE_FUNCTIONS = Spring.FORCE_FUNCTIONS;                                                             // 10980
                                                                                                                       // 10981
/** @const */                                                                                                          // 10982
var pi = Math.PI;                                                                                                      // 10983
                                                                                                                       // 10984
function _calcStiffness() {                                                                                            // 10985
    var options = this.options;                                                                                        // 10986
    options.stiffness = Math.pow(2 * pi / options.period, 2);                                                          // 10987
}                                                                                                                      // 10988
                                                                                                                       // 10989
function _calcDamping() {                                                                                              // 10990
    var options = this.options;                                                                                        // 10991
    options.damping = 4 * pi * options.dampingRatio / options.period;                                                  // 10992
}                                                                                                                      // 10993
                                                                                                                       // 10994
function _init() {                                                                                                     // 10995
    _calcStiffness.call(this);                                                                                         // 10996
    _calcDamping.call(this);                                                                                           // 10997
}                                                                                                                      // 10998
                                                                                                                       // 10999
RotationalSpring.prototype.setOptions = function setOptions(options) {                                                 // 11000
    // TODO fix no-console error                                                                                       // 11001
    /* eslint no-console: 0 */                                                                                         // 11002
                                                                                                                       // 11003
    if (options.anchor !== undefined) {                                                                                // 11004
        if (options.anchor instanceof Quaternion) this.options.anchor = options.anchor;                                // 11005
        if (options.anchor  instanceof Array) this.options.anchor = new Quaternion(options.anchor);                    // 11006
    }                                                                                                                  // 11007
                                                                                                                       // 11008
    if (options.period !== undefined){                                                                                 // 11009
        this.options.period = options.period;                                                                          // 11010
    }                                                                                                                  // 11011
                                                                                                                       // 11012
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 11013
    if (options.length !== undefined) this.options.length = options.length;                                            // 11014
    if (options.forceFunction !== undefined) this.options.forceFunction = options.forceFunction;                       // 11015
    if (options.maxLength !== undefined) this.options.maxLength = options.maxLength;                                   // 11016
                                                                                                                       // 11017
    _init.call(this);                                                                                                  // 11018
    Force.prototype.setOptions.call(this, options);                                                                    // 11019
};                                                                                                                     // 11020
                                                                                                                       // 11021
/**                                                                                                                    // 11022
 * Adds a torque force to a physics body's torque accumulator.                                                         // 11023
 *                                                                                                                     // 11024
 * @method applyForce                                                                                                  // 11025
 * @param targets {Array.Body} Array of bodies to apply torque to.                                                     // 11026
 */                                                                                                                    // 11027
RotationalSpring.prototype.applyForce = function applyForce(targets) {                                                 // 11028
    var force = this.force;                                                                                            // 11029
    var options = this.options;                                                                                        // 11030
    var disp = this.disp;                                                                                              // 11031
                                                                                                                       // 11032
    var stiffness = options.stiffness;                                                                                 // 11033
    var damping = options.damping;                                                                                     // 11034
    var restLength = options.length;                                                                                   // 11035
    var anchor = options.anchor;                                                                                       // 11036
    var forceFunction = options.forceFunction;                                                                         // 11037
    var maxLength = options.maxLength;                                                                                 // 11038
                                                                                                                       // 11039
    var i;                                                                                                             // 11040
    var target;                                                                                                        // 11041
    var dist;                                                                                                          // 11042
    var m;                                                                                                             // 11043
                                                                                                                       // 11044
    for (i = 0; i < targets.length; i++) {                                                                             // 11045
        target = targets[i];                                                                                           // 11046
                                                                                                                       // 11047
        disp.set(anchor.sub(target.orientation));                                                                      // 11048
        dist = disp.norm() - restLength;                                                                               // 11049
                                                                                                                       // 11050
        if (dist === 0) return;                                                                                        // 11051
                                                                                                                       // 11052
        //if dampingRatio specified, then override strength and damping                                                // 11053
        m      = target.mass;                                                                                          // 11054
        stiffness *= m;                                                                                                // 11055
        damping   *= m;                                                                                                // 11056
                                                                                                                       // 11057
        force.set(disp.normalize(stiffness * forceFunction(dist, maxLength)));                                         // 11058
                                                                                                                       // 11059
        if (damping) force.add(target.angularVelocity.mult(-damping)).put(force);                                      // 11060
                                                                                                                       // 11061
        target.applyTorque(force);                                                                                     // 11062
    }                                                                                                                  // 11063
};                                                                                                                     // 11064
                                                                                                                       // 11065
/**                                                                                                                    // 11066
 * Calculates the potential energy of the rotational spring.                                                           // 11067
 *                                                                                                                     // 11068
 * @method getEnergy                                                                                                   // 11069
 * @param [targets] target The physics body attached to the spring                                                     // 11070
 */                                                                                                                    // 11071
RotationalSpring.prototype.getEnergy = function getEnergy(targets) {                                                   // 11072
    var options     = this.options;                                                                                    // 11073
    var restLength  = options.length;                                                                                  // 11074
    var anchor      = options.anchor;                                                                                  // 11075
    var strength    = options.stiffness;                                                                               // 11076
                                                                                                                       // 11077
    var energy = 0.0;                                                                                                  // 11078
    for (var i = 0; i < targets.length; i++) {                                                                         // 11079
        var target = targets[i];                                                                                       // 11080
        var dist = anchor.sub(target.orientation).norm() - restLength;                                                 // 11081
        energy += 0.5 * strength * dist * dist;                                                                        // 11082
    }                                                                                                                  // 11083
    return energy;                                                                                                     // 11084
};                                                                                                                     // 11085
                                                                                                                       // 11086
module.exports = RotationalSpring;                                                                                     // 11087
},{"../../math/Quaternion":38,"./Force":64,"./Spring":68}],68:[function(require,module,exports){                       // 11088
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11089
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11090
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11091
 *                                                                                                                     // 11092
 * Owner: david@famo.us                                                                                                // 11093
 * @license MPL 2.0                                                                                                    // 11094
 * @copyright Famous Industries, Inc. 2014                                                                             // 11095
 */                                                                                                                    // 11096
                                                                                                                       // 11097
/*global console */                                                                                                    // 11098
                                                                                                                       // 11099
var Force = require('./Force');                                                                                        // 11100
var Vector = require('../../math/Vector');                                                                             // 11101
                                                                                                                       // 11102
/**                                                                                                                    // 11103
 *  A force that moves a physics body to a location with a spring motion.                                              // 11104
 *    The body can be moved to another physics body, or an anchor point.                                               // 11105
 *                                                                                                                     // 11106
 *  @class Spring                                                                                                      // 11107
 *  @constructor                                                                                                       // 11108
 *  @extends Force                                                                                                     // 11109
 *  @param {Object} options options to set on drag                                                                     // 11110
 */                                                                                                                    // 11111
function Spring(options) {                                                                                             // 11112
    Force.call(this);                                                                                                  // 11113
                                                                                                                       // 11114
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 11115
    if (options) this.setOptions(options);                                                                             // 11116
                                                                                                                       // 11117
    //registers                                                                                                        // 11118
    this.disp = new Vector(0,0,0);                                                                                     // 11119
                                                                                                                       // 11120
    _init.call(this);                                                                                                  // 11121
}                                                                                                                      // 11122
                                                                                                                       // 11123
Spring.prototype = Object.create(Force.prototype);                                                                     // 11124
Spring.prototype.constructor = Spring;                                                                                 // 11125
                                                                                                                       // 11126
/** @const */                                                                                                          // 11127
var pi = Math.PI;                                                                                                      // 11128
var MIN_PERIOD = 150;                                                                                                  // 11129
                                                                                                                       // 11130
/**                                                                                                                    // 11131
 * @property Spring.FORCE_FUNCTIONS                                                                                    // 11132
 * @type Object                                                                                                        // 11133
 * @protected                                                                                                          // 11134
 * @static                                                                                                             // 11135
 */                                                                                                                    // 11136
Spring.FORCE_FUNCTIONS = {                                                                                             // 11137
                                                                                                                       // 11138
    /**                                                                                                                // 11139
     * A FENE (Finitely Extensible Nonlinear Elastic) spring force                                                     // 11140
     *      see: http://en.wikipedia.org/wiki/FENE                                                                     // 11141
     * @attribute FENE                                                                                                 // 11142
     * @type Function                                                                                                  // 11143
     * @param {Number} dist current distance target is from source body                                                // 11144
     * @param {Number} rMax maximum range of influence                                                                 // 11145
     * @return {Number} unscaled force                                                                                 // 11146
     */                                                                                                                // 11147
    FENE : function(dist, rMax) {                                                                                      // 11148
        var rMaxSmall = rMax * .99;                                                                                    // 11149
        var r = Math.max(Math.min(dist, rMaxSmall), -rMaxSmall);                                                       // 11150
        return r / (1 - r * r/(rMax * rMax));                                                                          // 11151
    },                                                                                                                 // 11152
                                                                                                                       // 11153
    /**                                                                                                                // 11154
     * A Hookean spring force, linear in the displacement                                                              // 11155
     *      see: http://en.wikipedia.org/wiki/Hooke's_law                                                              // 11156
     * @attribute FENE                                                                                                 // 11157
     * @type Function                                                                                                  // 11158
     * @param {Number} dist current distance target is from source body                                                // 11159
     * @return {Number} unscaled force                                                                                 // 11160
     */                                                                                                                // 11161
    HOOK : function(dist) {                                                                                            // 11162
        return dist;                                                                                                   // 11163
    }                                                                                                                  // 11164
};                                                                                                                     // 11165
                                                                                                                       // 11166
/**                                                                                                                    // 11167
 * @property Spring.DEFAULT_OPTIONS                                                                                    // 11168
 * @type Object                                                                                                        // 11169
 * @protected                                                                                                          // 11170
 * @static                                                                                                             // 11171
 */                                                                                                                    // 11172
Spring.DEFAULT_OPTIONS = {                                                                                             // 11173
                                                                                                                       // 11174
    /**                                                                                                                // 11175
     * The amount of time in milliseconds taken for one complete oscillation                                           // 11176
     * when there is no damping                                                                                        // 11177
     *    Range : [150, Infinity]                                                                                      // 11178
     * @attribute period                                                                                               // 11179
     * @type Number                                                                                                    // 11180
     * @default 300                                                                                                    // 11181
     */                                                                                                                // 11182
    period : 300,                                                                                                      // 11183
                                                                                                                       // 11184
    /**                                                                                                                // 11185
     * The damping of the spring.                                                                                      // 11186
     *    Range : [0, 1]                                                                                               // 11187
     *    0 = no damping, and the spring will oscillate forever                                                        // 11188
     *    1 = critically damped (the spring will never oscillate)                                                      // 11189
     * @attribute dampingRatio                                                                                         // 11190
     * @type Number                                                                                                    // 11191
     * @default 0.1                                                                                                    // 11192
     */                                                                                                                // 11193
    dampingRatio : 0.1,                                                                                                // 11194
                                                                                                                       // 11195
    /**                                                                                                                // 11196
     * The rest length of the spring                                                                                   // 11197
     *    Range : [0, Infinity]                                                                                        // 11198
     * @attribute length                                                                                               // 11199
     * @type Number                                                                                                    // 11200
     * @default 0                                                                                                      // 11201
     */                                                                                                                // 11202
    length : 0,                                                                                                        // 11203
                                                                                                                       // 11204
    /**                                                                                                                // 11205
     * The maximum length of the spring (for a FENE spring)                                                            // 11206
     *    Range : [0, Infinity]                                                                                        // 11207
     * @attribute length                                                                                               // 11208
     * @type Number                                                                                                    // 11209
     * @default Infinity                                                                                               // 11210
     */                                                                                                                // 11211
    maxLength : Infinity,                                                                                              // 11212
                                                                                                                       // 11213
    /**                                                                                                                // 11214
     * The location of the spring's anchor, if not another physics body                                                // 11215
     *                                                                                                                 // 11216
     * @attribute anchor                                                                                               // 11217
     * @type Array                                                                                                     // 11218
     * @optional                                                                                                       // 11219
     */                                                                                                                // 11220
    anchor : undefined,                                                                                                // 11221
                                                                                                                       // 11222
    /**                                                                                                                // 11223
     * The type of spring force                                                                                        // 11224
     * @attribute forceFunction                                                                                        // 11225
     * @type Function                                                                                                  // 11226
     */                                                                                                                // 11227
    forceFunction : Spring.FORCE_FUNCTIONS.HOOK                                                                        // 11228
};                                                                                                                     // 11229
                                                                                                                       // 11230
function _calcStiffness() {                                                                                            // 11231
    var options = this.options;                                                                                        // 11232
    options.stiffness = Math.pow(2 * pi / options.period, 2);                                                          // 11233
}                                                                                                                      // 11234
                                                                                                                       // 11235
function _calcDamping() {                                                                                              // 11236
    var options = this.options;                                                                                        // 11237
    options.damping = 4 * pi * options.dampingRatio / options.period;                                                  // 11238
}                                                                                                                      // 11239
                                                                                                                       // 11240
function _init() {                                                                                                     // 11241
    _calcStiffness.call(this);                                                                                         // 11242
    _calcDamping.call(this);                                                                                           // 11243
}                                                                                                                      // 11244
                                                                                                                       // 11245
/**                                                                                                                    // 11246
 * Basic options setter                                                                                                // 11247
 *                                                                                                                     // 11248
 * @method setOptions                                                                                                  // 11249
 * @param options {Object}                                                                                             // 11250
 */                                                                                                                    // 11251
Spring.prototype.setOptions = function setOptions(options) {                                                           // 11252
    // TODO fix no-console error                                                                                       // 11253
    /* eslint no-console: 0 */                                                                                         // 11254
                                                                                                                       // 11255
    if (options.anchor !== undefined) {                                                                                // 11256
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 11257
        if (options.anchor instanceof Vector) this.options.anchor = options.anchor;                                    // 11258
        if (options.anchor instanceof Array)  this.options.anchor = new Vector(options.anchor);                        // 11259
    }                                                                                                                  // 11260
                                                                                                                       // 11261
    if (options.period !== undefined){                                                                                 // 11262
        if (options.period < MIN_PERIOD) {                                                                             // 11263
            options.period = MIN_PERIOD;                                                                               // 11264
            console.warn('The period of a SpringTransition is capped at ' + MIN_PERIOD + ' ms. Use a SnapTransition for faster transitions');
        }                                                                                                              // 11266
        this.options.period = options.period;                                                                          // 11267
    }                                                                                                                  // 11268
                                                                                                                       // 11269
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 11270
    if (options.length !== undefined) this.options.length = options.length;                                            // 11271
    if (options.forceFunction !== undefined) this.options.forceFunction = options.forceFunction;                       // 11272
    if (options.maxLength !== undefined) this.options.maxLength = options.maxLength;                                   // 11273
                                                                                                                       // 11274
    _init.call(this);                                                                                                  // 11275
    Force.prototype.setOptions.call(this, options);                                                                    // 11276
};                                                                                                                     // 11277
                                                                                                                       // 11278
/**                                                                                                                    // 11279
 * Adds a spring force to a physics body's force accumulator.                                                          // 11280
 *                                                                                                                     // 11281
 * @method applyForce                                                                                                  // 11282
 * @param targets {Array.Body} Array of bodies to apply force to.                                                      // 11283
 */                                                                                                                    // 11284
Spring.prototype.applyForce = function applyForce(targets, source) {                                                   // 11285
    var force = this.force;                                                                                            // 11286
    var disp = this.disp;                                                                                              // 11287
    var options = this.options;                                                                                        // 11288
                                                                                                                       // 11289
    var stiffness = options.stiffness;                                                                                 // 11290
    var damping = options.damping;                                                                                     // 11291
    var restLength = options.length;                                                                                   // 11292
    var maxLength = options.maxLength;                                                                                 // 11293
    var anchor = options.anchor || source.position;                                                                    // 11294
    var forceFunction = options.forceFunction;                                                                         // 11295
                                                                                                                       // 11296
    var i;                                                                                                             // 11297
    var target;                                                                                                        // 11298
    var p2;                                                                                                            // 11299
    var v2;                                                                                                            // 11300
    var dist;                                                                                                          // 11301
    var m;                                                                                                             // 11302
                                                                                                                       // 11303
    for (i = 0; i < targets.length; i++) {                                                                             // 11304
        target = targets[i];                                                                                           // 11305
        p2 = target.position;                                                                                          // 11306
        v2 = target.velocity;                                                                                          // 11307
                                                                                                                       // 11308
        anchor.sub(p2).put(disp);                                                                                      // 11309
        dist = disp.norm() - restLength;                                                                               // 11310
                                                                                                                       // 11311
        if (dist === 0) return;                                                                                        // 11312
                                                                                                                       // 11313
        //if dampingRatio specified, then override strength and damping                                                // 11314
        m      = target.mass;                                                                                          // 11315
        stiffness *= m;                                                                                                // 11316
        damping   *= m;                                                                                                // 11317
                                                                                                                       // 11318
        disp.normalize(stiffness * forceFunction(dist, maxLength))                                                     // 11319
            .put(force);                                                                                               // 11320
                                                                                                                       // 11321
        if (damping)                                                                                                   // 11322
            if (source) force.add(v2.sub(source.velocity).mult(-damping)).put(force);                                  // 11323
            else force.add(v2.mult(-damping)).put(force);                                                              // 11324
                                                                                                                       // 11325
        target.applyForce(force);                                                                                      // 11326
        if (source) source.applyForce(force.mult(-1));                                                                 // 11327
    }                                                                                                                  // 11328
};                                                                                                                     // 11329
                                                                                                                       // 11330
/**                                                                                                                    // 11331
 * Calculates the potential energy of the spring.                                                                      // 11332
 *                                                                                                                     // 11333
 * @method getEnergy                                                                                                   // 11334
 * @param [targets] target  The physics body attached to the spring                                                    // 11335
 * @return {source}         The potential energy of the spring                                                         // 11336
 */                                                                                                                    // 11337
Spring.prototype.getEnergy = function getEnergy(targets, source) {                                                     // 11338
    var options     = this.options;                                                                                    // 11339
    var restLength  = options.length;                                                                                  // 11340
    var anchor      = (source) ? source.position : options.anchor;                                                     // 11341
    var strength    = options.stiffness;                                                                               // 11342
                                                                                                                       // 11343
    var energy = 0.0;                                                                                                  // 11344
    for (var i = 0; i < targets.length; i++){                                                                          // 11345
        var target = targets[i];                                                                                       // 11346
        var dist = anchor.sub(target.position).norm() - restLength;                                                    // 11347
        energy += 0.5 * strength * dist * dist;                                                                        // 11348
    }                                                                                                                  // 11349
    return energy;                                                                                                     // 11350
};                                                                                                                     // 11351
                                                                                                                       // 11352
module.exports = Spring;                                                                                               // 11353
},{"../../math/Vector":41,"./Force":64}],69:[function(require,module,exports){                                         // 11354
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11355
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11356
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11357
 *                                                                                                                     // 11358
 * Owner: david@famo.us                                                                                                // 11359
 * @license MPL 2.0                                                                                                    // 11360
 * @copyright Famous Industries, Inc. 2014                                                                             // 11361
 */                                                                                                                    // 11362
                                                                                                                       // 11363
var Force = require('./Force');                                                                                        // 11364
var Vector = require('../../math/Vector');                                                                             // 11365
                                                                                                                       // 11366
/**                                                                                                                    // 11367
 *  A force that moves a physics body to a location with a spring motion.                                              // 11368
 *    The body can be moved to another physics body, or an anchor point.                                               // 11369
 *                                                                                                                     // 11370
 *  @class VectorField                                                                                                 // 11371
 *  @constructor                                                                                                       // 11372
 *  @extends Force                                                                                                     // 11373
 *  @param {Object} options options to set on drag                                                                     // 11374
 */                                                                                                                    // 11375
function VectorField(options) {                                                                                        // 11376
    Force.call(this);                                                                                                  // 11377
                                                                                                                       // 11378
    this.options = Object.create(VectorField.DEFAULT_OPTIONS);                                                         // 11379
    if (options) this.setOptions(options);                                                                             // 11380
                                                                                                                       // 11381
    //registers                                                                                                        // 11382
    this.evaluation = new Vector();                                                                                    // 11383
}                                                                                                                      // 11384
                                                                                                                       // 11385
VectorField.prototype = Object.create(Force.prototype);                                                                // 11386
VectorField.prototype.constructor = VectorField;                                                                       // 11387
                                                                                                                       // 11388
/**                                                                                                                    // 11389
 * @property Spring.FORCE_FUNCTIONS                                                                                    // 11390
 * @type Object                                                                                                        // 11391
 * @protected                                                                                                          // 11392
 * @static                                                                                                             // 11393
 */                                                                                                                    // 11394
VectorField.FIELDS = {                                                                                                 // 11395
    /**                                                                                                                // 11396
     * Constant force, e.g., gravity                                                                                   // 11397
     * @attribute CONSTANT                                                                                             // 11398
     * @type Function                                                                                                  // 11399
     * @param v {Vector}        Current position of physics body                                                       // 11400
     * @param options {Object}  The direction of the force                                                             // 11401
     *      Pass a {direction : Vector} into the VectorField options                                                   // 11402
     * @return {Number} unscaled force                                                                                 // 11403
     */                                                                                                                // 11404
    CONSTANT : function(v, options) {                                                                                  // 11405
        options.direction.put(this.evaluation);                                                                        // 11406
    },                                                                                                                 // 11407
                                                                                                                       // 11408
    /**                                                                                                                // 11409
     * Linear force                                                                                                    // 11410
     * @attribute LINEAR                                                                                               // 11411
     * @type Function                                                                                                  // 11412
     * @param v {Vector} Current position of physics body                                                              // 11413
     * @return {Vector} unscaled force                                                                                 // 11414
     */                                                                                                                // 11415
    LINEAR : function(v) {                                                                                             // 11416
        v.put(this.evaluation);                                                                                        // 11417
    },                                                                                                                 // 11418
                                                                                                                       // 11419
    /**                                                                                                                // 11420
     * Radial force, e.g., Hookean spring                                                                              // 11421
     * @attribute RADIAL                                                                                               // 11422
     * @type Function                                                                                                  // 11423
     * @param v {Vector} Current position of physics body                                                              // 11424
     * @return {Vector} unscaled force                                                                                 // 11425
     */                                                                                                                // 11426
    RADIAL : function(v) {                                                                                             // 11427
        v.mult(-1).put(this.evaluation);                                                                               // 11428
    },                                                                                                                 // 11429
                                                                                                                       // 11430
    /**                                                                                                                // 11431
     * Point attractor force, e.g., Hookean spring with an anchor                                                      // 11432
     * @attribute POINT_ATTRACTOR                                                                                      // 11433
     * @type Function                                                                                                  // 11434
     * @param v {Vector}        Current position of physics body                                                       // 11435
     * @param options {Object}  And object with the position of the attractor                                          // 11436
     *      Pass a {position : Vector} into the VectorField options                                                    // 11437
     * @return {Vector} unscaled force                                                                                 // 11438
     */                                                                                                                // 11439
    POINT_ATTRACTOR : function(v, options) {                                                                           // 11440
        options.position.sub(v).put(this.evaluation);                                                                  // 11441
    }                                                                                                                  // 11442
};                                                                                                                     // 11443
                                                                                                                       // 11444
/**                                                                                                                    // 11445
 * @property VectorField.DEFAULT_OPTIONS                                                                               // 11446
 * @type Object                                                                                                        // 11447
 * @protected                                                                                                          // 11448
 * @static                                                                                                             // 11449
 */                                                                                                                    // 11450
VectorField.DEFAULT_OPTIONS = {                                                                                        // 11451
                                                                                                                       // 11452
    /**                                                                                                                // 11453
     * The strength of the force                                                                                       // 11454
     *    Range : [0, 10]                                                                                              // 11455
     * @attribute strength                                                                                             // 11456
     * @type Number                                                                                                    // 11457
     * @default .01                                                                                                    // 11458
     */                                                                                                                // 11459
    strength : .01,                                                                                                    // 11460
                                                                                                                       // 11461
    /**                                                                                                                // 11462
     * Type of vectorfield                                                                                             // 11463
     *    Range : [0, 100]                                                                                             // 11464
     * @attribute field                                                                                                // 11465
     * @type Function                                                                                                  // 11466
     */                                                                                                                // 11467
    field : VectorField.FIELDS.CONSTANT                                                                                // 11468
};                                                                                                                     // 11469
                                                                                                                       // 11470
/**                                                                                                                    // 11471
 * Basic options setter                                                                                                // 11472
 *                                                                                                                     // 11473
 * @method setOptions                                                                                                  // 11474
 * @param {Objects} options                                                                                            // 11475
 */                                                                                                                    // 11476
VectorField.prototype.setOptions = function setOptions(options) {                                                      // 11477
    if (options.strength !== undefined) this.options.strength = options.strength;                                      // 11478
    if (options.field !== undefined) {                                                                                 // 11479
        this.options.field = options.field;                                                                            // 11480
        _setFieldOptions.call(this, this.options.field);                                                               // 11481
    }                                                                                                                  // 11482
};                                                                                                                     // 11483
                                                                                                                       // 11484
function _setFieldOptions(field) {                                                                                     // 11485
    var FIELDS = VectorField.FIELDS;                                                                                   // 11486
                                                                                                                       // 11487
    switch (field) {                                                                                                   // 11488
        case FIELDS.CONSTANT:                                                                                          // 11489
            if (!this.options.direction) this.options.direction = new Vector(0,1,0);                                   // 11490
            else if (this.options.direction instanceof Array) this.options.direction = new Vector(this.options.direction);
            break;                                                                                                     // 11492
        case FIELDS.POINT_ATTRACTOR:                                                                                   // 11493
            if (!this.options.position) this.options.position = new Vector(0,0,0);                                     // 11494
            else if (this.options.position instanceof Array) this.options.position = new Vector(this.options.position);
            break;                                                                                                     // 11496
    }                                                                                                                  // 11497
}                                                                                                                      // 11498
                                                                                                                       // 11499
/**                                                                                                                    // 11500
 * Adds the VectorField's force to a physics body's force accumulator.                                                 // 11501
 *                                                                                                                     // 11502
 * @method applyForce                                                                                                  // 11503
 * @param targets {Array.body} Array of bodies to apply force to.                                                      // 11504
 */                                                                                                                    // 11505
VectorField.prototype.applyForce = function applyForce(targets) {                                                      // 11506
    var force = this.force;                                                                                            // 11507
    var strength = this.options.strength;                                                                              // 11508
    var field = this.options.field;                                                                                    // 11509
                                                                                                                       // 11510
    var i;                                                                                                             // 11511
    var target;                                                                                                        // 11512
                                                                                                                       // 11513
    for (i = 0; i < targets.length; i++) {                                                                             // 11514
        target = targets[i];                                                                                           // 11515
        field.call(this, target.position, this.options);                                                               // 11516
        this.evaluation.mult(target.mass * strength).put(force);                                                       // 11517
        target.applyForce(force);                                                                                      // 11518
    }                                                                                                                  // 11519
};                                                                                                                     // 11520
                                                                                                                       // 11521
VectorField.prototype.getEnergy = function getEnergy(targets) {                                                        // 11522
    var field = this.options.field;                                                                                    // 11523
    var FIELDS = VectorField.FIELDS;                                                                                   // 11524
                                                                                                                       // 11525
    var energy = 0;                                                                                                    // 11526
                                                                                                                       // 11527
    var i;                                                                                                             // 11528
    var target;                                                                                                        // 11529
    switch (field) {                                                                                                   // 11530
        case FIELDS.CONSTANT:                                                                                          // 11531
            energy = targets.length * this.options.direction.norm();                                                   // 11532
            break;                                                                                                     // 11533
        case FIELDS.RADIAL:                                                                                            // 11534
            for (i = 0; i < targets.length; i++){                                                                      // 11535
                target = targets[i];                                                                                   // 11536
                energy += target.position.norm();                                                                      // 11537
            }                                                                                                          // 11538
            break;                                                                                                     // 11539
        case FIELDS.POINT_ATTRACTOR:                                                                                   // 11540
            for (i = 0; i < targets.length; i++){                                                                      // 11541
                target = targets[i];                                                                                   // 11542
                energy += target.position.sub(this.options.position).norm();                                           // 11543
            }                                                                                                          // 11544
            break;                                                                                                     // 11545
    }                                                                                                                  // 11546
    energy *= this.options.strength;                                                                                   // 11547
    return energy;                                                                                                     // 11548
};                                                                                                                     // 11549
                                                                                                                       // 11550
module.exports = VectorField;                                                                                          // 11551
},{"../../math/Vector":41,"./Force":64}],70:[function(require,module,exports){                                         // 11552
module.exports = {                                                                                                     // 11553
  Drag: require('./Drag'),                                                                                             // 11554
  Force: require('./Force'),                                                                                           // 11555
  Repulsion: require('./Repulsion'),                                                                                   // 11556
  RotationalDrag: require('./RotationalDrag'),                                                                         // 11557
  RotationalSpring: require('./RotationalSpring'),                                                                     // 11558
  Spring: require('./Spring'),                                                                                         // 11559
  VectorField: require('./VectorField')                                                                                // 11560
};                                                                                                                     // 11561
                                                                                                                       // 11562
},{"./Drag":63,"./Force":64,"./Repulsion":65,"./RotationalDrag":66,"./RotationalSpring":67,"./Spring":68,"./VectorField":69}],71:[function(require,module,exports){
module.exports = {                                                                                                     // 11564
  PhysicsEngine: require('./PhysicsEngine'),                                                                           // 11565
  bodies: require('./bodies'),                                                                                         // 11566
  constraints: require('./constraints'),                                                                               // 11567
  forces: require('./forces'),                                                                                         // 11568
  integrators: require('./integrators')                                                                                // 11569
};                                                                                                                     // 11570
                                                                                                                       // 11571
},{"./PhysicsEngine":48,"./bodies":53,"./constraints":62,"./forces":70,"./integrators":73}],72:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11573
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11574
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11575
 *                                                                                                                     // 11576
 * Owner: david@famo.us                                                                                                // 11577
 * @license MPL 2.0                                                                                                    // 11578
 * @copyright Famous Industries, Inc. 2014                                                                             // 11579
 */                                                                                                                    // 11580
                                                                                                                       // 11581
                                                                                                                       // 11582
                                                                                                                       // 11583
                                                                                                                       // 11584
/**                                                                                                                    // 11585
 * Ordinary Differential Equation (ODE) Integrator.                                                                    // 11586
 * Manages updating a physics body's state over time.                                                                  // 11587
 *                                                                                                                     // 11588
 *  p = position, v = velocity, m = mass, f = force, dt = change in time                                               // 11589
 *                                                                                                                     // 11590
 *      v <- v + dt * f / m                                                                                            // 11591
 *      p <- p + dt * v                                                                                                // 11592
 *                                                                                                                     // 11593
 *  q = orientation, w = angular velocity, L = angular momentum                                                        // 11594
 *                                                                                                                     // 11595
 *      L <- L + dt * t                                                                                                // 11596
 *      q <- q + dt/2 * q * w                                                                                          // 11597
 *                                                                                                                     // 11598
 * @class SymplecticEuler                                                                                              // 11599
 * @constructor                                                                                                        // 11600
 * @param {Object} options Options to set                                                                              // 11601
 */                                                                                                                    // 11602
var SymplecticEuler = {};                                                                                              // 11603
                                                                                                                       // 11604
/*                                                                                                                     // 11605
 * Updates the velocity of a physics body from its accumulated force.                                                  // 11606
 *      v <- v + dt * f / m                                                                                            // 11607
 *                                                                                                                     // 11608
 * @method integrateVelocity                                                                                           // 11609
 * @param {Body} physics body                                                                                          // 11610
 * @param {Number} dt delta time                                                                                       // 11611
 */                                                                                                                    // 11612
SymplecticEuler.integrateVelocity = function integrateVelocity(body, dt) {                                             // 11613
    var v = body.velocity;                                                                                             // 11614
    var w = body.inverseMass;                                                                                          // 11615
    var f = body.force;                                                                                                // 11616
                                                                                                                       // 11617
    if (f.isZero()) return;                                                                                            // 11618
                                                                                                                       // 11619
    v.add(f.mult(dt * w)).put(v);                                                                                      // 11620
    f.clear();                                                                                                         // 11621
};                                                                                                                     // 11622
                                                                                                                       // 11623
/*                                                                                                                     // 11624
 * Updates the position of a physics body from its velocity.                                                           // 11625
 *      p <- p + dt * v                                                                                                // 11626
 *                                                                                                                     // 11627
 * @method integratePosition                                                                                           // 11628
 * @param {Body} physics body                                                                                          // 11629
 * @param {Number} dt delta time                                                                                       // 11630
 */                                                                                                                    // 11631
SymplecticEuler.integratePosition = function integratePosition(body, dt) {                                             // 11632
    var p = body.position;                                                                                             // 11633
    var v = body.velocity;                                                                                             // 11634
                                                                                                                       // 11635
    p.add(v.mult(dt)).put(p);                                                                                          // 11636
};                                                                                                                     // 11637
                                                                                                                       // 11638
/*                                                                                                                     // 11639
 * Updates the angular momentum of a physics body from its accumuled torque.                                           // 11640
 *      L <- L + dt * t                                                                                                // 11641
 *                                                                                                                     // 11642
 * @method integrateAngularMomentum                                                                                    // 11643
 * @param {Body} physics body (except a particle)                                                                      // 11644
 * @param {Number} dt delta time                                                                                       // 11645
 */                                                                                                                    // 11646
SymplecticEuler.integrateAngularMomentum = function integrateAngularMomentum(body, dt) {                               // 11647
    var L = body.angularMomentum;                                                                                      // 11648
    var t = body.torque;                                                                                               // 11649
                                                                                                                       // 11650
    if (t.isZero()) return;                                                                                            // 11651
                                                                                                                       // 11652
    L.add(t.mult(dt)).put(L);                                                                                          // 11653
    t.clear();                                                                                                         // 11654
};                                                                                                                     // 11655
                                                                                                                       // 11656
/*                                                                                                                     // 11657
 * Updates the orientation of a physics body from its angular velocity.                                                // 11658
 *      q <- q + dt/2 * q * w                                                                                          // 11659
 *                                                                                                                     // 11660
 * @method integrateOrientation                                                                                        // 11661
 * @param {Body} physics body (except a particle)                                                                      // 11662
 * @param {Number} dt delta time                                                                                       // 11663
 */                                                                                                                    // 11664
SymplecticEuler.integrateOrientation = function integrateOrientation(body, dt) {                                       // 11665
    var q = body.orientation;                                                                                          // 11666
    var w = body.angularVelocity;                                                                                      // 11667
                                                                                                                       // 11668
    if (w.isZero()) return;                                                                                            // 11669
    q.add(q.multiply(w).scalarMultiply(0.5 * dt)).put(q);                                                              // 11670
//        q.normalize.put(q);                                                                                          // 11671
};                                                                                                                     // 11672
                                                                                                                       // 11673
module.exports = SymplecticEuler;                                                                                      // 11674
},{}],73:[function(require,module,exports){                                                                            // 11675
module.exports = {                                                                                                     // 11676
  SymplecticEuler: require('./SymplecticEuler')                                                                        // 11677
};                                                                                                                     // 11678
                                                                                                                       // 11679
},{"./SymplecticEuler":72}],74:[function(require,module,exports){                                                      // 11680
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11681
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11682
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11683
 *                                                                                                                     // 11684
 * Owner: mark@famo.us                                                                                                 // 11685
 * @license MPL 2.0                                                                                                    // 11686
 * @copyright Famous Industries, Inc. 2014                                                                             // 11687
 */                                                                                                                    // 11688
                                                                                                                       // 11689
var Surface = require('../core/Surface');                                                                              // 11690
                                                                                                                       // 11691
/**                                                                                                                    // 11692
 * A surface containing an HTML5 Canvas element.                                                                       // 11693
 *   This extends the Surface class.                                                                                   // 11694
 *                                                                                                                     // 11695
 * @class CanvasSurface                                                                                                // 11696
 * @extends Surface                                                                                                    // 11697
 * @constructor                                                                                                        // 11698
 * @param {Object} [options] overrides of default options                                                              // 11699
 * @param {Array.Number} [options.canvasSize] [width, height] for document element                                     // 11700
 */                                                                                                                    // 11701
function CanvasSurface(options) {                                                                                      // 11702
    if (options && options.canvasSize) this._canvasSize = options.canvasSize;                                          // 11703
    Surface.apply(this, arguments);                                                                                    // 11704
    if (!this._canvasSize) this._canvasSize = this.getSize();                                                          // 11705
    this._backBuffer = document.createElement('canvas');                                                               // 11706
    if (this._canvasSize) {                                                                                            // 11707
        this._backBuffer.width = this._canvasSize[0];                                                                  // 11708
        this._backBuffer.height = this._canvasSize[1];                                                                 // 11709
    }                                                                                                                  // 11710
    this._contextId = undefined;                                                                                       // 11711
}                                                                                                                      // 11712
                                                                                                                       // 11713
CanvasSurface.prototype = Object.create(Surface.prototype);                                                            // 11714
CanvasSurface.prototype.constructor = CanvasSurface;                                                                   // 11715
CanvasSurface.prototype.elementType = 'canvas';                                                                        // 11716
CanvasSurface.prototype.elementClass = 'famous-surface';                                                               // 11717
                                                                                                                       // 11718
/**                                                                                                                    // 11719
 * Set inner document content.  Note that this is a noop for CanvasSurface.                                            // 11720
 *                                                                                                                     // 11721
 * @method setContent                                                                                                  // 11722
 *                                                                                                                     // 11723
 */                                                                                                                    // 11724
CanvasSurface.prototype.setContent = function setContent() {};                                                         // 11725
                                                                                                                       // 11726
/**                                                                                                                    // 11727
 * Place the document element this component manages into the document.                                                // 11728
 *    This will draw the content to the document.                                                                      // 11729
 *                                                                                                                     // 11730
 * @private                                                                                                            // 11731
 * @method deploy                                                                                                      // 11732
 * @param {Node} target document parent of this container                                                              // 11733
 */                                                                                                                    // 11734
CanvasSurface.prototype.deploy = function deploy(target) {                                                             // 11735
    if (this._canvasSize) {                                                                                            // 11736
        target.width = this._canvasSize[0];                                                                            // 11737
        target.height = this._canvasSize[1];                                                                           // 11738
    }                                                                                                                  // 11739
    if (this._contextId === '2d') {                                                                                    // 11740
        target.getContext(this._contextId).drawImage(this._backBuffer, 0, 0);                                          // 11741
        this._backBuffer.width = 0;                                                                                    // 11742
        this._backBuffer.height = 0;                                                                                   // 11743
    }                                                                                                                  // 11744
};                                                                                                                     // 11745
                                                                                                                       // 11746
/**                                                                                                                    // 11747
 * Remove this component and contained content from the document                                                       // 11748
 *                                                                                                                     // 11749
 * @private                                                                                                            // 11750
 * @method recall                                                                                                      // 11751
 *                                                                                                                     // 11752
 * @param {Node} target node to which the component was deployed                                                       // 11753
 */                                                                                                                    // 11754
CanvasSurface.prototype.recall = function recall(target) {                                                             // 11755
    var size = this.getSize();                                                                                         // 11756
                                                                                                                       // 11757
    this._backBuffer.width = target.width;                                                                             // 11758
    this._backBuffer.height = target.height;                                                                           // 11759
                                                                                                                       // 11760
    if (this._contextId === '2d') {                                                                                    // 11761
        this._backBuffer.getContext(this._contextId).drawImage(target, 0, 0);                                          // 11762
        target.width = 0;                                                                                              // 11763
        target.height = 0;                                                                                             // 11764
    }                                                                                                                  // 11765
};                                                                                                                     // 11766
                                                                                                                       // 11767
/**                                                                                                                    // 11768
 * Returns the canvas element's context                                                                                // 11769
 *                                                                                                                     // 11770
 * @method getContext                                                                                                  // 11771
 * @param {string} contextId context identifier                                                                        // 11772
 */                                                                                                                    // 11773
CanvasSurface.prototype.getContext = function getContext(contextId) {                                                  // 11774
    this._contextId = contextId;                                                                                       // 11775
    return this._currentTarget ? this._currentTarget.getContext(contextId) : this._backBuffer.getContext(contextId);   // 11776
};                                                                                                                     // 11777
                                                                                                                       // 11778
/**                                                                                                                    // 11779
 *  Set the size of the surface and canvas element.                                                                    // 11780
 *                                                                                                                     // 11781
 *  @method setSize                                                                                                    // 11782
 *  @param {Array.number} size [width, height] of surface                                                              // 11783
 *  @param {Array.number} canvasSize [width, height] of canvas surface                                                 // 11784
 */                                                                                                                    // 11785
CanvasSurface.prototype.setSize = function setSize(size, canvasSize) {                                                 // 11786
    Surface.prototype.setSize.apply(this, arguments);                                                                  // 11787
    if (canvasSize) this._canvasSize = [canvasSize[0], canvasSize[1]];                                                 // 11788
    if (this._currentTarget) {                                                                                         // 11789
        this._currentTarget.width = this._canvasSize[0];                                                               // 11790
        this._currentTarget.height = this._canvasSize[1];                                                              // 11791
    }                                                                                                                  // 11792
};                                                                                                                     // 11793
                                                                                                                       // 11794
module.exports = CanvasSurface;                                                                                        // 11795
},{"../core/Surface":14}],75:[function(require,module,exports){                                                        // 11796
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11797
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11798
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11799
 *                                                                                                                     // 11800
 * Owner: mark@famo.us                                                                                                 // 11801
 * @license MPL 2.0                                                                                                    // 11802
 * @copyright Famous Industries, Inc. 2014                                                                             // 11803
 */                                                                                                                    // 11804
                                                                                                                       // 11805
var Surface = require('../core/Surface');                                                                              // 11806
var Context = require('../core/Context');                                                                              // 11807
                                                                                                                       // 11808
/**                                                                                                                    // 11809
 * ContainerSurface is an object designed to contain surfaces and                                                      // 11810
 *   set properties to be applied to all of them at once.                                                              // 11811
 *   This extends the Surface class.                                                                                   // 11812
 *   A container surface will enforce these properties on the                                                          // 11813
 *   surfaces it contains:                                                                                             // 11814
 *                                                                                                                     // 11815
 *   size (clips contained surfaces to its own width and height);                                                      // 11816
 *                                                                                                                     // 11817
 *   origin;                                                                                                           // 11818
 *                                                                                                                     // 11819
 *   its own opacity and transform, which will be automatically                                                        // 11820
 *   applied to  all Surfaces contained directly and indirectly.                                                       // 11821
 *                                                                                                                     // 11822
 * @class ContainerSurface                                                                                             // 11823
 * @extends Surface                                                                                                    // 11824
 * @constructor                                                                                                        // 11825
 * @param {Array.Number} [options.size] [width, height] in pixels                                                      // 11826
 * @param {Array.string} [options.classes] CSS classes to set on all inner content                                     // 11827
 * @param {Array} [options.properties] string dictionary of HTML attributes to set on target div                       // 11828
 * @param {string} [options.content] inner (HTML) content of surface (should not be used)                              // 11829
 */                                                                                                                    // 11830
function ContainerSurface(options) {                                                                                   // 11831
    Surface.call(this, options);                                                                                       // 11832
    this._container = document.createElement('div');                                                                   // 11833
    this._container.classList.add('famous-group');                                                                     // 11834
    this._container.classList.add('famous-container-group');                                                           // 11835
    this._shouldRecalculateSize = false;                                                                               // 11836
    this.context = new Context(this._container);                                                                       // 11837
    this.setContent(this._container);                                                                                  // 11838
}                                                                                                                      // 11839
                                                                                                                       // 11840
ContainerSurface.prototype = Object.create(Surface.prototype);                                                         // 11841
ContainerSurface.prototype.constructor = ContainerSurface;                                                             // 11842
ContainerSurface.prototype.elementType = 'div';                                                                        // 11843
ContainerSurface.prototype.elementClass = 'famous-surface';                                                            // 11844
                                                                                                                       // 11845
/**                                                                                                                    // 11846
 * Add renderables to this object's render tree                                                                        // 11847
 *                                                                                                                     // 11848
 * @method add                                                                                                         // 11849
 *                                                                                                                     // 11850
 * @param {Object} obj renderable object                                                                               // 11851
 * @return {RenderNode} RenderNode wrapping this object, if not already a RenderNode                                   // 11852
 */                                                                                                                    // 11853
ContainerSurface.prototype.add = function add() {                                                                      // 11854
    return this.context.add.apply(this.context, arguments);                                                            // 11855
};                                                                                                                     // 11856
                                                                                                                       // 11857
/**                                                                                                                    // 11858
 * Return spec for this surface.  Note: Can result in a size recalculation.                                            // 11859
 *                                                                                                                     // 11860
 * @private                                                                                                            // 11861
 * @method render                                                                                                      // 11862
 *                                                                                                                     // 11863
 * @return {Object} render spec for this surface (spec id)                                                             // 11864
 */                                                                                                                    // 11865
ContainerSurface.prototype.render = function render() {                                                                // 11866
    if (this._sizeDirty) this._shouldRecalculateSize = true;                                                           // 11867
    return Surface.prototype.render.apply(this, arguments);                                                            // 11868
};                                                                                                                     // 11869
                                                                                                                       // 11870
/**                                                                                                                    // 11871
 * Place the document element this component manages into the document.                                                // 11872
 *                                                                                                                     // 11873
 * @private                                                                                                            // 11874
 * @method deploy                                                                                                      // 11875
 * @param {Node} target document parent of this container                                                              // 11876
 */                                                                                                                    // 11877
ContainerSurface.prototype.deploy = function deploy() {                                                                // 11878
    this._shouldRecalculateSize = true;                                                                                // 11879
    return Surface.prototype.deploy.apply(this, arguments);                                                            // 11880
};                                                                                                                     // 11881
                                                                                                                       // 11882
/**                                                                                                                    // 11883
 * Apply changes from this component to the corresponding document element.                                            // 11884
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 11885
 * and matrix transforms.                                                                                              // 11886
 *                                                                                                                     // 11887
 * @private                                                                                                            // 11888
 * @method commit                                                                                                      // 11889
 * @param {Context} context commit context                                                                             // 11890
 * @param {Transform} transform unused TODO                                                                            // 11891
 * @param {Number} opacity  unused TODO                                                                                // 11892
 * @param {Array.Number} origin unused TODO                                                                            // 11893
 * @param {Array.Number} size unused TODO                                                                              // 11894
 * @return {undefined} TODO returns an undefined value                                                                 // 11895
 */                                                                                                                    // 11896
ContainerSurface.prototype.commit = function commit(context, transform, opacity, origin, size) {                       // 11897
    var previousSize = this._size ? [this._size[0], this._size[1]] : null;                                             // 11898
    var result = Surface.prototype.commit.apply(this, arguments);                                                      // 11899
    if (this._shouldRecalculateSize || (previousSize && (this._size[0] !== previousSize[0] || this._size[1] !== previousSize[1]))) {
        this.context.setSize();                                                                                        // 11901
        this._shouldRecalculateSize = false;                                                                           // 11902
    }                                                                                                                  // 11903
    this.context.update();                                                                                             // 11904
    return result;                                                                                                     // 11905
};                                                                                                                     // 11906
                                                                                                                       // 11907
module.exports = ContainerSurface;                                                                                     // 11908
},{"../core/Context":1,"../core/Surface":14}],76:[function(require,module,exports){                                    // 11909
var ContainerSurface = require('./ContainerSurface');                                                                  // 11910
                                                                                                                       // 11911
function FormContainerSurface(options) {                                                                               // 11912
    if (options) this._method = options.method || '';                                                                  // 11913
    ContainerSurface.apply(this, arguments);                                                                           // 11914
}                                                                                                                      // 11915
                                                                                                                       // 11916
FormContainerSurface.prototype = Object.create(ContainerSurface.prototype);                                            // 11917
FormContainerSurface.prototype.constructor = FormContainerSurface;                                                     // 11918
                                                                                                                       // 11919
FormContainerSurface.prototype.elementType = 'form';                                                                   // 11920
                                                                                                                       // 11921
FormContainerSurface.prototype.deploy = function deploy(target) {                                                      // 11922
    if (this._method) target.method = this._method;                                                                    // 11923
    return ContainerSurface.prototype.deploy.apply(this, arguments);                                                   // 11924
};                                                                                                                     // 11925
                                                                                                                       // 11926
module.exports = FormContainerSurface;                                                                                 // 11927
},{"./ContainerSurface":75}],77:[function(require,module,exports){                                                     // 11928
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11929
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11930
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11931
 *                                                                                                                     // 11932
 * Owner: mark@famo.us                                                                                                 // 11933
 * @license MPL 2.0                                                                                                    // 11934
 * @copyright Famous Industries, Inc. 2014                                                                             // 11935
 */                                                                                                                    // 11936
                                                                                                                       // 11937
var Surface = require('../core/Surface');                                                                              // 11938
                                                                                                                       // 11939
/**                                                                                                                    // 11940
 * A surface containing image content.                                                                                 // 11941
 *   This extends the Surface class.                                                                                   // 11942
 *                                                                                                                     // 11943
 * @class ImageSurface                                                                                                 // 11944
 *                                                                                                                     // 11945
 * @extends Surface                                                                                                    // 11946
 * @constructor                                                                                                        // 11947
 * @param {Object} [options] overrides of default options                                                              // 11948
 */                                                                                                                    // 11949
function ImageSurface(options) {                                                                                       // 11950
    this._imageUrl = undefined;                                                                                        // 11951
    Surface.apply(this, arguments);                                                                                    // 11952
}                                                                                                                      // 11953
                                                                                                                       // 11954
var urlCache = [];                                                                                                     // 11955
var countCache = [];                                                                                                   // 11956
var nodeCache = [];                                                                                                    // 11957
var cacheEnabled = true;                                                                                               // 11958
                                                                                                                       // 11959
ImageSurface.enableCache = function enableCache() {                                                                    // 11960
    cacheEnabled = true;                                                                                               // 11961
};                                                                                                                     // 11962
                                                                                                                       // 11963
ImageSurface.disableCache = function disableCache() {                                                                  // 11964
    cacheEnabled = false;                                                                                              // 11965
};                                                                                                                     // 11966
                                                                                                                       // 11967
ImageSurface.clearCache = function clearCache() {                                                                      // 11968
    urlCache = [];                                                                                                     // 11969
    countCache = [];                                                                                                   // 11970
    nodeCache = [];                                                                                                    // 11971
};                                                                                                                     // 11972
                                                                                                                       // 11973
ImageSurface.getCache = function getCache() {                                                                          // 11974
    return {                                                                                                           // 11975
        urlCache: urlCache,                                                                                            // 11976
        countCache: countCache,                                                                                        // 11977
        nodeCache: countCache                                                                                          // 11978
    };                                                                                                                 // 11979
};                                                                                                                     // 11980
                                                                                                                       // 11981
ImageSurface.prototype = Object.create(Surface.prototype);                                                             // 11982
ImageSurface.prototype.constructor = ImageSurface;                                                                     // 11983
ImageSurface.prototype.elementType = 'img';                                                                            // 11984
ImageSurface.prototype.elementClass = 'famous-surface';                                                                // 11985
                                                                                                                       // 11986
/**                                                                                                                    // 11987
 * Set content URL.  This will cause a re-rendering.                                                                   // 11988
 * @method setContent                                                                                                  // 11989
 * @param {string} imageUrl                                                                                            // 11990
 */                                                                                                                    // 11991
ImageSurface.prototype.setContent = function setContent(imageUrl) {                                                    // 11992
    var urlIndex = urlCache.indexOf(this._imageUrl);                                                                   // 11993
    if (urlIndex !== -1) {                                                                                             // 11994
        if (countCache[urlIndex] === 1) {                                                                              // 11995
            urlCache.splice(urlIndex, 1);                                                                              // 11996
            countCache.splice(urlIndex, 1);                                                                            // 11997
            nodeCache.splice(urlIndex, 1);                                                                             // 11998
        } else {                                                                                                       // 11999
            countCache[urlIndex]--;                                                                                    // 12000
        }                                                                                                              // 12001
    }                                                                                                                  // 12002
                                                                                                                       // 12003
    urlIndex = urlCache.indexOf(imageUrl);                                                                             // 12004
    if (urlIndex === -1) {                                                                                             // 12005
        urlCache.push(imageUrl);                                                                                       // 12006
        countCache.push(1);                                                                                            // 12007
    }                                                                                                                  // 12008
    else {                                                                                                             // 12009
        countCache[urlIndex]++;                                                                                        // 12010
    }                                                                                                                  // 12011
                                                                                                                       // 12012
    this._imageUrl = imageUrl;                                                                                         // 12013
    this._contentDirty = true;                                                                                         // 12014
};                                                                                                                     // 12015
                                                                                                                       // 12016
/**                                                                                                                    // 12017
 * Place the document element that this component manages into the document.                                           // 12018
 *                                                                                                                     // 12019
 * @private                                                                                                            // 12020
 * @method deploy                                                                                                      // 12021
 * @param {Node} target document parent of this container                                                              // 12022
 */                                                                                                                    // 12023
ImageSurface.prototype.deploy = function deploy(target) {                                                              // 12024
    var urlIndex = urlCache.indexOf(this._imageUrl);                                                                   // 12025
    if (nodeCache[urlIndex] === undefined && cacheEnabled) {                                                           // 12026
        var img = new Image();                                                                                         // 12027
        img.src = this._imageUrl || '';                                                                                // 12028
        nodeCache[urlIndex] = img;                                                                                     // 12029
    }                                                                                                                  // 12030
                                                                                                                       // 12031
    target.src = this._imageUrl || '';                                                                                 // 12032
};                                                                                                                     // 12033
                                                                                                                       // 12034
/**                                                                                                                    // 12035
 * Remove this component and contained content from the document                                                       // 12036
 *                                                                                                                     // 12037
 * @private                                                                                                            // 12038
 * @method recall                                                                                                      // 12039
 *                                                                                                                     // 12040
 * @param {Node} target node to which the component was deployed                                                       // 12041
 */                                                                                                                    // 12042
ImageSurface.prototype.recall = function recall(target) {                                                              // 12043
    target.src = '';                                                                                                   // 12044
};                                                                                                                     // 12045
                                                                                                                       // 12046
module.exports = ImageSurface;                                                                                         // 12047
},{"../core/Surface":14}],78:[function(require,module,exports){                                                        // 12048
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12049
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12050
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12051
 *                                                                                                                     // 12052
 * Owner: mark@famo.us                                                                                                 // 12053
 * @license MPL 2.0                                                                                                    // 12054
 * @copyright Famous Industries, Inc. 2014                                                                             // 12055
 */                                                                                                                    // 12056
                                                                                                                       // 12057
var Surface = require('../core/Surface');                                                                              // 12058
                                                                                                                       // 12059
/**                                                                                                                    // 12060
 * A Famo.us surface in the form of an HTML input element.                                                             // 12061
 *   This extends the Surface class.                                                                                   // 12062
 *                                                                                                                     // 12063
 * @class InputSurface                                                                                                 // 12064
 * @extends Surface                                                                                                    // 12065
 * @constructor                                                                                                        // 12066
 * @param {Object} [options] overrides of default options                                                              // 12067
 * @param {string} [options.placeholder] placeholder text hint that describes the expected value of an <input> element // 12068
 * @param {string} [options.type] specifies the type of element to display (e.g. 'datetime', 'text', 'button', etc.)   // 12069
 * @param {string} [options.value] value of text                                                                       // 12070
 */                                                                                                                    // 12071
function InputSurface(options) {                                                                                       // 12072
    this._placeholder = options.placeholder || '';                                                                     // 12073
    this._value       = options.value || '';                                                                           // 12074
    this._type        = options.type || 'text';                                                                        // 12075
    this._name        = options.name || '';                                                                            // 12076
                                                                                                                       // 12077
    Surface.apply(this, arguments);                                                                                    // 12078
                                                                                                                       // 12079
    this.on('click', this.focus.bind(this));                                                                           // 12080
    window.addEventListener('click', function(event) {                                                                 // 12081
        if (event.target !== this._currentTarget) this.blur();                                                         // 12082
    }.bind(this));                                                                                                     // 12083
}                                                                                                                      // 12084
InputSurface.prototype = Object.create(Surface.prototype);                                                             // 12085
InputSurface.prototype.constructor = InputSurface;                                                                     // 12086
                                                                                                                       // 12087
InputSurface.prototype.elementType = 'input';                                                                          // 12088
InputSurface.prototype.elementClass = 'famous-surface';                                                                // 12089
                                                                                                                       // 12090
/**                                                                                                                    // 12091
 * Set placeholder text.  Note: Triggers a repaint.                                                                    // 12092
 *                                                                                                                     // 12093
 * @method setPlaceholder                                                                                              // 12094
 * @param {string} str Value to set the placeholder to.                                                                // 12095
 * @return {InputSurface} this, allowing method chaining.                                                              // 12096
 */                                                                                                                    // 12097
InputSurface.prototype.setPlaceholder = function setPlaceholder(str) {                                                 // 12098
    this._placeholder = str;                                                                                           // 12099
    this._contentDirty = true;                                                                                         // 12100
    return this;                                                                                                       // 12101
};                                                                                                                     // 12102
                                                                                                                       // 12103
/**                                                                                                                    // 12104
 * Focus on the current input, pulling up the keyboard on mobile.                                                      // 12105
 *                                                                                                                     // 12106
 * @method focus                                                                                                       // 12107
 * @return {InputSurface} this, allowing method chaining.                                                              // 12108
 */                                                                                                                    // 12109
InputSurface.prototype.focus = function focus() {                                                                      // 12110
    if (this._currentTarget) this._currentTarget.focus();                                                              // 12111
    return this;                                                                                                       // 12112
};                                                                                                                     // 12113
                                                                                                                       // 12114
/**                                                                                                                    // 12115
 * Blur the current input, hiding the keyboard on mobile.                                                              // 12116
 *                                                                                                                     // 12117
 * @method blur                                                                                                        // 12118
 * @return {InputSurface} this, allowing method chaining.                                                              // 12119
 */                                                                                                                    // 12120
InputSurface.prototype.blur = function blur() {                                                                        // 12121
    if (this._currentTarget) this._currentTarget.blur();                                                               // 12122
    return this;                                                                                                       // 12123
};                                                                                                                     // 12124
                                                                                                                       // 12125
/**                                                                                                                    // 12126
 * Set the placeholder conent.                                                                                         // 12127
 *   Note: Triggers a repaint next tick.                                                                               // 12128
 *                                                                                                                     // 12129
 * @method setValue                                                                                                    // 12130
 * @param {string} str Value to set the main input value to.                                                           // 12131
 * @return {InputSurface} this, allowing method chaining.                                                              // 12132
 */                                                                                                                    // 12133
InputSurface.prototype.setValue = function setValue(str) {                                                             // 12134
    this._value = str;                                                                                                 // 12135
    this._contentDirty = true;                                                                                         // 12136
    return this;                                                                                                       // 12137
};                                                                                                                     // 12138
                                                                                                                       // 12139
/**                                                                                                                    // 12140
 * Set the type of element to display conent.                                                                          // 12141
 *   Note: Triggers a repaint next tick.                                                                               // 12142
 *                                                                                                                     // 12143
 * @method setType                                                                                                     // 12144
 * @param {string} str type of the input surface (e.g. 'button', 'text')                                               // 12145
 * @return {InputSurface} this, allowing method chaining.                                                              // 12146
 */                                                                                                                    // 12147
InputSurface.prototype.setType = function setType(str) {                                                               // 12148
    this._type = str;                                                                                                  // 12149
    this._contentDirty = true;                                                                                         // 12150
    return this;                                                                                                       // 12151
};                                                                                                                     // 12152
                                                                                                                       // 12153
/**                                                                                                                    // 12154
 * Get the value of the inner content of the element (e.g. the entered text)                                           // 12155
 *                                                                                                                     // 12156
 * @method getValue                                                                                                    // 12157
 * @return {string} value of element                                                                                   // 12158
 */                                                                                                                    // 12159
InputSurface.prototype.getValue = function getValue() {                                                                // 12160
    if (this._currentTarget) {                                                                                         // 12161
        return this._currentTarget.value;                                                                              // 12162
    }                                                                                                                  // 12163
    else {                                                                                                             // 12164
        return this._value;                                                                                            // 12165
    }                                                                                                                  // 12166
};                                                                                                                     // 12167
                                                                                                                       // 12168
/**                                                                                                                    // 12169
 * Set the name attribute of the element.                                                                              // 12170
 *   Note: Triggers a repaint next tick.                                                                               // 12171
 *                                                                                                                     // 12172
 * @method setName                                                                                                     // 12173
 * @param {string} str element name                                                                                    // 12174
 * @return {InputSurface} this, allowing method chaining.                                                              // 12175
 */                                                                                                                    // 12176
InputSurface.prototype.setName = function setName(str) {                                                               // 12177
    this._name = str;                                                                                                  // 12178
    this._contentDirty = true;                                                                                         // 12179
    return this;                                                                                                       // 12180
};                                                                                                                     // 12181
                                                                                                                       // 12182
/**                                                                                                                    // 12183
 * Get the name attribute of the element.                                                                              // 12184
 *                                                                                                                     // 12185
 * @method getName                                                                                                     // 12186
 * @return {string} name of element                                                                                    // 12187
 */                                                                                                                    // 12188
InputSurface.prototype.getName = function getName() {                                                                  // 12189
    return this._name;                                                                                                 // 12190
};                                                                                                                     // 12191
                                                                                                                       // 12192
/**                                                                                                                    // 12193
 * Place the document element this component manages into the document.                                                // 12194
 *                                                                                                                     // 12195
 * @private                                                                                                            // 12196
 * @method deploy                                                                                                      // 12197
 * @param {Node} target document parent of this container                                                              // 12198
 */                                                                                                                    // 12199
InputSurface.prototype.deploy = function deploy(target) {                                                              // 12200
    if (this._placeholder !== '') target.placeholder = this._placeholder;                                              // 12201
    target.value = this._value;                                                                                        // 12202
    target.type = this._type;                                                                                          // 12203
    target.name = this._name;                                                                                          // 12204
};                                                                                                                     // 12205
                                                                                                                       // 12206
module.exports = InputSurface;                                                                                         // 12207
},{"../core/Surface":14}],79:[function(require,module,exports){                                                        // 12208
var InputSurface = require('./InputSurface');                                                                          // 12209
                                                                                                                       // 12210
function SubmitInputSurface(options) {                                                                                 // 12211
    InputSurface.apply(this, arguments);                                                                               // 12212
    this._type = 'submit';                                                                                             // 12213
    if (options && options.onClick) this.setOnClick(options.onClick);                                                  // 12214
}                                                                                                                      // 12215
                                                                                                                       // 12216
SubmitInputSurface.prototype = Object.create(InputSurface.prototype);                                                  // 12217
SubmitInputSurface.prototype.constructor = SubmitInputSurface;                                                         // 12218
                                                                                                                       // 12219
SubmitInputSurface.prototype.setOnClick = function(onClick) {                                                          // 12220
    this.onClick = onClick;                                                                                            // 12221
};                                                                                                                     // 12222
                                                                                                                       // 12223
SubmitInputSurface.prototype.deploy = function deploy(target) {                                                        // 12224
    if (this.onclick) target.onClick = this.onClick;                                                                   // 12225
    InputSurface.prototype.deploy.apply(this, arguments);                                                              // 12226
};                                                                                                                     // 12227
                                                                                                                       // 12228
module.exports = SubmitInputSurface;                                                                                   // 12229
},{"./InputSurface":78}],80:[function(require,module,exports){                                                         // 12230
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12231
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12232
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12233
 *                                                                                                                     // 12234
 * Owner: mark@famo.us                                                                                                 // 12235
 * @license MPL 2.0                                                                                                    // 12236
 * @copyright Famous Industries, Inc. 2014                                                                             // 12237
 */                                                                                                                    // 12238
                                                                                                                       // 12239
var Surface = require('../core/Surface');                                                                              // 12240
                                                                                                                       // 12241
/**                                                                                                                    // 12242
 * A Famo.us surface in the form of an HTML textarea element.                                                          // 12243
 *   This extends the Surface class.                                                                                   // 12244
 *                                                                                                                     // 12245
 * @class TextareaSurface                                                                                              // 12246
 * @extends Surface                                                                                                    // 12247
 * @constructor                                                                                                        // 12248
 * @param {Object} [options] overrides of default options                                                              // 12249
 * @param {string} [options.placeholder] placeholder text hint that describes the expected value of an textarea element
 * @param {string} [options.value] value of text                                                                       // 12251
 * @param {string} [options.name] specifies the name of textarea                                                       // 12252
 * @param {string} [options.wrap] specify 'hard' or 'soft' wrap for textarea                                           // 12253
 * @param {number} [options.cols] number of columns in textarea                                                        // 12254
 * @param {number} [options.rows] number of rows in textarea                                                           // 12255
 */                                                                                                                    // 12256
function TextareaSurface(options) {                                                                                    // 12257
    this._placeholder = options.placeholder || '';                                                                     // 12258
    this._value       = options.value || '';                                                                           // 12259
    this._name        = options.name || '';                                                                            // 12260
    this._wrap        = options.wrap || '';                                                                            // 12261
    this._cols        = options.cols || '';                                                                            // 12262
    this._rows        = options.rows || '';                                                                            // 12263
                                                                                                                       // 12264
    Surface.apply(this, arguments);                                                                                    // 12265
    this.on('click', this.focus.bind(this));                                                                           // 12266
}                                                                                                                      // 12267
TextareaSurface.prototype = Object.create(Surface.prototype);                                                          // 12268
TextareaSurface.prototype.constructor = TextareaSurface;                                                               // 12269
                                                                                                                       // 12270
TextareaSurface.prototype.elementType = 'textarea';                                                                    // 12271
TextareaSurface.prototype.elementClass = 'famous-surface';                                                             // 12272
                                                                                                                       // 12273
/**                                                                                                                    // 12274
 * Set placeholder text.  Note: Triggers a repaint.                                                                    // 12275
 *                                                                                                                     // 12276
 * @method setPlaceholder                                                                                              // 12277
 * @param {string} str Value to set the placeholder to.                                                                // 12278
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12279
 */                                                                                                                    // 12280
TextareaSurface.prototype.setPlaceholder = function setPlaceholder(str) {                                              // 12281
    this._placeholder = str;                                                                                           // 12282
    this._contentDirty = true;                                                                                         // 12283
    return this;                                                                                                       // 12284
};                                                                                                                     // 12285
                                                                                                                       // 12286
/**                                                                                                                    // 12287
 * Focus on the current input, pulling up the keyboard on mobile.                                                      // 12288
 *                                                                                                                     // 12289
 * @method focus                                                                                                       // 12290
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12291
 */                                                                                                                    // 12292
TextareaSurface.prototype.focus = function focus() {                                                                   // 12293
    if (this._currentTarget) this._currentTarget.focus();                                                              // 12294
    return this;                                                                                                       // 12295
};                                                                                                                     // 12296
                                                                                                                       // 12297
/**                                                                                                                    // 12298
 * Blur the current input, hiding the keyboard on mobile.                                                              // 12299
 *                                                                                                                     // 12300
 * @method focus                                                                                                       // 12301
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12302
 */                                                                                                                    // 12303
TextareaSurface.prototype.blur = function blur() {                                                                     // 12304
    if (this._currentTarget) this._currentTarget.blur();                                                               // 12305
    return this;                                                                                                       // 12306
};                                                                                                                     // 12307
                                                                                                                       // 12308
/**                                                                                                                    // 12309
 * Set the value of textarea.                                                                                          // 12310
 *   Note: Triggers a repaint next tick.                                                                               // 12311
 *                                                                                                                     // 12312
 * @method setValue                                                                                                    // 12313
 * @param {string} str Value to set the main textarea value to.                                                        // 12314
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12315
 */                                                                                                                    // 12316
TextareaSurface.prototype.setValue = function setValue(str) {                                                          // 12317
    this._value = str;                                                                                                 // 12318
    this._contentDirty = true;                                                                                         // 12319
    return this;                                                                                                       // 12320
};                                                                                                                     // 12321
                                                                                                                       // 12322
/**                                                                                                                    // 12323
 * Get the value of the inner content of the textarea (e.g. the entered text)                                          // 12324
 *                                                                                                                     // 12325
 * @method getValue                                                                                                    // 12326
 * @return {string} value of element                                                                                   // 12327
 */                                                                                                                    // 12328
TextareaSurface.prototype.getValue = function getValue() {                                                             // 12329
    if (this._currentTarget) {                                                                                         // 12330
        return this._currentTarget.value;                                                                              // 12331
    }                                                                                                                  // 12332
    else {                                                                                                             // 12333
        return this._value;                                                                                            // 12334
    }                                                                                                                  // 12335
};                                                                                                                     // 12336
                                                                                                                       // 12337
/**                                                                                                                    // 12338
 * Set the name attribute of the element.                                                                              // 12339
 *   Note: Triggers a repaint next tick.                                                                               // 12340
 *                                                                                                                     // 12341
 * @method setName                                                                                                     // 12342
 * @param {string} str element name                                                                                    // 12343
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12344
 */                                                                                                                    // 12345
TextareaSurface.prototype.setName = function setName(str) {                                                            // 12346
    this._name = str;                                                                                                  // 12347
    this._contentDirty = true;                                                                                         // 12348
    return this;                                                                                                       // 12349
};                                                                                                                     // 12350
                                                                                                                       // 12351
/**                                                                                                                    // 12352
 * Get the name attribute of the element.                                                                              // 12353
 *                                                                                                                     // 12354
 * @method getName                                                                                                     // 12355
 * @return {string} name of element                                                                                    // 12356
 */                                                                                                                    // 12357
TextareaSurface.prototype.getName = function getName() {                                                               // 12358
    return this._name;                                                                                                 // 12359
};                                                                                                                     // 12360
                                                                                                                       // 12361
/**                                                                                                                    // 12362
 * Set the wrap of textarea.                                                                                           // 12363
 *   Note: Triggers a repaint next tick.                                                                               // 12364
 *                                                                                                                     // 12365
 * @method setWrap                                                                                                     // 12366
 * @param {string} str wrap of the textarea surface (e.g. 'soft', 'hard')                                              // 12367
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12368
 */                                                                                                                    // 12369
TextareaSurface.prototype.setWrap = function setWrap(str) {                                                            // 12370
    this._wrap = str;                                                                                                  // 12371
    this._contentDirty = true;                                                                                         // 12372
    return this;                                                                                                       // 12373
};                                                                                                                     // 12374
                                                                                                                       // 12375
/**                                                                                                                    // 12376
 * Set the number of columns visible in the textarea.                                                                  // 12377
 *   Note: Overridden by surface size; set width to true. (eg. size: [true, *])                                        // 12378
 *         Triggers a repaint next tick.                                                                               // 12379
 *                                                                                                                     // 12380
 * @method setColumns                                                                                                  // 12381
 * @param {number} num columns in textarea surface                                                                     // 12382
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12383
 */                                                                                                                    // 12384
TextareaSurface.prototype.setColumns = function setColumns(num) {                                                      // 12385
    this._cols = num;                                                                                                  // 12386
    this._contentDirty = true;                                                                                         // 12387
    return this;                                                                                                       // 12388
};                                                                                                                     // 12389
                                                                                                                       // 12390
/**                                                                                                                    // 12391
 * Set the number of rows visible in the textarea.                                                                     // 12392
 *   Note: Overridden by surface size; set height to true. (eg. size: [*, true])                                       // 12393
 *         Triggers a repaint next tick.                                                                               // 12394
 *                                                                                                                     // 12395
 * @method setRows                                                                                                     // 12396
 * @param {number} num rows in textarea surface                                                                        // 12397
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12398
 */                                                                                                                    // 12399
TextareaSurface.prototype.setRows = function setRows(num) {                                                            // 12400
    this._rows = num;                                                                                                  // 12401
    this._contentDirty = true;                                                                                         // 12402
    return this;                                                                                                       // 12403
};                                                                                                                     // 12404
                                                                                                                       // 12405
/**                                                                                                                    // 12406
 * Place the document element this component manages into the document.                                                // 12407
 *                                                                                                                     // 12408
 * @private                                                                                                            // 12409
 * @method deploy                                                                                                      // 12410
 * @param {Node} target document parent of this container                                                              // 12411
 */                                                                                                                    // 12412
TextareaSurface.prototype.deploy = function deploy(target) {                                                           // 12413
    if (this._placeholder !== '') target.placeholder = this._placeholder;                                              // 12414
    if (this._value !== '') target.value = this._value;                                                                // 12415
    if (this._name !== '') target.name = this._name;                                                                   // 12416
    if (this._wrap !== '') target.wrap = this._wrap;                                                                   // 12417
    if (this._cols !== '') target.cols = this._cols;                                                                   // 12418
    if (this._rows !== '') target.rows = this._rows;                                                                   // 12419
};                                                                                                                     // 12420
                                                                                                                       // 12421
module.exports = TextareaSurface;                                                                                      // 12422
},{"../core/Surface":14}],81:[function(require,module,exports){                                                        // 12423
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12424
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12425
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12426
 *                                                                                                                     // 12427
 * Owner: mark@famo.us                                                                                                 // 12428
 * @license MPL 2.0                                                                                                    // 12429
 * @copyright Famous Industries, Inc. 2014                                                                             // 12430
 */                                                                                                                    // 12431
                                                                                                                       // 12432
var Surface = require('../core/Surface');                                                                              // 12433
                                                                                                                       // 12434
/**                                                                                                                    // 12435
 * Creates a famous surface containing video content. Currently adding                                                 // 12436
 *   controls and manipulating the video are not supported through the                                                 // 12437
 *   surface interface, but can be accomplished via standard JavaScript                                                // 12438
 *   manipulation of the video DOM element.                                                                            // 12439
 *   This extends the Surface class.                                                                                   // 12440
 *                                                                                                                     // 12441
 * @class VideoSurface                                                                                                 // 12442
 * @extends Surface                                                                                                    // 12443
 * @constructor                                                                                                        // 12444
 * @param {Object} [options] default option overrides                                                                  // 12445
 * @param {Array.Number} [options.size] [width, height] in pixels                                                      // 12446
 * @param {Array.string} [options.classes] CSS classes to set on inner content                                         // 12447
 * @param {Array} [options.properties] string dictionary of HTML attributes to set on target div                       // 12448
 * @param {String} [options.src] videoUrl URL                                                                          // 12449
 * @param {boolean} [options.autoplay] autoplay                                                                        // 12450
 */                                                                                                                    // 12451
function VideoSurface(options) {                                                                                       // 12452
    Surface.apply(this, arguments);                                                                                    // 12453
    this._videoUrl = undefined;                                                                                        // 12454
    this.options = Object.create(VideoSurface.DEFAULT_OPTIONS);                                                        // 12455
    if (options) this.setOptions(options);                                                                             // 12456
}                                                                                                                      // 12457
                                                                                                                       // 12458
VideoSurface.prototype = Object.create(Surface.prototype);                                                             // 12459
VideoSurface.prototype.constructor = VideoSurface;                                                                     // 12460
                                                                                                                       // 12461
VideoSurface.DEFAULT_OPTIONS = {                                                                                       // 12462
    autoplay: false                                                                                                    // 12463
};                                                                                                                     // 12464
                                                                                                                       // 12465
VideoSurface.prototype.elementType = 'video';                                                                          // 12466
VideoSurface.prototype.elementClass = 'famous-surface';                                                                // 12467
                                                                                                                       // 12468
/**                                                                                                                    // 12469
 * Set internal options, overriding any default options                                                                // 12470
 *                                                                                                                     // 12471
 * @method setOptions                                                                                                  // 12472
 *                                                                                                                     // 12473
 * @param {Object} [options] overrides of default options                                                              // 12474
 * @param {Boolean} [options.autoplay] HTML autoplay                                                                   // 12475
 */                                                                                                                    // 12476
VideoSurface.prototype.setOptions = function setOptions(options) {                                                     // 12477
    if (options.size) this.setSize(options.size);                                                                      // 12478
    if (options.classes) this.setClasses(options.classes);                                                             // 12479
    if (options.properties) this.setProperties(options.properties);                                                    // 12480
    if (options.autoplay) this.options.autoplay = options.autoplay;                                                    // 12481
    if (options.src) {                                                                                                 // 12482
        this._videoUrl = options.src;                                                                                  // 12483
        this._contentDirty = true;                                                                                     // 12484
    }                                                                                                                  // 12485
};                                                                                                                     // 12486
                                                                                                                       // 12487
/**                                                                                                                    // 12488
 * Set url of the video.                                                                                               // 12489
 *                                                                                                                     // 12490
 * @method setContent                                                                                                  // 12491
 * @param {string} videoUrl URL                                                                                        // 12492
 */                                                                                                                    // 12493
VideoSurface.prototype.setContent = function setContent(videoUrl) {                                                    // 12494
    this._videoUrl = videoUrl;                                                                                         // 12495
    this._contentDirty = true;                                                                                         // 12496
};                                                                                                                     // 12497
                                                                                                                       // 12498
/**                                                                                                                    // 12499
 * Place the document element this component manages into the document.                                                // 12500
 *   Note: In the case of VideoSurface, simply changes the options on the target.                                      // 12501
 *                                                                                                                     // 12502
 * @private                                                                                                            // 12503
 * @method deploy                                                                                                      // 12504
 * @param {Node} target document parent of this container                                                              // 12505
 */                                                                                                                    // 12506
VideoSurface.prototype.deploy = function deploy(target) {                                                              // 12507
    target.src = this._videoUrl;                                                                                       // 12508
    target.autoplay = this.options.autoplay;                                                                           // 12509
};                                                                                                                     // 12510
                                                                                                                       // 12511
/**                                                                                                                    // 12512
 * Remove this component and contained content from the document.                                                      // 12513
 *   Note: This doesn't actually remove the <video> element from the                                                   // 12514
 *   document.                                                                                                         // 12515
 * @private                                                                                                            // 12516
 * @method recall                                                                                                      // 12517
 *                                                                                                                     // 12518
 * @param {Node} target node to which the component was deployed                                                       // 12519
 */                                                                                                                    // 12520
VideoSurface.prototype.recall = function recall(target) {                                                              // 12521
    target.src = '';                                                                                                   // 12522
};                                                                                                                     // 12523
                                                                                                                       // 12524
module.exports = VideoSurface;                                                                                         // 12525
},{"../core/Surface":14}],82:[function(require,module,exports){                                                        // 12526
module.exports = {                                                                                                     // 12527
  CanvasSurface: require('./CanvasSurface'),                                                                           // 12528
  ContainerSurface: require('./ContainerSurface'),                                                                     // 12529
  FormContainerSurface: require('./FormContainerSurface'),                                                             // 12530
  ImageSurface: require('./ImageSurface'),                                                                             // 12531
  InputSurface: require('./InputSurface'),                                                                             // 12532
  SubmitInputSurface: require('./SubmitInputSurface'),                                                                 // 12533
  TextareaSurface: require('./TextareaSurface'),                                                                       // 12534
  VideoSurface: require('./VideoSurface')                                                                              // 12535
};                                                                                                                     // 12536
                                                                                                                       // 12537
},{"./CanvasSurface":74,"./ContainerSurface":75,"./FormContainerSurface":76,"./ImageSurface":77,"./InputSurface":78,"./SubmitInputSurface":79,"./TextareaSurface":80,"./VideoSurface":81}],83:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12539
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12540
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12541
 *                                                                                                                     // 12542
 * Owner: david@famo.us                                                                                                // 12543
 * @license MPL 2.0                                                                                                    // 12544
 * @copyright Famous Industries, Inc. 2014                                                                             // 12545
 */                                                                                                                    // 12546
                                                                                                                       // 12547
                                                                                                                       // 12548
                                                                                                                       // 12549
/**                                                                                                                    // 12550
 * A simple in-memory object cache.  Used as a helper for Views with                                                   // 12551
 * provider functions.                                                                                                 // 12552
 * @class CachedMap                                                                                                    // 12553
 * @constructor                                                                                                        // 12554
 */                                                                                                                    // 12555
function CachedMap(mappingFunction) {                                                                                  // 12556
    this._map = mappingFunction || null;                                                                               // 12557
    this._cachedOutput = null;                                                                                         // 12558
    this._cachedInput = Number.NaN; //never valid as input                                                             // 12559
}                                                                                                                      // 12560
                                                                                                                       // 12561
/**                                                                                                                    // 12562
 * Creates a mapping function with a cache.                                                                            // 12563
 * This is the main entry point for this object.                                                                       // 12564
 * @static                                                                                                             // 12565
 * @method create                                                                                                      // 12566
 * @param {function} mappingFunction mapping                                                                           // 12567
 * @return {function} memorized mapping function                                                                       // 12568
 */                                                                                                                    // 12569
CachedMap.create = function create(mappingFunction) {                                                                  // 12570
    var instance = new CachedMap(mappingFunction);                                                                     // 12571
    return instance.get.bind(instance);                                                                                // 12572
};                                                                                                                     // 12573
                                                                                                                       // 12574
/**                                                                                                                    // 12575
 * Retrieve items from cache or from mapping function.                                                                 // 12576
 *                                                                                                                     // 12577
 * @method get                                                                                                         // 12578
 * @param {Object} input input key                                                                                     // 12579
 */                                                                                                                    // 12580
CachedMap.prototype.get = function get(input) {                                                                        // 12581
    if (input !== this._cachedInput) {                                                                                 // 12582
        this._cachedInput = input;                                                                                     // 12583
        this._cachedOutput = this._map(input);                                                                         // 12584
    }                                                                                                                  // 12585
    return this._cachedOutput;                                                                                         // 12586
};                                                                                                                     // 12587
                                                                                                                       // 12588
module.exports = CachedMap;                                                                                            // 12589
},{}],84:[function(require,module,exports){                                                                            // 12590
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12591
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12592
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12593
 *                                                                                                                     // 12594
 * Owner: david@famo.us                                                                                                // 12595
 * @license MPL 2.0                                                                                                    // 12596
 * @copyright Famous Industries, Inc. 2014                                                                             // 12597
 */                                                                                                                    // 12598
                                                                                                                       // 12599
                                                                                                                       // 12600
                                                                                                                       // 12601
                                                                                                                       // 12602
/**                                                                                                                    // 12603
 * A library of curves which map an animation explicitly as a function of time.                                        // 12604
 *                                                                                                                     // 12605
 * @class Easing                                                                                                       // 12606
 */                                                                                                                    // 12607
var Easing = {                                                                                                         // 12608
                                                                                                                       // 12609
    /**                                                                                                                // 12610
     * @property inQuad                                                                                                // 12611
     * @static                                                                                                         // 12612
     */                                                                                                                // 12613
    inQuad: function(t) {                                                                                              // 12614
        return t*t;                                                                                                    // 12615
    },                                                                                                                 // 12616
                                                                                                                       // 12617
    /**                                                                                                                // 12618
     * @property outQuad                                                                                               // 12619
     * @static                                                                                                         // 12620
     */                                                                                                                // 12621
    outQuad: function(t) {                                                                                             // 12622
        return -(t-=1)*t+1;                                                                                            // 12623
    },                                                                                                                 // 12624
                                                                                                                       // 12625
    /**                                                                                                                // 12626
     * @property inOutQuad                                                                                             // 12627
     * @static                                                                                                         // 12628
     */                                                                                                                // 12629
    inOutQuad: function(t) {                                                                                           // 12630
        if ((t/=.5) < 1) return .5*t*t;                                                                                // 12631
        return -.5*((--t)*(t-2) - 1);                                                                                  // 12632
    },                                                                                                                 // 12633
                                                                                                                       // 12634
    /**                                                                                                                // 12635
     * @property inCubic                                                                                               // 12636
     * @static                                                                                                         // 12637
     */                                                                                                                // 12638
    inCubic: function(t) {                                                                                             // 12639
        return t*t*t;                                                                                                  // 12640
    },                                                                                                                 // 12641
                                                                                                                       // 12642
    /**                                                                                                                // 12643
     * @property outCubic                                                                                              // 12644
     * @static                                                                                                         // 12645
     */                                                                                                                // 12646
    outCubic: function(t) {                                                                                            // 12647
        return ((--t)*t*t + 1);                                                                                        // 12648
    },                                                                                                                 // 12649
                                                                                                                       // 12650
    /**                                                                                                                // 12651
     * @property inOutCubic                                                                                            // 12652
     * @static                                                                                                         // 12653
     */                                                                                                                // 12654
    inOutCubic: function(t) {                                                                                          // 12655
        if ((t/=.5) < 1) return .5*t*t*t;                                                                              // 12656
        return .5*((t-=2)*t*t + 2);                                                                                    // 12657
    },                                                                                                                 // 12658
                                                                                                                       // 12659
    /**                                                                                                                // 12660
     * @property inQuart                                                                                               // 12661
     * @static                                                                                                         // 12662
     */                                                                                                                // 12663
    inQuart: function(t) {                                                                                             // 12664
        return t*t*t*t;                                                                                                // 12665
    },                                                                                                                 // 12666
                                                                                                                       // 12667
    /**                                                                                                                // 12668
     * @property outQuart                                                                                              // 12669
     * @static                                                                                                         // 12670
     */                                                                                                                // 12671
    outQuart: function(t) {                                                                                            // 12672
        return -((--t)*t*t*t - 1);                                                                                     // 12673
    },                                                                                                                 // 12674
                                                                                                                       // 12675
    /**                                                                                                                // 12676
     * @property inOutQuart                                                                                            // 12677
     * @static                                                                                                         // 12678
     */                                                                                                                // 12679
    inOutQuart: function(t) {                                                                                          // 12680
        if ((t/=.5) < 1) return .5*t*t*t*t;                                                                            // 12681
        return -.5 * ((t-=2)*t*t*t - 2);                                                                               // 12682
    },                                                                                                                 // 12683
                                                                                                                       // 12684
    /**                                                                                                                // 12685
     * @property inQuint                                                                                               // 12686
     * @static                                                                                                         // 12687
     */                                                                                                                // 12688
    inQuint: function(t) {                                                                                             // 12689
        return t*t*t*t*t;                                                                                              // 12690
    },                                                                                                                 // 12691
                                                                                                                       // 12692
    /**                                                                                                                // 12693
     * @property outQuint                                                                                              // 12694
     * @static                                                                                                         // 12695
     */                                                                                                                // 12696
    outQuint: function(t) {                                                                                            // 12697
        return ((--t)*t*t*t*t + 1);                                                                                    // 12698
    },                                                                                                                 // 12699
                                                                                                                       // 12700
    /**                                                                                                                // 12701
     * @property inOutQuint                                                                                            // 12702
     * @static                                                                                                         // 12703
     */                                                                                                                // 12704
    inOutQuint: function(t) {                                                                                          // 12705
        if ((t/=.5) < 1) return .5*t*t*t*t*t;                                                                          // 12706
        return .5*((t-=2)*t*t*t*t + 2);                                                                                // 12707
    },                                                                                                                 // 12708
                                                                                                                       // 12709
    /**                                                                                                                // 12710
     * @property inSine                                                                                                // 12711
     * @static                                                                                                         // 12712
     */                                                                                                                // 12713
    inSine: function(t) {                                                                                              // 12714
        return -1.0*Math.cos(t * (Math.PI/2)) + 1.0;                                                                   // 12715
    },                                                                                                                 // 12716
                                                                                                                       // 12717
    /**                                                                                                                // 12718
     * @property outSine                                                                                               // 12719
     * @static                                                                                                         // 12720
     */                                                                                                                // 12721
    outSine: function(t) {                                                                                             // 12722
        return Math.sin(t * (Math.PI/2));                                                                              // 12723
    },                                                                                                                 // 12724
                                                                                                                       // 12725
    /**                                                                                                                // 12726
     * @property inOutSine                                                                                             // 12727
     * @static                                                                                                         // 12728
     */                                                                                                                // 12729
    inOutSine: function(t) {                                                                                           // 12730
        return -.5*(Math.cos(Math.PI*t) - 1);                                                                          // 12731
    },                                                                                                                 // 12732
                                                                                                                       // 12733
    /**                                                                                                                // 12734
     * @property inExpo                                                                                                // 12735
     * @static                                                                                                         // 12736
     */                                                                                                                // 12737
    inExpo: function(t) {                                                                                              // 12738
        return (t===0) ? 0.0 : Math.pow(2, 10 * (t - 1));                                                              // 12739
    },                                                                                                                 // 12740
                                                                                                                       // 12741
    /**                                                                                                                // 12742
     * @property outExpo                                                                                               // 12743
     * @static                                                                                                         // 12744
     */                                                                                                                // 12745
    outExpo: function(t) {                                                                                             // 12746
        return (t===1.0) ? 1.0 : (-Math.pow(2, -10 * t) + 1);                                                          // 12747
    },                                                                                                                 // 12748
                                                                                                                       // 12749
    /**                                                                                                                // 12750
     * @property inOutExpo                                                                                             // 12751
     * @static                                                                                                         // 12752
     */                                                                                                                // 12753
    inOutExpo: function(t) {                                                                                           // 12754
        if (t===0) return 0.0;                                                                                         // 12755
        if (t===1.0) return 1.0;                                                                                       // 12756
        if ((t/=.5) < 1) return .5 * Math.pow(2, 10 * (t - 1));                                                        // 12757
        return .5 * (-Math.pow(2, -10 * --t) + 2);                                                                     // 12758
    },                                                                                                                 // 12759
                                                                                                                       // 12760
    /**                                                                                                                // 12761
     * @property inCirc                                                                                                // 12762
     * @static                                                                                                         // 12763
     */                                                                                                                // 12764
    inCirc: function(t) {                                                                                              // 12765
        return -(Math.sqrt(1 - t*t) - 1);                                                                              // 12766
    },                                                                                                                 // 12767
                                                                                                                       // 12768
    /**                                                                                                                // 12769
     * @property outCirc                                                                                               // 12770
     * @static                                                                                                         // 12771
     */                                                                                                                // 12772
    outCirc: function(t) {                                                                                             // 12773
        return Math.sqrt(1 - (--t)*t);                                                                                 // 12774
    },                                                                                                                 // 12775
                                                                                                                       // 12776
    /**                                                                                                                // 12777
     * @property inOutCirc                                                                                             // 12778
     * @static                                                                                                         // 12779
     */                                                                                                                // 12780
    inOutCirc: function(t) {                                                                                           // 12781
        if ((t/=.5) < 1) return -.5 * (Math.sqrt(1 - t*t) - 1);                                                        // 12782
        return .5 * (Math.sqrt(1 - (t-=2)*t) + 1);                                                                     // 12783
    },                                                                                                                 // 12784
                                                                                                                       // 12785
    /**                                                                                                                // 12786
     * @property inElastic                                                                                             // 12787
     * @static                                                                                                         // 12788
     */                                                                                                                // 12789
    inElastic: function(t) {                                                                                           // 12790
        var s=1.70158;var p=0;var a=1.0;                                                                               // 12791
        if (t===0) return 0.0;  if (t===1) return 1.0;  if (!p) p=.3;                                                  // 12792
        s = p/(2*Math.PI) * Math.asin(1.0/a);                                                                          // 12793
        return -(a*Math.pow(2,10*(t-=1)) * Math.sin((t-s)*(2*Math.PI)/ p));                                            // 12794
    },                                                                                                                 // 12795
                                                                                                                       // 12796
    /**                                                                                                                // 12797
     * @property outElastic                                                                                            // 12798
     * @static                                                                                                         // 12799
     */                                                                                                                // 12800
    outElastic: function(t) {                                                                                          // 12801
        var s=1.70158;var p=0;var a=1.0;                                                                               // 12802
        if (t===0) return 0.0;  if (t===1) return 1.0;  if (!p) p=.3;                                                  // 12803
        s = p/(2*Math.PI) * Math.asin(1.0/a);                                                                          // 12804
        return a*Math.pow(2,-10*t) * Math.sin((t-s)*(2*Math.PI)/p) + 1.0;                                              // 12805
    },                                                                                                                 // 12806
                                                                                                                       // 12807
    /**                                                                                                                // 12808
     * @property inOutElastic                                                                                          // 12809
     * @static                                                                                                         // 12810
     */                                                                                                                // 12811
    inOutElastic: function(t) {                                                                                        // 12812
        var s=1.70158;var p=0;var a=1.0;                                                                               // 12813
        if (t===0) return 0.0;  if ((t/=.5)===2) return 1.0;  if (!p) p=(.3*1.5);                                      // 12814
        s = p/(2*Math.PI) * Math.asin(1.0/a);                                                                          // 12815
        if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin((t-s)*(2*Math.PI)/p));                               // 12816
        return a*Math.pow(2,-10*(t-=1)) * Math.sin((t-s)*(2*Math.PI)/p)*.5 + 1.0;                                      // 12817
    },                                                                                                                 // 12818
                                                                                                                       // 12819
    /**                                                                                                                // 12820
     * @property inBack                                                                                                // 12821
     * @static                                                                                                         // 12822
     */                                                                                                                // 12823
    inBack: function(t, s) {                                                                                           // 12824
        if (s === undefined) s = 1.70158;                                                                              // 12825
        return t*t*((s+1)*t - s);                                                                                      // 12826
    },                                                                                                                 // 12827
                                                                                                                       // 12828
    /**                                                                                                                // 12829
     * @property outBack                                                                                               // 12830
     * @static                                                                                                         // 12831
     */                                                                                                                // 12832
    outBack: function(t, s) {                                                                                          // 12833
        if (s === undefined) s = 1.70158;                                                                              // 12834
        return ((--t)*t*((s+1)*t + s) + 1);                                                                            // 12835
    },                                                                                                                 // 12836
                                                                                                                       // 12837
    /**                                                                                                                // 12838
     * @property inOutBack                                                                                             // 12839
     * @static                                                                                                         // 12840
     */                                                                                                                // 12841
    inOutBack: function(t, s) {                                                                                        // 12842
        if (s === undefined) s = 1.70158;                                                                              // 12843
        if ((t/=.5) < 1) return .5*(t*t*(((s*=(1.525))+1)*t - s));                                                     // 12844
        return .5*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2);                                                             // 12845
    },                                                                                                                 // 12846
                                                                                                                       // 12847
    /**                                                                                                                // 12848
     * @property inBounce                                                                                              // 12849
     * @static                                                                                                         // 12850
     */                                                                                                                // 12851
    inBounce: function(t) {                                                                                            // 12852
        return 1.0 - Easing.outBounce(1.0-t);                                                                          // 12853
    },                                                                                                                 // 12854
                                                                                                                       // 12855
    /**                                                                                                                // 12856
     * @property outBounce                                                                                             // 12857
     * @static                                                                                                         // 12858
     */                                                                                                                // 12859
    outBounce: function(t) {                                                                                           // 12860
        if (t < (1/2.75)) {                                                                                            // 12861
            return (7.5625*t*t);                                                                                       // 12862
        } else if (t < (2/2.75)) {                                                                                     // 12863
            return (7.5625*(t-=(1.5/2.75))*t + .75);                                                                   // 12864
        } else if (t < (2.5/2.75)) {                                                                                   // 12865
            return (7.5625*(t-=(2.25/2.75))*t + .9375);                                                                // 12866
        } else {                                                                                                       // 12867
            return (7.5625*(t-=(2.625/2.75))*t + .984375);                                                             // 12868
        }                                                                                                              // 12869
    },                                                                                                                 // 12870
                                                                                                                       // 12871
    /**                                                                                                                // 12872
     * @property inOutBounce                                                                                           // 12873
     * @static                                                                                                         // 12874
     */                                                                                                                // 12875
    inOutBounce: function(t) {                                                                                         // 12876
        if (t < .5) return Easing.inBounce(t*2) * .5;                                                                  // 12877
        return Easing.outBounce(t*2-1.0) * .5 + .5;                                                                    // 12878
    }                                                                                                                  // 12879
};                                                                                                                     // 12880
                                                                                                                       // 12881
module.exports = Easing;                                                                                               // 12882
},{}],85:[function(require,module,exports){                                                                            // 12883
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12884
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12885
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12886
 *                                                                                                                     // 12887
 * Owner: david@famo.us                                                                                                // 12888
 * @license MPL 2.0                                                                                                    // 12889
 * @copyright Famous Industries, Inc. 2014                                                                             // 12890
 */                                                                                                                    // 12891
                                                                                                                       // 12892
var Utility = require('../utilities/Utility');                                                                         // 12893
                                                                                                                       // 12894
/**                                                                                                                    // 12895
 * Transition meta-method to support transitioning multiple                                                            // 12896
 *   values with scalar-only methods.                                                                                  // 12897
 *                                                                                                                     // 12898
 *                                                                                                                     // 12899
 * @class MultipleTransition                                                                                           // 12900
 * @constructor                                                                                                        // 12901
 *                                                                                                                     // 12902
 * @param {Object} method Transionable class to multiplex                                                              // 12903
 */                                                                                                                    // 12904
function MultipleTransition(method) {                                                                                  // 12905
    this.method = method;                                                                                              // 12906
    this._instances = [];                                                                                              // 12907
    this.state = [];                                                                                                   // 12908
}                                                                                                                      // 12909
                                                                                                                       // 12910
MultipleTransition.SUPPORTS_MULTIPLE = true;                                                                           // 12911
                                                                                                                       // 12912
/**                                                                                                                    // 12913
 * Get the state of each transition.                                                                                   // 12914
 *                                                                                                                     // 12915
 * @method get                                                                                                         // 12916
 *                                                                                                                     // 12917
 * @return state {Number|Array} state array                                                                            // 12918
 */                                                                                                                    // 12919
MultipleTransition.prototype.get = function get() {                                                                    // 12920
    for (var i = 0; i < this._instances.length; i++) {                                                                 // 12921
        this.state[i] = this._instances[i].get();                                                                      // 12922
    }                                                                                                                  // 12923
    return this.state;                                                                                                 // 12924
};                                                                                                                     // 12925
                                                                                                                       // 12926
/**                                                                                                                    // 12927
 * Set the end states with a shared transition, with optional callback.                                                // 12928
 *                                                                                                                     // 12929
 * @method set                                                                                                         // 12930
 *                                                                                                                     // 12931
 * @param {Number|Array} endState Final State.  Use a multi-element argument for multiple transitions.                 // 12932
 * @param {Object} transition Transition definition, shared among all instances                                        // 12933
 * @param {Function} callback called when all endStates have been reached.                                             // 12934
 */                                                                                                                    // 12935
MultipleTransition.prototype.set = function set(endState, transition, callback) {                                      // 12936
    var _allCallback = Utility.after(endState.length, callback);                                                       // 12937
    for (var i = 0; i < endState.length; i++) {                                                                        // 12938
        if (!this._instances[i]) this._instances[i] = new (this.method)();                                             // 12939
        this._instances[i].set(endState[i], transition, _allCallback);                                                 // 12940
    }                                                                                                                  // 12941
};                                                                                                                     // 12942
                                                                                                                       // 12943
/**                                                                                                                    // 12944
 * Reset all transitions to start state.                                                                               // 12945
 *                                                                                                                     // 12946
 * @method reset                                                                                                       // 12947
 *                                                                                                                     // 12948
 * @param  {Number|Array} startState Start state                                                                       // 12949
 */                                                                                                                    // 12950
MultipleTransition.prototype.reset = function reset(startState) {                                                      // 12951
    for (var i = 0; i < startState.length; i++) {                                                                      // 12952
        if (!this._instances[i]) this._instances[i] = new (this.method)();                                             // 12953
        this._instances[i].reset(startState[i]);                                                                       // 12954
    }                                                                                                                  // 12955
};                                                                                                                     // 12956
                                                                                                                       // 12957
module.exports = MultipleTransition;                                                                                   // 12958
},{"../utilities/Utility":95}],86:[function(require,module,exports){                                                   // 12959
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12960
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12961
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12962
 *                                                                                                                     // 12963
 * Owner: david@famo.us                                                                                                // 12964
 * @license MPL 2.0                                                                                                    // 12965
 * @copyright Famous Industries, Inc. 2014                                                                             // 12966
 */                                                                                                                    // 12967
                                                                                                                       // 12968
var PE = require('../physics/PhysicsEngine');                                                                          // 12969
var Particle = require('../physics/bodies/Particle');                                                                  // 12970
var Spring = require('../physics/constraints/Snap');                                                                   // 12971
var Vector = require('../math/Vector');                                                                                // 12972
                                                                                                                       // 12973
/**                                                                                                                    // 12974
 * SnapTransition is a method of transitioning between two values (numbers,                                            // 12975
 * or arrays of numbers). It is similar to SpringTransition except                                                     // 12976
 * the transition can be much faster and always has a damping effect.                                                  // 12977
 *                                                                                                                     // 12978
 * @class SnapTransition                                                                                               // 12979
 * @constructor                                                                                                        // 12980
 *                                                                                                                     // 12981
 * @param [state=0] {Number|Array} Initial state                                                                       // 12982
 */                                                                                                                    // 12983
function SnapTransition(state) {                                                                                       // 12984
    state = state || 0;                                                                                                // 12985
                                                                                                                       // 12986
    this.endState  = new Vector(state);                                                                                // 12987
    this.initState = new Vector();                                                                                     // 12988
                                                                                                                       // 12989
    this._dimensions       = 1;                                                                                        // 12990
    this._restTolerance    = 1e-10;                                                                                    // 12991
    this._absRestTolerance = this._restTolerance;                                                                      // 12992
    this._callback         = undefined;                                                                                // 12993
                                                                                                                       // 12994
    this.PE       = new PE();                                                                                          // 12995
    this.particle = new Particle();                                                                                    // 12996
    this.spring   = new Spring({anchor : this.endState});                                                              // 12997
                                                                                                                       // 12998
    this.PE.addBody(this.particle);                                                                                    // 12999
    this.PE.attach(this.spring, this.particle);                                                                        // 13000
}                                                                                                                      // 13001
                                                                                                                       // 13002
SnapTransition.SUPPORTS_MULTIPLE = 3;                                                                                  // 13003
                                                                                                                       // 13004
/**                                                                                                                    // 13005
 * @property SnapTransition.DEFAULT_OPTIONS                                                                            // 13006
 * @type Object                                                                                                        // 13007
 * @protected                                                                                                          // 13008
 * @static                                                                                                             // 13009
 */                                                                                                                    // 13010
SnapTransition.DEFAULT_OPTIONS = {                                                                                     // 13011
                                                                                                                       // 13012
    /**                                                                                                                // 13013
     * The amount of time in milliseconds taken for one complete oscillation                                           // 13014
     * when there is no damping                                                                                        // 13015
     *    Range : [0, Infinity]                                                                                        // 13016
     *                                                                                                                 // 13017
     * @attribute period                                                                                               // 13018
     * @type Number                                                                                                    // 13019
     * @default 100                                                                                                    // 13020
     */                                                                                                                // 13021
    period : 100,                                                                                                      // 13022
                                                                                                                       // 13023
    /**                                                                                                                // 13024
     * The damping of the snap.                                                                                        // 13025
     *    Range : [0, 1]                                                                                               // 13026
     *                                                                                                                 // 13027
     * @attribute dampingRatio                                                                                         // 13028
     * @type Number                                                                                                    // 13029
     * @default 0.2                                                                                                    // 13030
     */                                                                                                                // 13031
    dampingRatio : 0.2,                                                                                                // 13032
                                                                                                                       // 13033
    /**                                                                                                                // 13034
     * The initial velocity of the transition.                                                                         // 13035
     *                                                                                                                 // 13036
     * @attribute velocity                                                                                             // 13037
     * @type Number|Array                                                                                              // 13038
     * @default 0                                                                                                      // 13039
     */                                                                                                                // 13040
    velocity : 0                                                                                                       // 13041
};                                                                                                                     // 13042
                                                                                                                       // 13043
function _getEnergy() {                                                                                                // 13044
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);                                         // 13045
}                                                                                                                      // 13046
                                                                                                                       // 13047
function _setAbsoluteRestTolerance() {                                                                                 // 13048
    var distance = this.endState.sub(this.initState).normSquared();                                                    // 13049
    this._absRestTolerance = (distance === 0)                                                                          // 13050
        ? this._restTolerance                                                                                          // 13051
        : this._restTolerance * distance;                                                                              // 13052
}                                                                                                                      // 13053
                                                                                                                       // 13054
function _setTarget(target) {                                                                                          // 13055
    this.endState.set(target);                                                                                         // 13056
    _setAbsoluteRestTolerance.call(this);                                                                              // 13057
}                                                                                                                      // 13058
                                                                                                                       // 13059
function _wake() {                                                                                                     // 13060
    this.PE.wake();                                                                                                    // 13061
}                                                                                                                      // 13062
                                                                                                                       // 13063
function _sleep() {                                                                                                    // 13064
    this.PE.sleep();                                                                                                   // 13065
}                                                                                                                      // 13066
                                                                                                                       // 13067
function _setParticlePosition(p) {                                                                                     // 13068
    this.particle.position.set(p);                                                                                     // 13069
}                                                                                                                      // 13070
                                                                                                                       // 13071
function _setParticleVelocity(v) {                                                                                     // 13072
    this.particle.velocity.set(v);                                                                                     // 13073
}                                                                                                                      // 13074
                                                                                                                       // 13075
function _getParticlePosition() {                                                                                      // 13076
    return (this._dimensions === 0)                                                                                    // 13077
        ? this.particle.getPosition1D()                                                                                // 13078
        : this.particle.getPosition();                                                                                 // 13079
}                                                                                                                      // 13080
                                                                                                                       // 13081
function _getParticleVelocity() {                                                                                      // 13082
    return (this._dimensions === 0)                                                                                    // 13083
        ? this.particle.getVelocity1D()                                                                                // 13084
        : this.particle.getVelocity();                                                                                 // 13085
}                                                                                                                      // 13086
                                                                                                                       // 13087
function _setCallback(callback) {                                                                                      // 13088
    this._callback = callback;                                                                                         // 13089
}                                                                                                                      // 13090
                                                                                                                       // 13091
function _setupDefinition(definition) {                                                                                // 13092
    var defaults = SnapTransition.DEFAULT_OPTIONS;                                                                     // 13093
    if (definition.period === undefined)       definition.period       = defaults.period;                              // 13094
    if (definition.dampingRatio === undefined) definition.dampingRatio = defaults.dampingRatio;                        // 13095
    if (definition.velocity === undefined)     definition.velocity     = defaults.velocity;                            // 13096
                                                                                                                       // 13097
    //setup spring                                                                                                     // 13098
    this.spring.setOptions({                                                                                           // 13099
        period       : definition.period,                                                                              // 13100
        dampingRatio : definition.dampingRatio                                                                         // 13101
    });                                                                                                                // 13102
                                                                                                                       // 13103
    //setup particle                                                                                                   // 13104
    _setParticleVelocity.call(this, definition.velocity);                                                              // 13105
}                                                                                                                      // 13106
                                                                                                                       // 13107
function _update() {                                                                                                   // 13108
    if (this.PE.isSleeping()) {                                                                                        // 13109
        if (this._callback) {                                                                                          // 13110
            var cb = this._callback;                                                                                   // 13111
            this._callback = undefined;                                                                                // 13112
            cb();                                                                                                      // 13113
        }                                                                                                              // 13114
        return;                                                                                                        // 13115
    }                                                                                                                  // 13116
                                                                                                                       // 13117
    if (_getEnergy.call(this) < this._absRestTolerance) {                                                              // 13118
        _setParticlePosition.call(this, this.endState);                                                                // 13119
        _setParticleVelocity.call(this, [0,0,0]);                                                                      // 13120
        _sleep.call(this);                                                                                             // 13121
    }                                                                                                                  // 13122
}                                                                                                                      // 13123
                                                                                                                       // 13124
/**                                                                                                                    // 13125
 * Resets the state and velocity                                                                                       // 13126
 *                                                                                                                     // 13127
 * @method reset                                                                                                       // 13128
 *                                                                                                                     // 13129
 * @param state {Number|Array}      State                                                                              // 13130
 * @param [velocity] {Number|Array} Velocity                                                                           // 13131
 */                                                                                                                    // 13132
SnapTransition.prototype.reset = function reset(state, velocity) {                                                     // 13133
    this._dimensions = (state instanceof Array)                                                                        // 13134
        ? state.length                                                                                                 // 13135
        : 0;                                                                                                           // 13136
                                                                                                                       // 13137
    this.initState.set(state);                                                                                         // 13138
    _setParticlePosition.call(this, state);                                                                            // 13139
    _setTarget.call(this, state);                                                                                      // 13140
    if (velocity) _setParticleVelocity.call(this, velocity);                                                           // 13141
    _setCallback.call(this, undefined);                                                                                // 13142
};                                                                                                                     // 13143
                                                                                                                       // 13144
/**                                                                                                                    // 13145
 * Getter for velocity                                                                                                 // 13146
 *                                                                                                                     // 13147
 * @method getVelocity                                                                                                 // 13148
 *                                                                                                                     // 13149
 * @return velocity {Number|Array}                                                                                     // 13150
 */                                                                                                                    // 13151
SnapTransition.prototype.getVelocity = function getVelocity() {                                                        // 13152
    return _getParticleVelocity.call(this);                                                                            // 13153
};                                                                                                                     // 13154
                                                                                                                       // 13155
/**                                                                                                                    // 13156
 * Setter for velocity                                                                                                 // 13157
 *                                                                                                                     // 13158
 * @method setVelocity                                                                                                 // 13159
 *                                                                                                                     // 13160
 * @return velocity {Number|Array}                                                                                     // 13161
 */                                                                                                                    // 13162
SnapTransition.prototype.setVelocity = function setVelocity(velocity) {                                                // 13163
    this.call(this, _setParticleVelocity(velocity));                                                                   // 13164
};                                                                                                                     // 13165
                                                                                                                       // 13166
/**                                                                                                                    // 13167
 * Detects whether a transition is in progress                                                                         // 13168
 *                                                                                                                     // 13169
 * @method isActive                                                                                                    // 13170
 *                                                                                                                     // 13171
 * @return {Boolean}                                                                                                   // 13172
 */                                                                                                                    // 13173
SnapTransition.prototype.isActive = function isActive() {                                                              // 13174
    return !this.PE.isSleeping();                                                                                      // 13175
};                                                                                                                     // 13176
                                                                                                                       // 13177
/**                                                                                                                    // 13178
 * Halt the transition                                                                                                 // 13179
 *                                                                                                                     // 13180
 * @method halt                                                                                                        // 13181
 */                                                                                                                    // 13182
SnapTransition.prototype.halt = function halt() {                                                                      // 13183
    this.set(this.get());                                                                                              // 13184
};                                                                                                                     // 13185
                                                                                                                       // 13186
/**                                                                                                                    // 13187
 * Get the current position of the transition                                                                          // 13188
s     *                                                                                                                // 13189
 * @method get                                                                                                         // 13190
 *                                                                                                                     // 13191
 * @return state {Number|Array}                                                                                        // 13192
 */                                                                                                                    // 13193
SnapTransition.prototype.get = function get() {                                                                        // 13194
    _update.call(this);                                                                                                // 13195
    return _getParticlePosition.call(this);                                                                            // 13196
};                                                                                                                     // 13197
                                                                                                                       // 13198
/**                                                                                                                    // 13199
 * Set the end position and transition, with optional callback on completion.                                          // 13200
 *                                                                                                                     // 13201
 * @method set                                                                                                         // 13202
 *                                                                                                                     // 13203
 * @param state {Number|Array}      Final state                                                                        // 13204
 * @param [definition] {Object}     Transition definition                                                              // 13205
 * @param [callback] {Function}     Callback                                                                           // 13206
 */                                                                                                                    // 13207
SnapTransition.prototype.set = function set(state, definition, callback) {                                             // 13208
    if (!definition) {                                                                                                 // 13209
        this.reset(state);                                                                                             // 13210
        if (callback) callback();                                                                                      // 13211
        return;                                                                                                        // 13212
    }                                                                                                                  // 13213
                                                                                                                       // 13214
    this._dimensions = (state instanceof Array)                                                                        // 13215
        ? state.length                                                                                                 // 13216
        : 0;                                                                                                           // 13217
                                                                                                                       // 13218
    _wake.call(this);                                                                                                  // 13219
    _setupDefinition.call(this, definition);                                                                           // 13220
    _setTarget.call(this, state);                                                                                      // 13221
    _setCallback.call(this, callback);                                                                                 // 13222
};                                                                                                                     // 13223
                                                                                                                       // 13224
module.exports = SnapTransition;                                                                                       // 13225
},{"../math/Vector":41,"../physics/PhysicsEngine":48,"../physics/bodies/Particle":51,"../physics/constraints/Snap":58}],87:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13227
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13228
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13229
 *                                                                                                                     // 13230
 * Owner: david@famo.us                                                                                                // 13231
 * @license MPL 2.0                                                                                                    // 13232
 * @copyright Famous Industries, Inc. 2014                                                                             // 13233
 */                                                                                                                    // 13234
                                                                                                                       // 13235
/*global console*/                                                                                                     // 13236
                                                                                                                       // 13237
var PE = require('../physics/PhysicsEngine');                                                                          // 13238
var Particle = require('../physics/bodies/Particle');                                                                  // 13239
var Spring = require('../physics/forces/Spring');                                                                      // 13240
var Vector = require('../math/Vector');                                                                                // 13241
                                                                                                                       // 13242
/**                                                                                                                    // 13243
 * SpringTransition is a method of transitioning between two values (numbers,                                          // 13244
 * or arrays of numbers) with a bounce. The transition will overshoot the target                                       // 13245
 * state depending on the parameters of the transition.                                                                // 13246
 *                                                                                                                     // 13247
 * @class SpringTransition                                                                                             // 13248
 * @constructor                                                                                                        // 13249
 *                                                                                                                     // 13250
 * @param {Number|Array} [state=0] Initial state                                                                       // 13251
 */                                                                                                                    // 13252
function SpringTransition(state) {                                                                                     // 13253
    state = state || 0;                                                                                                // 13254
    this.endState  = new Vector(state);                                                                                // 13255
    this.initState = new Vector();                                                                                     // 13256
                                                                                                                       // 13257
    this._dimensions       = undefined;                                                                                // 13258
    this._restTolerance    = 1e-10;                                                                                    // 13259
    this._absRestTolerance = this._restTolerance;                                                                      // 13260
    this._callback         = undefined;                                                                                // 13261
                                                                                                                       // 13262
    this.PE       = new PE();                                                                                          // 13263
    this.spring   = new Spring({anchor : this.endState});                                                              // 13264
    this.particle = new Particle();                                                                                    // 13265
                                                                                                                       // 13266
    this.PE.addBody(this.particle);                                                                                    // 13267
    this.PE.attach(this.spring, this.particle);                                                                        // 13268
}                                                                                                                      // 13269
                                                                                                                       // 13270
SpringTransition.SUPPORTS_MULTIPLE = 3;                                                                                // 13271
                                                                                                                       // 13272
/**                                                                                                                    // 13273
 * @property SpringTransition.DEFAULT_OPTIONS                                                                          // 13274
 * @type Object                                                                                                        // 13275
 * @protected                                                                                                          // 13276
 * @static                                                                                                             // 13277
 */                                                                                                                    // 13278
SpringTransition.DEFAULT_OPTIONS = {                                                                                   // 13279
                                                                                                                       // 13280
    /**                                                                                                                // 13281
     * The amount of time in milliseconds taken for one complete oscillation                                           // 13282
     * when there is no damping                                                                                        // 13283
     *    Range : [0, Infinity]                                                                                        // 13284
     *                                                                                                                 // 13285
     * @attribute period                                                                                               // 13286
     * @type Number                                                                                                    // 13287
     * @default 300                                                                                                    // 13288
     */                                                                                                                // 13289
    period : 300,                                                                                                      // 13290
                                                                                                                       // 13291
    /**                                                                                                                // 13292
     * The damping of the snap.                                                                                        // 13293
     *    Range : [0, 1]                                                                                               // 13294
     *    0 = no damping, and the spring will oscillate forever                                                        // 13295
     *    1 = critically damped (the spring will never oscillate)                                                      // 13296
     *                                                                                                                 // 13297
     * @attribute dampingRatio                                                                                         // 13298
     * @type Number                                                                                                    // 13299
     * @default 0.5                                                                                                    // 13300
     */                                                                                                                // 13301
    dampingRatio : 0.5,                                                                                                // 13302
                                                                                                                       // 13303
    /**                                                                                                                // 13304
     * The initial velocity of the transition.                                                                         // 13305
     *                                                                                                                 // 13306
     * @attribute velocity                                                                                             // 13307
     * @type Number|Array                                                                                              // 13308
     * @default 0                                                                                                      // 13309
     */                                                                                                                // 13310
    velocity : 0                                                                                                       // 13311
};                                                                                                                     // 13312
                                                                                                                       // 13313
function _getEnergy() {                                                                                                // 13314
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);                                         // 13315
}                                                                                                                      // 13316
                                                                                                                       // 13317
function _setParticlePosition(p) {                                                                                     // 13318
    this.particle.setPosition(p);                                                                                      // 13319
}                                                                                                                      // 13320
                                                                                                                       // 13321
function _setParticleVelocity(v) {                                                                                     // 13322
    this.particle.setVelocity(v);                                                                                      // 13323
}                                                                                                                      // 13324
                                                                                                                       // 13325
function _getParticlePosition() {                                                                                      // 13326
    return (this._dimensions === 0)                                                                                    // 13327
        ? this.particle.getPosition1D()                                                                                // 13328
        : this.particle.getPosition();                                                                                 // 13329
}                                                                                                                      // 13330
                                                                                                                       // 13331
function _getParticleVelocity() {                                                                                      // 13332
    return (this._dimensions === 0)                                                                                    // 13333
        ? this.particle.getVelocity1D()                                                                                // 13334
        : this.particle.getVelocity();                                                                                 // 13335
}                                                                                                                      // 13336
                                                                                                                       // 13337
function _setCallback(callback) {                                                                                      // 13338
    this._callback = callback;                                                                                         // 13339
}                                                                                                                      // 13340
                                                                                                                       // 13341
function _wake() {                                                                                                     // 13342
    this.PE.wake();                                                                                                    // 13343
}                                                                                                                      // 13344
                                                                                                                       // 13345
function _sleep() {                                                                                                    // 13346
    this.PE.sleep();                                                                                                   // 13347
}                                                                                                                      // 13348
                                                                                                                       // 13349
function _update() {                                                                                                   // 13350
    if (this.PE.isSleeping()) {                                                                                        // 13351
        if (this._callback) {                                                                                          // 13352
            var cb = this._callback;                                                                                   // 13353
            this._callback = undefined;                                                                                // 13354
            cb();                                                                                                      // 13355
        }                                                                                                              // 13356
        return;                                                                                                        // 13357
    }                                                                                                                  // 13358
                                                                                                                       // 13359
    if (_getEnergy.call(this) < this._absRestTolerance) {                                                              // 13360
        _setParticlePosition.call(this, this.endState);                                                                // 13361
        _setParticleVelocity.call(this, [0,0,0]);                                                                      // 13362
        _sleep.call(this);                                                                                             // 13363
    }                                                                                                                  // 13364
}                                                                                                                      // 13365
                                                                                                                       // 13366
function _setupDefinition(definition) {                                                                                // 13367
    // TODO fix no-console error                                                                                       // 13368
    /* eslint no-console: 0 */                                                                                         // 13369
    var defaults = SpringTransition.DEFAULT_OPTIONS;                                                                   // 13370
    if (definition.period === undefined)       definition.period       = defaults.period;                              // 13371
    if (definition.dampingRatio === undefined) definition.dampingRatio = defaults.dampingRatio;                        // 13372
    if (definition.velocity === undefined)     definition.velocity     = defaults.velocity;                            // 13373
                                                                                                                       // 13374
    if (definition.period < 150) {                                                                                     // 13375
        definition.period = 150;                                                                                       // 13376
        console.warn('The period of a SpringTransition is capped at 150 ms. Use a SnapTransition for faster transitions');
    }                                                                                                                  // 13378
                                                                                                                       // 13379
    //setup spring                                                                                                     // 13380
    this.spring.setOptions({                                                                                           // 13381
        period       : definition.period,                                                                              // 13382
        dampingRatio : definition.dampingRatio                                                                         // 13383
    });                                                                                                                // 13384
                                                                                                                       // 13385
    //setup particle                                                                                                   // 13386
    _setParticleVelocity.call(this, definition.velocity);                                                              // 13387
}                                                                                                                      // 13388
                                                                                                                       // 13389
function _setAbsoluteRestTolerance() {                                                                                 // 13390
    var distance = this.endState.sub(this.initState).normSquared();                                                    // 13391
    this._absRestTolerance = (distance === 0)                                                                          // 13392
        ? this._restTolerance                                                                                          // 13393
        : this._restTolerance * distance;                                                                              // 13394
}                                                                                                                      // 13395
                                                                                                                       // 13396
function _setTarget(target) {                                                                                          // 13397
    this.endState.set(target);                                                                                         // 13398
    _setAbsoluteRestTolerance.call(this);                                                                              // 13399
}                                                                                                                      // 13400
                                                                                                                       // 13401
/**                                                                                                                    // 13402
 * Resets the position and velocity                                                                                    // 13403
 *                                                                                                                     // 13404
 * @method reset                                                                                                       // 13405
 *                                                                                                                     // 13406
 * @param {Number|Array.Number} pos positional state                                                                   // 13407
 * @param {Number|Array} vel velocity                                                                                  // 13408
 */                                                                                                                    // 13409
SpringTransition.prototype.reset = function reset(pos, vel) {                                                          // 13410
    this._dimensions = (pos instanceof Array)                                                                          // 13411
        ? pos.length                                                                                                   // 13412
        : 0;                                                                                                           // 13413
                                                                                                                       // 13414
    this.initState.set(pos);                                                                                           // 13415
    _setParticlePosition.call(this, pos);                                                                              // 13416
    _setTarget.call(this, pos);                                                                                        // 13417
    if (vel) _setParticleVelocity.call(this, vel);                                                                     // 13418
    _setCallback.call(this, undefined);                                                                                // 13419
};                                                                                                                     // 13420
                                                                                                                       // 13421
/**                                                                                                                    // 13422
 * Getter for velocity                                                                                                 // 13423
 *                                                                                                                     // 13424
 * @method getVelocity                                                                                                 // 13425
 *                                                                                                                     // 13426
 * @return {Number|Array} velocity                                                                                     // 13427
 */                                                                                                                    // 13428
SpringTransition.prototype.getVelocity = function getVelocity() {                                                      // 13429
    return _getParticleVelocity.call(this);                                                                            // 13430
};                                                                                                                     // 13431
                                                                                                                       // 13432
/**                                                                                                                    // 13433
 * Setter for velocity                                                                                                 // 13434
 *                                                                                                                     // 13435
 * @method setVelocity                                                                                                 // 13436
 *                                                                                                                     // 13437
 * @return {Number|Array} velocity                                                                                     // 13438
 */                                                                                                                    // 13439
SpringTransition.prototype.setVelocity = function setVelocity(v) {                                                     // 13440
    this.call(this, _setParticleVelocity(v));                                                                          // 13441
};                                                                                                                     // 13442
                                                                                                                       // 13443
/**                                                                                                                    // 13444
 * Detects whether a transition is in progress                                                                         // 13445
 *                                                                                                                     // 13446
 * @method isActive                                                                                                    // 13447
 *                                                                                                                     // 13448
 * @return {Boolean}                                                                                                   // 13449
 */                                                                                                                    // 13450
SpringTransition.prototype.isActive = function isActive() {                                                            // 13451
    return !this.PE.isSleeping();                                                                                      // 13452
};                                                                                                                     // 13453
                                                                                                                       // 13454
/**                                                                                                                    // 13455
 * Halt the transition                                                                                                 // 13456
 *                                                                                                                     // 13457
 * @method halt                                                                                                        // 13458
 */                                                                                                                    // 13459
SpringTransition.prototype.halt = function halt() {                                                                    // 13460
    this.set(this.get());                                                                                              // 13461
};                                                                                                                     // 13462
                                                                                                                       // 13463
/**                                                                                                                    // 13464
 * Get the current position of the transition                                                                          // 13465
 *                                                                                                                     // 13466
 * @method get                                                                                                         // 13467
 *                                                                                                                     // 13468
 * @return {Number|Array} state                                                                                        // 13469
 */                                                                                                                    // 13470
SpringTransition.prototype.get = function get() {                                                                      // 13471
    _update.call(this);                                                                                                // 13472
    return _getParticlePosition.call(this);                                                                            // 13473
};                                                                                                                     // 13474
                                                                                                                       // 13475
/**                                                                                                                    // 13476
 * Set the end position and transition, with optional callback on completion.                                          // 13477
 *                                                                                                                     // 13478
 * @method set                                                                                                         // 13479
 *                                                                                                                     // 13480
 * @param  {Number|Array} endState Final state                                                                         // 13481
 * @param {Object}  definition  Transition definition                                                                  // 13482
 * @param  {Function} callback Callback                                                                                // 13483
 */                                                                                                                    // 13484
SpringTransition.prototype.set = function set(endState, definition, callback) {                                        // 13485
    if (!definition) {                                                                                                 // 13486
        this.reset(endState);                                                                                          // 13487
        if (callback) callback();                                                                                      // 13488
        return;                                                                                                        // 13489
    }                                                                                                                  // 13490
                                                                                                                       // 13491
    this._dimensions = (endState instanceof Array)                                                                     // 13492
        ? endState.length                                                                                              // 13493
        : 0;                                                                                                           // 13494
                                                                                                                       // 13495
    _wake.call(this);                                                                                                  // 13496
    _setupDefinition.call(this, definition);                                                                           // 13497
    _setTarget.call(this, endState);                                                                                   // 13498
    _setCallback.call(this, callback);                                                                                 // 13499
};                                                                                                                     // 13500
                                                                                                                       // 13501
module.exports = SpringTransition;                                                                                     // 13502
},{"../math/Vector":41,"../physics/PhysicsEngine":48,"../physics/bodies/Particle":51,"../physics/forces/Spring":68}],88:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13504
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13505
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13506
 *                                                                                                                     // 13507
 * Owner: david@famo.us                                                                                                // 13508
 * @license MPL 2.0                                                                                                    // 13509
 * @copyright Famous Industries, Inc. 2014                                                                             // 13510
 */                                                                                                                    // 13511
                                                                                                                       // 13512
var MultipleTransition = require('./MultipleTransition');                                                              // 13513
var TweenTransition = require('./TweenTransition');                                                                    // 13514
                                                                                                                       // 13515
/**                                                                                                                    // 13516
 * A state maintainer for a smooth transition between                                                                  // 13517
 *    numerically-specified states. Example numeric states include floats or                                           // 13518
 *    Transform objects.                                                                                               // 13519
 *                                                                                                                     // 13520
 * An initial state is set with the constructor or set(startState). A                                                  // 13521
 *    corresponding end state and transition are set with set(endState,                                                // 13522
 *    transition). Subsequent calls to set(endState, transition) begin at                                              // 13523
 *    the last state. Calls to get(timestamp) provide the interpolated state                                           // 13524
 *    along the way.                                                                                                   // 13525
 *                                                                                                                     // 13526
 * Note that there is no event loop here - calls to get() are the only way                                             // 13527
 *    to find state projected to the current (or provided) time and are                                                // 13528
 *    the only way to trigger callbacks. Usually this kind of object would                                             // 13529
 *    be part of the render() path of a visible component.                                                             // 13530
 *                                                                                                                     // 13531
 * @class Transitionable                                                                                               // 13532
 * @constructor                                                                                                        // 13533
 * @param {number|Array.Number|Object.<number|string, number>} start                                                   // 13534
 *    beginning state                                                                                                  // 13535
 */                                                                                                                    // 13536
function Transitionable(start) {                                                                                       // 13537
    this.currentAction = null;                                                                                         // 13538
    this.actionQueue = [];                                                                                             // 13539
    this.callbackQueue = [];                                                                                           // 13540
                                                                                                                       // 13541
    this.state = 0;                                                                                                    // 13542
    this.velocity = undefined;                                                                                         // 13543
    this._callback = undefined;                                                                                        // 13544
    this._engineInstance = null;                                                                                       // 13545
    this._currentMethod = null;                                                                                        // 13546
                                                                                                                       // 13547
    this.set(start);                                                                                                   // 13548
}                                                                                                                      // 13549
                                                                                                                       // 13550
var transitionMethods = {};                                                                                            // 13551
                                                                                                                       // 13552
Transitionable.register = function register(methods) {                                                                 // 13553
    var success = true;                                                                                                // 13554
    for (var method in methods) {                                                                                      // 13555
        if (!Transitionable.registerMethod(method, methods[method]))                                                   // 13556
            success = false;                                                                                           // 13557
    }                                                                                                                  // 13558
    return success;                                                                                                    // 13559
};                                                                                                                     // 13560
                                                                                                                       // 13561
Transitionable.registerMethod = function registerMethod(name, engineClass) {                                           // 13562
    if (!(name in transitionMethods)) {                                                                                // 13563
        transitionMethods[name] = engineClass;                                                                         // 13564
        return true;                                                                                                   // 13565
    }                                                                                                                  // 13566
    else return false;                                                                                                 // 13567
};                                                                                                                     // 13568
                                                                                                                       // 13569
Transitionable.unregisterMethod = function unregisterMethod(name) {                                                    // 13570
    if (name in transitionMethods) {                                                                                   // 13571
        delete transitionMethods[name];                                                                                // 13572
        return true;                                                                                                   // 13573
    }                                                                                                                  // 13574
    else return false;                                                                                                 // 13575
};                                                                                                                     // 13576
                                                                                                                       // 13577
function _loadNext() {                                                                                                 // 13578
    if (this._callback) {                                                                                              // 13579
        var callback = this._callback;                                                                                 // 13580
        this._callback = undefined;                                                                                    // 13581
        callback();                                                                                                    // 13582
    }                                                                                                                  // 13583
    if (this.actionQueue.length <= 0) {                                                                                // 13584
        this.set(this.get()); // no update required                                                                    // 13585
        return;                                                                                                        // 13586
    }                                                                                                                  // 13587
    this.currentAction = this.actionQueue.shift();                                                                     // 13588
    this._callback = this.callbackQueue.shift();                                                                       // 13589
                                                                                                                       // 13590
    var method = null;                                                                                                 // 13591
    var endValue = this.currentAction[0];                                                                              // 13592
    var transition = this.currentAction[1];                                                                            // 13593
    if (transition instanceof Object && transition.method) {                                                           // 13594
        method = transition.method;                                                                                    // 13595
        if (typeof method === 'string') method = transitionMethods[method];                                            // 13596
    }                                                                                                                  // 13597
    else {                                                                                                             // 13598
        method = TweenTransition;                                                                                      // 13599
    }                                                                                                                  // 13600
                                                                                                                       // 13601
    if (this._currentMethod !== method) {                                                                              // 13602
        if (!(endValue instanceof Object) || method.SUPPORTS_MULTIPLE === true || endValue.length <= method.SUPPORTS_MULTIPLE) {
            this._engineInstance = new method();                                                                       // 13604
        }                                                                                                              // 13605
        else {                                                                                                         // 13606
            this._engineInstance = new MultipleTransition(method);                                                     // 13607
        }                                                                                                              // 13608
        this._currentMethod = method;                                                                                  // 13609
    }                                                                                                                  // 13610
                                                                                                                       // 13611
    this._engineInstance.reset(this.state, this.velocity);                                                             // 13612
    if (this.velocity !== undefined) transition.velocity = this.velocity;                                              // 13613
    this._engineInstance.set(endValue, transition, _loadNext.bind(this));                                              // 13614
}                                                                                                                      // 13615
                                                                                                                       // 13616
/**                                                                                                                    // 13617
 * Add transition to end state to the queue of pending transitions. Special                                            // 13618
 *    Use: calling without a transition resets the object to that state with                                           // 13619
 *    no pending actions                                                                                               // 13620
 *                                                                                                                     // 13621
 * @method set                                                                                                         // 13622
 *                                                                                                                     // 13623
 * @param {number|FamousMatrix|Array.Number|Object.<number, number>} endState                                          // 13624
 *    end state to which we interpolate                                                                                // 13625
 * @param {transition=} transition object of type {duration: number, curve:                                            // 13626
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 13627
 *    instantaneous.                                                                                                   // 13628
 * @param {function()=} callback Zero-argument function to call on observed                                            // 13629
 *    completion (t=1)                                                                                                 // 13630
 */                                                                                                                    // 13631
Transitionable.prototype.set = function set(endState, transition, callback) {                                          // 13632
    if (!transition) {                                                                                                 // 13633
        this.reset(endState);                                                                                          // 13634
        if (callback) callback();                                                                                      // 13635
        return this;                                                                                                   // 13636
    }                                                                                                                  // 13637
                                                                                                                       // 13638
    var action = [endState, transition];                                                                               // 13639
    this.actionQueue.push(action);                                                                                     // 13640
    this.callbackQueue.push(callback);                                                                                 // 13641
    if (!this.currentAction) _loadNext.call(this);                                                                     // 13642
    return this;                                                                                                       // 13643
};                                                                                                                     // 13644
                                                                                                                       // 13645
/**                                                                                                                    // 13646
 * Cancel all transitions and reset to a stable state                                                                  // 13647
 *                                                                                                                     // 13648
 * @method reset                                                                                                       // 13649
 *                                                                                                                     // 13650
 * @param {number|Array.Number|Object.<number, number>} startState                                                     // 13651
 *    stable state to set to                                                                                           // 13652
 */                                                                                                                    // 13653
Transitionable.prototype.reset = function reset(startState, startVelocity) {                                           // 13654
    this._currentMethod = null;                                                                                        // 13655
    this._engineInstance = null;                                                                                       // 13656
    this._callback = undefined;                                                                                        // 13657
    this.state = startState;                                                                                           // 13658
    this.velocity = startVelocity;                                                                                     // 13659
    this.currentAction = null;                                                                                         // 13660
    this.actionQueue = [];                                                                                             // 13661
    this.callbackQueue = [];                                                                                           // 13662
};                                                                                                                     // 13663
                                                                                                                       // 13664
/**                                                                                                                    // 13665
 * Add delay action to the pending action queue queue.                                                                 // 13666
 *                                                                                                                     // 13667
 * @method delay                                                                                                       // 13668
 *                                                                                                                     // 13669
 * @param {number} duration delay time (ms)                                                                            // 13670
 * @param {function} callback Zero-argument function to call on observed                                               // 13671
 *    completion (t=1)                                                                                                 // 13672
 */                                                                                                                    // 13673
Transitionable.prototype.delay = function delay(duration, callback) {                                                  // 13674
    this.set(this.get(), {duration: duration,                                                                          // 13675
        curve: function() {                                                                                            // 13676
            return 0;                                                                                                  // 13677
        }},                                                                                                            // 13678
        callback                                                                                                       // 13679
    );                                                                                                                 // 13680
};                                                                                                                     // 13681
                                                                                                                       // 13682
/**                                                                                                                    // 13683
 * Get interpolated state of current action at provided time. If the last                                              // 13684
 *    action has completed, invoke its callback.                                                                       // 13685
 *                                                                                                                     // 13686
 * @method get                                                                                                         // 13687
 *                                                                                                                     // 13688
 * @param {number=} timestamp Evaluate the curve at a normalized version of this                                       // 13689
 *    time. If omitted, use current time. (Unix epoch time)                                                            // 13690
 * @return {number|Object.<number|string, number>} beginning state                                                     // 13691
 *    interpolated to this point in time.                                                                              // 13692
 */                                                                                                                    // 13693
Transitionable.prototype.get = function get(timestamp) {                                                               // 13694
    if (this._engineInstance) {                                                                                        // 13695
        if (this._engineInstance.getVelocity)                                                                          // 13696
            this.velocity = this._engineInstance.getVelocity();                                                        // 13697
        this.state = this._engineInstance.get(timestamp);                                                              // 13698
    }                                                                                                                  // 13699
    return this.state;                                                                                                 // 13700
};                                                                                                                     // 13701
                                                                                                                       // 13702
/**                                                                                                                    // 13703
 * Is there at least one action pending completion?                                                                    // 13704
 *                                                                                                                     // 13705
 * @method isActive                                                                                                    // 13706
 *                                                                                                                     // 13707
 * @return {boolean}                                                                                                   // 13708
 */                                                                                                                    // 13709
Transitionable.prototype.isActive = function isActive() {                                                              // 13710
    return !!this.currentAction;                                                                                       // 13711
};                                                                                                                     // 13712
                                                                                                                       // 13713
/**                                                                                                                    // 13714
 * Halt transition at current state and erase all pending actions.                                                     // 13715
 *                                                                                                                     // 13716
 * @method halt                                                                                                        // 13717
 */                                                                                                                    // 13718
Transitionable.prototype.halt = function halt() {                                                                      // 13719
    return this.set(this.get());                                                                                       // 13720
};                                                                                                                     // 13721
                                                                                                                       // 13722
module.exports = Transitionable;                                                                                       // 13723
},{"./MultipleTransition":85,"./TweenTransition":90}],89:[function(require,module,exports){                            // 13724
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13725
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13726
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13727
 *                                                                                                                     // 13728
 * Owner: david@famo.us                                                                                                // 13729
 * @license MPL 2.0                                                                                                    // 13730
 * @copyright Famous Industries, Inc. 2014                                                                             // 13731
 */                                                                                                                    // 13732
                                                                                                                       // 13733
var Transitionable = require('./Transitionable');                                                                      // 13734
var Transform = require('../core/Transform');                                                                          // 13735
var Utility = require('../utilities/Utility');                                                                         // 13736
                                                                                                                       // 13737
/**                                                                                                                    // 13738
 * A class for transitioning the state of a Transform by transitioning                                                 // 13739
 * its translate, scale, skew and rotate components independently.                                                     // 13740
 *                                                                                                                     // 13741
 * @class TransitionableTransform                                                                                      // 13742
 * @constructor                                                                                                        // 13743
 *                                                                                                                     // 13744
 * @param [transform=Transform.identity] {Transform} The initial transform state                                       // 13745
 */                                                                                                                    // 13746
function TransitionableTransform(transform) {                                                                          // 13747
    this._final = Transform.identity.slice();                                                                          // 13748
                                                                                                                       // 13749
    this._finalTranslate = [0, 0, 0];                                                                                  // 13750
    this._finalRotate = [0, 0, 0];                                                                                     // 13751
    this._finalSkew = [0, 0, 0];                                                                                       // 13752
    this._finalScale = [1, 1, 1];                                                                                      // 13753
                                                                                                                       // 13754
    this.translate = new Transitionable(this._finalTranslate);                                                         // 13755
    this.rotate = new Transitionable(this._finalRotate);                                                               // 13756
    this.skew = new Transitionable(this._finalSkew);                                                                   // 13757
    this.scale = new Transitionable(this._finalScale);                                                                 // 13758
                                                                                                                       // 13759
    if (transform) this.set(transform);                                                                                // 13760
}                                                                                                                      // 13761
                                                                                                                       // 13762
function _build() {                                                                                                    // 13763
    return Transform.build({                                                                                           // 13764
        translate: this.translate.get(),                                                                               // 13765
        rotate: this.rotate.get(),                                                                                     // 13766
        skew: this.skew.get(),                                                                                         // 13767
        scale: this.scale.get()                                                                                        // 13768
    });                                                                                                                // 13769
}                                                                                                                      // 13770
                                                                                                                       // 13771
function _buildFinal() {                                                                                               // 13772
    return Transform.build({                                                                                           // 13773
        translate: this._finalTranslate,                                                                               // 13774
        rotate: this._finalRotate,                                                                                     // 13775
        skew: this._finalSkew,                                                                                         // 13776
        scale: this._finalScale                                                                                        // 13777
    });                                                                                                                // 13778
}                                                                                                                      // 13779
                                                                                                                       // 13780
/**                                                                                                                    // 13781
 * An optimized way of setting only the translation component of a Transform                                           // 13782
 *                                                                                                                     // 13783
 * @method setTranslate                                                                                                // 13784
 * @chainable                                                                                                          // 13785
 *                                                                                                                     // 13786
 * @param translate {Array}     New translation state                                                                  // 13787
 * @param [transition] {Object} Transition definition                                                                  // 13788
 * @param [callback] {Function} Callback                                                                               // 13789
 * @return {TransitionableTransform}                                                                                   // 13790
 */                                                                                                                    // 13791
TransitionableTransform.prototype.setTranslate = function setTranslate(translate, transition, callback) {              // 13792
    this._finalTranslate = translate;                                                                                  // 13793
    this._final = _buildFinal.call(this);                                                                              // 13794
    this.translate.set(translate, transition, callback);                                                               // 13795
    return this;                                                                                                       // 13796
};                                                                                                                     // 13797
                                                                                                                       // 13798
/**                                                                                                                    // 13799
 * An optimized way of setting only the scale component of a Transform                                                 // 13800
 *                                                                                                                     // 13801
 * @method setScale                                                                                                    // 13802
 * @chainable                                                                                                          // 13803
 *                                                                                                                     // 13804
 * @param scale {Array}         New scale state                                                                        // 13805
 * @param [transition] {Object} Transition definition                                                                  // 13806
 * @param [callback] {Function} Callback                                                                               // 13807
 * @return {TransitionableTransform}                                                                                   // 13808
 */                                                                                                                    // 13809
TransitionableTransform.prototype.setScale = function setScale(scale, transition, callback) {                          // 13810
    this._finalScale = scale;                                                                                          // 13811
    this._final = _buildFinal.call(this);                                                                              // 13812
    this.scale.set(scale, transition, callback);                                                                       // 13813
    return this;                                                                                                       // 13814
};                                                                                                                     // 13815
                                                                                                                       // 13816
/**                                                                                                                    // 13817
 * An optimized way of setting only the rotational component of a Transform                                            // 13818
 *                                                                                                                     // 13819
 * @method setRotate                                                                                                   // 13820
 * @chainable                                                                                                          // 13821
 *                                                                                                                     // 13822
 * @param eulerAngles {Array}   Euler angles for new rotation state                                                    // 13823
 * @param [transition] {Object} Transition definition                                                                  // 13824
 * @param [callback] {Function} Callback                                                                               // 13825
 * @return {TransitionableTransform}                                                                                   // 13826
 */                                                                                                                    // 13827
TransitionableTransform.prototype.setRotate = function setRotate(eulerAngles, transition, callback) {                  // 13828
    this._finalRotate = eulerAngles;                                                                                   // 13829
    this._final = _buildFinal.call(this);                                                                              // 13830
    this.rotate.set(eulerAngles, transition, callback);                                                                // 13831
    return this;                                                                                                       // 13832
};                                                                                                                     // 13833
                                                                                                                       // 13834
/**                                                                                                                    // 13835
 * An optimized way of setting only the skew component of a Transform                                                  // 13836
 *                                                                                                                     // 13837
 * @method setSkew                                                                                                     // 13838
 * @chainable                                                                                                          // 13839
 *                                                                                                                     // 13840
 * @param skewAngles {Array}    New skew state                                                                         // 13841
 * @param [transition] {Object} Transition definition                                                                  // 13842
 * @param [callback] {Function} Callback                                                                               // 13843
 * @return {TransitionableTransform}                                                                                   // 13844
 */                                                                                                                    // 13845
TransitionableTransform.prototype.setSkew = function setSkew(skewAngles, transition, callback) {                       // 13846
    this._finalSkew = skewAngles;                                                                                      // 13847
    this._final = _buildFinal.call(this);                                                                              // 13848
    this.skew.set(skewAngles, transition, callback);                                                                   // 13849
    return this;                                                                                                       // 13850
};                                                                                                                     // 13851
                                                                                                                       // 13852
/**                                                                                                                    // 13853
 * Setter for a TransitionableTransform with optional parameters to transition                                         // 13854
 * between Transforms                                                                                                  // 13855
 *                                                                                                                     // 13856
 * @method set                                                                                                         // 13857
 * @chainable                                                                                                          // 13858
 *                                                                                                                     // 13859
 * @param transform {Array}     New transform state                                                                    // 13860
 * @param [transition] {Object} Transition definition                                                                  // 13861
 * @param [callback] {Function} Callback                                                                               // 13862
 * @return {TransitionableTransform}                                                                                   // 13863
 */                                                                                                                    // 13864
TransitionableTransform.prototype.set = function set(transform, transition, callback) {                                // 13865
    var components = Transform.interpret(transform);                                                                   // 13866
                                                                                                                       // 13867
    this._finalTranslate = components.translate;                                                                       // 13868
    this._finalRotate = components.rotate;                                                                             // 13869
    this._finalSkew = components.skew;                                                                                 // 13870
    this._finalScale = components.scale;                                                                               // 13871
    this._final = transform;                                                                                           // 13872
                                                                                                                       // 13873
    var _callback = callback ? Utility.after(4, callback) : null;                                                      // 13874
    this.translate.set(components.translate, transition, _callback);                                                   // 13875
    this.rotate.set(components.rotate, transition, _callback);                                                         // 13876
    this.skew.set(components.skew, transition, _callback);                                                             // 13877
    this.scale.set(components.scale, transition, _callback);                                                           // 13878
    return this;                                                                                                       // 13879
};                                                                                                                     // 13880
                                                                                                                       // 13881
/**                                                                                                                    // 13882
 * Sets the default transition to use for transitioning betwen Transform states                                        // 13883
 *                                                                                                                     // 13884
 * @method setDefaultTransition                                                                                        // 13885
 *                                                                                                                     // 13886
 * @param transition {Object} Transition definition                                                                    // 13887
 */                                                                                                                    // 13888
TransitionableTransform.prototype.setDefaultTransition = function setDefaultTransition(transition) {                   // 13889
    this.translate.setDefault(transition);                                                                             // 13890
    this.rotate.setDefault(transition);                                                                                // 13891
    this.skew.setDefault(transition);                                                                                  // 13892
    this.scale.setDefault(transition);                                                                                 // 13893
};                                                                                                                     // 13894
                                                                                                                       // 13895
/**                                                                                                                    // 13896
 * Getter. Returns the current state of the Transform                                                                  // 13897
 *                                                                                                                     // 13898
 * @method get                                                                                                         // 13899
 *                                                                                                                     // 13900
 * @return {Transform}                                                                                                 // 13901
 */                                                                                                                    // 13902
TransitionableTransform.prototype.get = function get() {                                                               // 13903
    if (this.isActive()) {                                                                                             // 13904
        return _build.call(this);                                                                                      // 13905
    }                                                                                                                  // 13906
    else return this._final;                                                                                           // 13907
};                                                                                                                     // 13908
                                                                                                                       // 13909
/**                                                                                                                    // 13910
 * Get the destination state of the Transform                                                                          // 13911
 *                                                                                                                     // 13912
 * @method getFinal                                                                                                    // 13913
 *                                                                                                                     // 13914
 * @return Transform {Transform}                                                                                       // 13915
 */                                                                                                                    // 13916
TransitionableTransform.prototype.getFinal = function getFinal() {                                                     // 13917
    return this._final;                                                                                                // 13918
};                                                                                                                     // 13919
                                                                                                                       // 13920
/**                                                                                                                    // 13921
 * Determine if the TransitionalTransform is currently transitioning                                                   // 13922
 *                                                                                                                     // 13923
 * @method isActive                                                                                                    // 13924
 *                                                                                                                     // 13925
 * @return {Boolean}                                                                                                   // 13926
 */                                                                                                                    // 13927
TransitionableTransform.prototype.isActive = function isActive() {                                                     // 13928
    return this.translate.isActive() || this.rotate.isActive() || this.scale.isActive() || this.skew.isActive();       // 13929
};                                                                                                                     // 13930
                                                                                                                       // 13931
/**                                                                                                                    // 13932
 * Halts the transition                                                                                                // 13933
 *                                                                                                                     // 13934
 * @method halt                                                                                                        // 13935
 */                                                                                                                    // 13936
TransitionableTransform.prototype.halt = function halt() {                                                             // 13937
    this.translate.halt();                                                                                             // 13938
    this.rotate.halt();                                                                                                // 13939
    this.skew.halt();                                                                                                  // 13940
    this.scale.halt();                                                                                                 // 13941
                                                                                                                       // 13942
    this._final = this.get();                                                                                          // 13943
    this._finalTranslate = this.translate.get();                                                                       // 13944
    this._finalRotate = this.rotate.get();                                                                             // 13945
    this._finalSkew = this.skew.get();                                                                                 // 13946
    this._finalScale = this.scale.get();                                                                               // 13947
                                                                                                                       // 13948
    return this;                                                                                                       // 13949
};                                                                                                                     // 13950
                                                                                                                       // 13951
module.exports = TransitionableTransform;                                                                              // 13952
},{"../core/Transform":15,"../utilities/Utility":95,"./Transitionable":88}],90:[function(require,module,exports){      // 13953
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13954
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13955
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13956
 *                                                                                                                     // 13957
 * Owner: david@famo.us                                                                                                // 13958
 * @license MPL 2.0                                                                                                    // 13959
 * @copyright Famous Industries, Inc. 2014                                                                             // 13960
 */                                                                                                                    // 13961
                                                                                                                       // 13962
                                                                                                                       // 13963
                                                                                                                       // 13964
                                                                                                                       // 13965
/**                                                                                                                    // 13966
 *                                                                                                                     // 13967
 * A state maintainer for a smooth transition between                                                                  // 13968
 *    numerically-specified states.  Example numeric states include floats or                                          // 13969
 *    Transfornm objects.                                                                                              // 13970
 *                                                                                                                     // 13971
 *    An initial state is set with the constructor or set(startValue). A                                               // 13972
 *    corresponding end state and transition are set with set(endValue,                                                // 13973
 *    transition). Subsequent calls to set(endValue, transition) begin at                                              // 13974
 *    the last state. Calls to get(timestamp) provide the _interpolated state                                          // 13975
 *    along the way.                                                                                                   // 13976
 *                                                                                                                     // 13977
 *   Note that there is no event loop here - calls to get() are the only way                                           // 13978
 *    to find out state projected to the current (or provided) time and are                                            // 13979
 *    the only way to trigger callbacks. Usually this kind of object would                                             // 13980
 *    be part of the render() path of a visible component.                                                             // 13981
 *                                                                                                                     // 13982
 * @class TweenTransition                                                                                              // 13983
 * @constructor                                                                                                        // 13984
 *                                                                                                                     // 13985
 * @param {Object} options TODO                                                                                        // 13986
 *    beginning state                                                                                                  // 13987
 */                                                                                                                    // 13988
function TweenTransition(options) {                                                                                    // 13989
    this.options = Object.create(TweenTransition.DEFAULT_OPTIONS);                                                     // 13990
    if (options) this.setOptions(options);                                                                             // 13991
                                                                                                                       // 13992
    this._startTime = 0;                                                                                               // 13993
    this._startValue = 0;                                                                                              // 13994
    this._updateTime = 0;                                                                                              // 13995
    this._endValue = 0;                                                                                                // 13996
    this._curve = undefined;                                                                                           // 13997
    this._duration = 0;                                                                                                // 13998
    this._active = false;                                                                                              // 13999
    this._callback = undefined;                                                                                        // 14000
    this.state = 0;                                                                                                    // 14001
    this.velocity = undefined;                                                                                         // 14002
}                                                                                                                      // 14003
                                                                                                                       // 14004
/**                                                                                                                    // 14005
 * Transition curves mapping independent variable t from domain [0,1] to a                                             // 14006
 *    range within [0,1]. Includes functions 'linear', 'easeIn', 'easeOut',                                            // 14007
 *    'easeInOut', 'easeOutBounce', 'spring'.                                                                          // 14008
 *                                                                                                                     // 14009
 * @property {object} Curve                                                                                            // 14010
 * @final                                                                                                              // 14011
 */                                                                                                                    // 14012
TweenTransition.Curves = {                                                                                             // 14013
    linear: function(t) {                                                                                              // 14014
        return t;                                                                                                      // 14015
    },                                                                                                                 // 14016
    easeIn: function(t) {                                                                                              // 14017
        return t*t;                                                                                                    // 14018
    },                                                                                                                 // 14019
    easeOut: function(t) {                                                                                             // 14020
        return t*(2-t);                                                                                                // 14021
    },                                                                                                                 // 14022
    easeInOut: function(t) {                                                                                           // 14023
        if (t <= 0.5) return 2*t*t;                                                                                    // 14024
        else return -2*t*t + 4*t - 1;                                                                                  // 14025
    },                                                                                                                 // 14026
    easeOutBounce: function(t) {                                                                                       // 14027
        return t*(3 - 2*t);                                                                                            // 14028
    },                                                                                                                 // 14029
    spring: function(t) {                                                                                              // 14030
        return (1 - t) * Math.sin(6 * Math.PI * t) + t;                                                                // 14031
    }                                                                                                                  // 14032
};                                                                                                                     // 14033
                                                                                                                       // 14034
TweenTransition.SUPPORTS_MULTIPLE = true;                                                                              // 14035
TweenTransition.DEFAULT_OPTIONS = {                                                                                    // 14036
    curve: TweenTransition.Curves.linear,                                                                              // 14037
    duration: 500,                                                                                                     // 14038
    speed: 0 /* considered only if positive */                                                                         // 14039
};                                                                                                                     // 14040
                                                                                                                       // 14041
var registeredCurves = {};                                                                                             // 14042
                                                                                                                       // 14043
/**                                                                                                                    // 14044
 * Add "unit" curve to internal dictionary of registered curves.                                                       // 14045
 *                                                                                                                     // 14046
 * @method registerCurve                                                                                               // 14047
 *                                                                                                                     // 14048
 * @static                                                                                                             // 14049
 *                                                                                                                     // 14050
 * @param {string} curveName dictionary key                                                                            // 14051
 * @param {unitCurve} curve function of one numeric variable mapping [0,1]                                             // 14052
 *    to range inside [0,1]                                                                                            // 14053
 * @return {boolean} false if key is taken, else true                                                                  // 14054
 */                                                                                                                    // 14055
TweenTransition.registerCurve = function registerCurve(curveName, curve) {                                             // 14056
    if (!registeredCurves[curveName]) {                                                                                // 14057
        registeredCurves[curveName] = curve;                                                                           // 14058
        return true;                                                                                                   // 14059
    }                                                                                                                  // 14060
    else {                                                                                                             // 14061
        return false;                                                                                                  // 14062
    }                                                                                                                  // 14063
};                                                                                                                     // 14064
                                                                                                                       // 14065
/**                                                                                                                    // 14066
 * Remove object with key "curveName" from internal dictionary of registered                                           // 14067
 *    curves.                                                                                                          // 14068
 *                                                                                                                     // 14069
 * @method unregisterCurve                                                                                             // 14070
 *                                                                                                                     // 14071
 * @static                                                                                                             // 14072
 *                                                                                                                     // 14073
 * @param {string} curveName dictionary key                                                                            // 14074
 * @return {boolean} false if key has no dictionary value                                                              // 14075
 */                                                                                                                    // 14076
TweenTransition.unregisterCurve = function unregisterCurve(curveName) {                                                // 14077
    if (registeredCurves[curveName]) {                                                                                 // 14078
        delete registeredCurves[curveName];                                                                            // 14079
        return true;                                                                                                   // 14080
    }                                                                                                                  // 14081
    else {                                                                                                             // 14082
        return false;                                                                                                  // 14083
    }                                                                                                                  // 14084
};                                                                                                                     // 14085
                                                                                                                       // 14086
/**                                                                                                                    // 14087
 * Retrieve function with key "curveName" from internal dictionary of                                                  // 14088
 *    registered curves. Default curves are defined in the                                                             // 14089
 *    TweenTransition.Curves array, where the values represent                                                         // 14090
 *    unitCurve functions.                                                                                             // 14091
 *                                                                                                                     // 14092
 * @method getCurve                                                                                                    // 14093
 *                                                                                                                     // 14094
 * @static                                                                                                             // 14095
 *                                                                                                                     // 14096
 * @param {string} curveName dictionary key                                                                            // 14097
 * @return {unitCurve} curve function of one numeric variable mapping [0,1]                                            // 14098
 *    to range inside [0,1]                                                                                            // 14099
 */                                                                                                                    // 14100
TweenTransition.getCurve = function getCurve(curveName) {                                                              // 14101
    var curve = registeredCurves[curveName];                                                                           // 14102
    if (curve !== undefined) return curve;                                                                             // 14103
    else throw new Error('curve not registered');                                                                      // 14104
};                                                                                                                     // 14105
                                                                                                                       // 14106
/**                                                                                                                    // 14107
 * Retrieve all available curves.                                                                                      // 14108
 *                                                                                                                     // 14109
 * @method getCurves                                                                                                   // 14110
 *                                                                                                                     // 14111
 * @static                                                                                                             // 14112
 *                                                                                                                     // 14113
 * @return {object} curve functions of one numeric variable mapping [0,1]                                              // 14114
 *    to range inside [0,1]                                                                                            // 14115
 */                                                                                                                    // 14116
TweenTransition.getCurves = function getCurves() {                                                                     // 14117
    return registeredCurves;                                                                                           // 14118
};                                                                                                                     // 14119
                                                                                                                       // 14120
 // Interpolate: If a linear function f(0) = a, f(1) = b, then return f(t)                                             // 14121
function _interpolate(a, b, t) {                                                                                       // 14122
    return ((1 - t) * a) + (t * b);                                                                                    // 14123
}                                                                                                                      // 14124
                                                                                                                       // 14125
function _clone(obj) {                                                                                                 // 14126
    if (obj instanceof Object) {                                                                                       // 14127
        if (obj instanceof Array) return obj.slice(0);                                                                 // 14128
        else return Object.create(obj);                                                                                // 14129
    }                                                                                                                  // 14130
    else return obj;                                                                                                   // 14131
}                                                                                                                      // 14132
                                                                                                                       // 14133
// Fill in missing properties in "transition" with those in defaultTransition, and                                     // 14134
//   convert internal named curve to function object, returning as new                                                 // 14135
//   object.                                                                                                           // 14136
function _normalize(transition, defaultTransition) {                                                                   // 14137
    var result = {curve: defaultTransition.curve};                                                                     // 14138
    if (defaultTransition.duration) result.duration = defaultTransition.duration;                                      // 14139
    if (defaultTransition.speed) result.speed = defaultTransition.speed;                                               // 14140
    if (transition instanceof Object) {                                                                                // 14141
        if (transition.duration !== undefined) result.duration = transition.duration;                                  // 14142
        if (transition.curve) result.curve = transition.curve;                                                         // 14143
        if (transition.speed) result.speed = transition.speed;                                                         // 14144
    }                                                                                                                  // 14145
    if (typeof result.curve === 'string') result.curve = TweenTransition.getCurve(result.curve);                       // 14146
    return result;                                                                                                     // 14147
}                                                                                                                      // 14148
                                                                                                                       // 14149
/**                                                                                                                    // 14150
 * Set internal options, overriding any default options.                                                               // 14151
 *                                                                                                                     // 14152
 * @method setOptions                                                                                                  // 14153
 *                                                                                                                     // 14154
 *                                                                                                                     // 14155
 * @param {Object} options options object                                                                              // 14156
 * @param {Object} [options.curve] function mapping [0,1] to [0,1] or identifier                                       // 14157
 * @param {Number} [options.duration] duration in ms                                                                   // 14158
 * @param {Number} [options.speed] speed in pixels per ms                                                              // 14159
 */                                                                                                                    // 14160
TweenTransition.prototype.setOptions = function setOptions(options) {                                                  // 14161
    if (options.curve !== undefined) this.options.curve = options.curve;                                               // 14162
    if (options.duration !== undefined) this.options.duration = options.duration;                                      // 14163
    if (options.speed !== undefined) this.options.speed = options.speed;                                               // 14164
};                                                                                                                     // 14165
                                                                                                                       // 14166
/**                                                                                                                    // 14167
 * Add transition to end state to the queue of pending transitions. Special                                            // 14168
 *    Use: calling without a transition resets the object to that state with                                           // 14169
 *    no pending actions                                                                                               // 14170
 *                                                                                                                     // 14171
 * @method set                                                                                                         // 14172
 *                                                                                                                     // 14173
 *                                                                                                                     // 14174
 * @param {number|FamousMatrix|Array.Number|Object.<number, number>} endValue                                          // 14175
 *    end state to which we _interpolate                                                                               // 14176
 * @param {transition=} transition object of type {duration: number, curve:                                            // 14177
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 14178
 *    instantaneous.                                                                                                   // 14179
 * @param {function()=} callback Zero-argument function to call on observed                                            // 14180
 *    completion (t=1)                                                                                                 // 14181
 */                                                                                                                    // 14182
TweenTransition.prototype.set = function set(endValue, transition, callback) {                                         // 14183
    if (!transition) {                                                                                                 // 14184
        this.reset(endValue);                                                                                          // 14185
        if (callback) callback();                                                                                      // 14186
        return;                                                                                                        // 14187
    }                                                                                                                  // 14188
                                                                                                                       // 14189
    this._startValue = _clone(this.get());                                                                             // 14190
    transition = _normalize(transition, this.options);                                                                 // 14191
    if (transition.speed) {                                                                                            // 14192
        var startValue = this._startValue;                                                                             // 14193
        if (startValue instanceof Object) {                                                                            // 14194
            var variance = 0;                                                                                          // 14195
            for (var i in startValue) variance += (endValue[i] - startValue[i]) * (endValue[i] - startValue[i]);       // 14196
            transition.duration = Math.sqrt(variance) / transition.speed;                                              // 14197
        }                                                                                                              // 14198
        else {                                                                                                         // 14199
            transition.duration = Math.abs(endValue - startValue) / transition.speed;                                  // 14200
        }                                                                                                              // 14201
    }                                                                                                                  // 14202
                                                                                                                       // 14203
    this._startTime = Date.now();                                                                                      // 14204
    this._endValue = _clone(endValue);                                                                                 // 14205
    this._startVelocity = _clone(transition.velocity);                                                                 // 14206
    this._duration = transition.duration;                                                                              // 14207
    this._curve = transition.curve;                                                                                    // 14208
    this._active = true;                                                                                               // 14209
    this._callback = callback;                                                                                         // 14210
};                                                                                                                     // 14211
                                                                                                                       // 14212
/**                                                                                                                    // 14213
 * Cancel all transitions and reset to a stable state                                                                  // 14214
 *                                                                                                                     // 14215
 * @method reset                                                                                                       // 14216
 *                                                                                                                     // 14217
 * @param {number|Array.Number|Object.<number, number>} startValue                                                     // 14218
 *    starting state                                                                                                   // 14219
 * @param {number} startVelocity                                                                                       // 14220
 *    starting velocity                                                                                                // 14221
 */                                                                                                                    // 14222
TweenTransition.prototype.reset = function reset(startValue, startVelocity) {                                          // 14223
    if (this._callback) {                                                                                              // 14224
        var callback = this._callback;                                                                                 // 14225
        this._callback = undefined;                                                                                    // 14226
        callback();                                                                                                    // 14227
    }                                                                                                                  // 14228
    this.state = _clone(startValue);                                                                                   // 14229
    this.velocity = _clone(startVelocity);                                                                             // 14230
    this._startTime = 0;                                                                                               // 14231
    this._duration = 0;                                                                                                // 14232
    this._updateTime = 0;                                                                                              // 14233
    this._startValue = this.state;                                                                                     // 14234
    this._startVelocity = this.velocity;                                                                               // 14235
    this._endValue = this.state;                                                                                       // 14236
    this._active = false;                                                                                              // 14237
};                                                                                                                     // 14238
                                                                                                                       // 14239
/**                                                                                                                    // 14240
 * Get current velocity                                                                                                // 14241
 *                                                                                                                     // 14242
 * @method getVelocity                                                                                                 // 14243
 *                                                                                                                     // 14244
 * @returns {Number} velocity                                                                                          // 14245
 */                                                                                                                    // 14246
TweenTransition.prototype.getVelocity = function getVelocity() {                                                       // 14247
    return this.velocity;                                                                                              // 14248
};                                                                                                                     // 14249
                                                                                                                       // 14250
/**                                                                                                                    // 14251
 * Get interpolated state of current action at provided time. If the last                                              // 14252
 *    action has completed, invoke its callback.                                                                       // 14253
 *                                                                                                                     // 14254
 * @method get                                                                                                         // 14255
 *                                                                                                                     // 14256
 *                                                                                                                     // 14257
 * @param {number=} timestamp Evaluate the curve at a normalized version of this                                       // 14258
 *    time. If omitted, use current time. (Unix epoch time)                                                            // 14259
 * @return {number|Object.<number|string, number>} beginning state                                                     // 14260
 *    _interpolated to this point in time.                                                                             // 14261
 */                                                                                                                    // 14262
TweenTransition.prototype.get = function get(timestamp) {                                                              // 14263
    this.update(timestamp);                                                                                            // 14264
    return this.state;                                                                                                 // 14265
};                                                                                                                     // 14266
                                                                                                                       // 14267
function _calculateVelocity(current, start, curve, duration, t) {                                                      // 14268
    var velocity;                                                                                                      // 14269
    var eps = 1e-7;                                                                                                    // 14270
    var speed = (curve(t) - curve(t - eps)) / eps;                                                                     // 14271
    if (current instanceof Array) {                                                                                    // 14272
        velocity = [];                                                                                                 // 14273
        for (var i = 0; i < current.length; i++){                                                                      // 14274
            if (typeof current[i] === 'number')                                                                        // 14275
                velocity[i] = speed * (current[i] - start[i]) / duration;                                              // 14276
            else                                                                                                       // 14277
                velocity[i] = 0;                                                                                       // 14278
        }                                                                                                              // 14279
                                                                                                                       // 14280
    }                                                                                                                  // 14281
    else velocity = speed * (current - start) / duration;                                                              // 14282
    return velocity;                                                                                                   // 14283
}                                                                                                                      // 14284
                                                                                                                       // 14285
function _calculateState(start, end, t) {                                                                              // 14286
    var state;                                                                                                         // 14287
    if (start instanceof Array) {                                                                                      // 14288
        state = [];                                                                                                    // 14289
        for (var i = 0; i < start.length; i++) {                                                                       // 14290
            if (typeof start[i] === 'number')                                                                          // 14291
                state[i] = _interpolate(start[i], end[i], t);                                                          // 14292
            else                                                                                                       // 14293
                state[i] = start[i];                                                                                   // 14294
        }                                                                                                              // 14295
    }                                                                                                                  // 14296
    else state = _interpolate(start, end, t);                                                                          // 14297
    return state;                                                                                                      // 14298
}                                                                                                                      // 14299
                                                                                                                       // 14300
/**                                                                                                                    // 14301
 * Update internal state to the provided timestamp. This may invoke the last                                           // 14302
 *    callback and begin a new action.                                                                                 // 14303
 *                                                                                                                     // 14304
 * @method update                                                                                                      // 14305
 *                                                                                                                     // 14306
 *                                                                                                                     // 14307
 * @param {number=} timestamp Evaluate the curve at a normalized version of this                                       // 14308
 *    time. If omitted, use current time. (Unix epoch time)                                                            // 14309
 */                                                                                                                    // 14310
TweenTransition.prototype.update = function update(timestamp) {                                                        // 14311
    if (!this._active) {                                                                                               // 14312
        if (this._callback) {                                                                                          // 14313
            var callback = this._callback;                                                                             // 14314
            this._callback = undefined;                                                                                // 14315
            callback();                                                                                                // 14316
        }                                                                                                              // 14317
        return;                                                                                                        // 14318
    }                                                                                                                  // 14319
                                                                                                                       // 14320
    if (!timestamp) timestamp = Date.now();                                                                            // 14321
    if (this._updateTime >= timestamp) return;                                                                         // 14322
    this._updateTime = timestamp;                                                                                      // 14323
                                                                                                                       // 14324
    var timeSinceStart = timestamp - this._startTime;                                                                  // 14325
    if (timeSinceStart >= this._duration) {                                                                            // 14326
        this.state = this._endValue;                                                                                   // 14327
        this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, 1);              // 14328
        this._active = false;                                                                                          // 14329
    }                                                                                                                  // 14330
    else if (timeSinceStart < 0) {                                                                                     // 14331
        this.state = this._startValue;                                                                                 // 14332
        this.velocity = this._startVelocity;                                                                           // 14333
    }                                                                                                                  // 14334
    else {                                                                                                             // 14335
        var t = timeSinceStart / this._duration;                                                                       // 14336
        this.state = _calculateState(this._startValue, this._endValue, this._curve(t));                                // 14337
        this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, t);              // 14338
    }                                                                                                                  // 14339
};                                                                                                                     // 14340
                                                                                                                       // 14341
/**                                                                                                                    // 14342
 * Is there at least one action pending completion?                                                                    // 14343
 *                                                                                                                     // 14344
 * @method isActive                                                                                                    // 14345
 *                                                                                                                     // 14346
 *                                                                                                                     // 14347
 * @return {boolean}                                                                                                   // 14348
 */                                                                                                                    // 14349
TweenTransition.prototype.isActive = function isActive() {                                                             // 14350
    return this._active;                                                                                               // 14351
};                                                                                                                     // 14352
                                                                                                                       // 14353
/**                                                                                                                    // 14354
 * Halt transition at current state and erase all pending actions.                                                     // 14355
 *                                                                                                                     // 14356
 * @method halt                                                                                                        // 14357
 *                                                                                                                     // 14358
 */                                                                                                                    // 14359
TweenTransition.prototype.halt = function halt() {                                                                     // 14360
    this.reset(this.get());                                                                                            // 14361
};                                                                                                                     // 14362
                                                                                                                       // 14363
// Register all the default curves                                                                                     // 14364
TweenTransition.registerCurve('linear', TweenTransition.Curves.linear);                                                // 14365
TweenTransition.registerCurve('easeIn', TweenTransition.Curves.easeIn);                                                // 14366
TweenTransition.registerCurve('easeOut', TweenTransition.Curves.easeOut);                                              // 14367
TweenTransition.registerCurve('easeInOut', TweenTransition.Curves.easeInOut);                                          // 14368
TweenTransition.registerCurve('easeOutBounce', TweenTransition.Curves.easeOutBounce);                                  // 14369
TweenTransition.registerCurve('spring', TweenTransition.Curves.spring);                                                // 14370
                                                                                                                       // 14371
TweenTransition.customCurve = function customCurve(v1, v2) {                                                           // 14372
    v1 = v1 || 0; v2 = v2 || 0;                                                                                        // 14373
    return function(t) {                                                                                               // 14374
        return v1*t + (-2*v1 - v2 + 3)*t*t + (v1 + v2 - 2)*t*t*t;                                                      // 14375
    };                                                                                                                 // 14376
};                                                                                                                     // 14377
                                                                                                                       // 14378
module.exports = TweenTransition;                                                                                      // 14379
},{}],91:[function(require,module,exports){                                                                            // 14380
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14381
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14382
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14383
 *                                                                                                                     // 14384
 * Owner: david@famo.us                                                                                                // 14385
 * @license MPL 2.0                                                                                                    // 14386
 * @copyright Famous Industries, Inc. 2014                                                                             // 14387
 */                                                                                                                    // 14388
                                                                                                                       // 14389
var PE = require('../physics/PhysicsEngine');                                                                          // 14390
var Particle = require('../physics/bodies/Particle');                                                                  // 14391
var Spring = require('../physics/forces/Spring');                                                                      // 14392
var Wall = require('../physics/constraints/Wall');                                                                     // 14393
var Vector = require('../math/Vector');                                                                                // 14394
                                                                                                                       // 14395
/**                                                                                                                    // 14396
 * WallTransition is a method of transitioning between two values (numbers,                                            // 14397
 *   or arrays of numbers) with a bounce. Unlike a SpringTransition                                                    // 14398
 *   The transition will not overshoot the target, but bounce back against it.                                         // 14399
 *   The behavior of the bounce is specified by the transition options.                                                // 14400
 *                                                                                                                     // 14401
 * @class WallTransition                                                                                               // 14402
 * @constructor                                                                                                        // 14403
 *                                                                                                                     // 14404
 * @param {Number|Array} [state=0] Initial state                                                                       // 14405
 */                                                                                                                    // 14406
function WallTransition(state) {                                                                                       // 14407
    state = state || 0;                                                                                                // 14408
                                                                                                                       // 14409
    this.endState  = new Vector(state);                                                                                // 14410
    this.initState = new Vector();                                                                                     // 14411
                                                                                                                       // 14412
    this.spring = new Spring({anchor : this.endState});                                                                // 14413
    this.wall   = new Wall();                                                                                          // 14414
                                                                                                                       // 14415
    this._restTolerance = 1e-10;                                                                                       // 14416
    this._dimensions = 1;                                                                                              // 14417
    this._absRestTolerance = this._restTolerance;                                                                      // 14418
    this._callback = undefined;                                                                                        // 14419
                                                                                                                       // 14420
    this.PE = new PE();                                                                                                // 14421
    this.particle = new Particle();                                                                                    // 14422
                                                                                                                       // 14423
    this.PE.addBody(this.particle);                                                                                    // 14424
    this.PE.attach([this.wall, this.spring], this.particle);                                                           // 14425
}                                                                                                                      // 14426
                                                                                                                       // 14427
WallTransition.SUPPORTS_MULTIPLE = 3;                                                                                  // 14428
                                                                                                                       // 14429
/**                                                                                                                    // 14430
 * @property WallTransition.DEFAULT_OPTIONS                                                                            // 14431
 * @type Object                                                                                                        // 14432
 * @protected                                                                                                          // 14433
 * @static                                                                                                             // 14434
 */                                                                                                                    // 14435
WallTransition.DEFAULT_OPTIONS = {                                                                                     // 14436
                                                                                                                       // 14437
    /**                                                                                                                // 14438
     * The amount of time in milliseconds taken for one complete oscillation                                           // 14439
     * when there is no damping                                                                                        // 14440
     *    Range : [0, Infinity]                                                                                        // 14441
     *                                                                                                                 // 14442
     * @attribute period                                                                                               // 14443
     * @type Number                                                                                                    // 14444
     * @default 300                                                                                                    // 14445
     */                                                                                                                // 14446
    period : 300,                                                                                                      // 14447
                                                                                                                       // 14448
    /**                                                                                                                // 14449
     * The damping of the snap.                                                                                        // 14450
     *    Range : [0, 1]                                                                                               // 14451
     *    0 = no damping, and the spring will oscillate forever                                                        // 14452
     *    1 = critically damped (the spring will never oscillate)                                                      // 14453
     *                                                                                                                 // 14454
     * @attribute dampingRatio                                                                                         // 14455
     * @type Number                                                                                                    // 14456
     * @default 0.5                                                                                                    // 14457
     */                                                                                                                // 14458
    dampingRatio : 0.5,                                                                                                // 14459
                                                                                                                       // 14460
    /**                                                                                                                // 14461
     * The initial velocity of the transition.                                                                         // 14462
     *                                                                                                                 // 14463
     * @attribute velocity                                                                                             // 14464
     * @type Number|Array                                                                                              // 14465
     * @default 0                                                                                                      // 14466
     */                                                                                                                // 14467
    velocity : 0,                                                                                                      // 14468
                                                                                                                       // 14469
    /**                                                                                                                // 14470
     * The percentage of momentum transferred to the wall                                                              // 14471
     *                                                                                                                 // 14472
     * @attribute restitution                                                                                          // 14473
     * @type Number                                                                                                    // 14474
     * @default 0.5                                                                                                    // 14475
     */                                                                                                                // 14476
    restitution : 0.5                                                                                                  // 14477
};                                                                                                                     // 14478
                                                                                                                       // 14479
function _getEnergy() {                                                                                                // 14480
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);                                         // 14481
}                                                                                                                      // 14482
                                                                                                                       // 14483
function _setAbsoluteRestTolerance() {                                                                                 // 14484
    var distance = this.endState.sub(this.initState).normSquared();                                                    // 14485
    this._absRestTolerance = (distance === 0)                                                                          // 14486
        ? this._restTolerance                                                                                          // 14487
        : this._restTolerance * distance;                                                                              // 14488
}                                                                                                                      // 14489
                                                                                                                       // 14490
function _wake() {                                                                                                     // 14491
    this.PE.wake();                                                                                                    // 14492
}                                                                                                                      // 14493
                                                                                                                       // 14494
function _sleep() {                                                                                                    // 14495
    this.PE.sleep();                                                                                                   // 14496
}                                                                                                                      // 14497
                                                                                                                       // 14498
function _setTarget(target) {                                                                                          // 14499
    this.endState.set(target);                                                                                         // 14500
                                                                                                                       // 14501
    var dist = this.endState.sub(this.initState).norm();                                                               // 14502
                                                                                                                       // 14503
    this.wall.setOptions({                                                                                             // 14504
        distance : this.endState.norm(),                                                                               // 14505
        normal : (dist === 0)                                                                                          // 14506
            ? this.particle.velocity.normalize(-1)                                                                     // 14507
            : this.endState.sub(this.initState).normalize(-1)                                                          // 14508
    });                                                                                                                // 14509
                                                                                                                       // 14510
    _setAbsoluteRestTolerance.call(this);                                                                              // 14511
}                                                                                                                      // 14512
                                                                                                                       // 14513
function _setParticlePosition(p) {                                                                                     // 14514
    this.particle.position.set(p);                                                                                     // 14515
}                                                                                                                      // 14516
                                                                                                                       // 14517
function _setParticleVelocity(v) {                                                                                     // 14518
    this.particle.velocity.set(v);                                                                                     // 14519
}                                                                                                                      // 14520
                                                                                                                       // 14521
function _getParticlePosition() {                                                                                      // 14522
    return (this._dimensions === 0)                                                                                    // 14523
        ? this.particle.getPosition1D()                                                                                // 14524
        : this.particle.getPosition();                                                                                 // 14525
}                                                                                                                      // 14526
                                                                                                                       // 14527
function _getParticleVelocity() {                                                                                      // 14528
    return (this._dimensions === 0)                                                                                    // 14529
        ? this.particle.getVelocity1D()                                                                                // 14530
        : this.particle.getVelocity();                                                                                 // 14531
}                                                                                                                      // 14532
                                                                                                                       // 14533
function _setCallback(callback) {                                                                                      // 14534
    this._callback = callback;                                                                                         // 14535
}                                                                                                                      // 14536
                                                                                                                       // 14537
function _update() {                                                                                                   // 14538
    if (this.PE.isSleeping()) {                                                                                        // 14539
        if (this._callback) {                                                                                          // 14540
            var cb = this._callback;                                                                                   // 14541
            this._callback = undefined;                                                                                // 14542
            cb();                                                                                                      // 14543
        }                                                                                                              // 14544
        return;                                                                                                        // 14545
    }                                                                                                                  // 14546
    var energy = _getEnergy.call(this);                                                                                // 14547
    if (energy < this._absRestTolerance) {                                                                             // 14548
        _sleep.call(this);                                                                                             // 14549
        _setParticlePosition.call(this, this.endState);                                                                // 14550
        _setParticleVelocity.call(this, [0,0,0]);                                                                      // 14551
    }                                                                                                                  // 14552
}                                                                                                                      // 14553
                                                                                                                       // 14554
function _setupDefinition(def) {                                                                                       // 14555
    var defaults = WallTransition.DEFAULT_OPTIONS;                                                                     // 14556
    if (def.period === undefined) def.period = defaults.period;                                                        // 14557
    if (def.dampingRatio === undefined) def.dampingRatio = defaults.dampingRatio;                                      // 14558
    if (def.velocity === undefined) def.velocity = defaults.velocity;                                                  // 14559
    if (def.restitution === undefined) def.restitution = defaults.restitution;                                         // 14560
                                                                                                                       // 14561
    //setup spring                                                                                                     // 14562
    this.spring.setOptions({                                                                                           // 14563
        period : def.period,                                                                                           // 14564
        dampingRatio : def.dampingRatio                                                                                // 14565
    });                                                                                                                // 14566
                                                                                                                       // 14567
    //setup wall                                                                                                       // 14568
    this.wall.setOptions({                                                                                             // 14569
        restitution : def.restitution                                                                                  // 14570
    });                                                                                                                // 14571
                                                                                                                       // 14572
    //setup particle                                                                                                   // 14573
    _setParticleVelocity.call(this, def.velocity);                                                                     // 14574
}                                                                                                                      // 14575
                                                                                                                       // 14576
/**                                                                                                                    // 14577
 * Resets the state and velocity                                                                                       // 14578
 *                                                                                                                     // 14579
 * @method reset                                                                                                       // 14580
 *                                                                                                                     // 14581
 * @param {Number|Array}  state     State                                                                              // 14582
 * @param  {Number|Array} [velocity] Velocity                                                                          // 14583
 */                                                                                                                    // 14584
WallTransition.prototype.reset = function reset(state, velocity) {                                                     // 14585
    this._dimensions = (state instanceof Array)                                                                        // 14586
        ? state.length                                                                                                 // 14587
        : 0;                                                                                                           // 14588
                                                                                                                       // 14589
    this.initState.set(state);                                                                                         // 14590
    _setParticlePosition.call(this, state);                                                                            // 14591
    if (velocity) _setParticleVelocity.call(this, velocity);                                                           // 14592
    _setTarget.call(this, state);                                                                                      // 14593
    _setCallback.call(this, undefined);                                                                                // 14594
};                                                                                                                     // 14595
                                                                                                                       // 14596
/**                                                                                                                    // 14597
 * Getter for velocity                                                                                                 // 14598
 *                                                                                                                     // 14599
 * @method getVelocity                                                                                                 // 14600
 *                                                                                                                     // 14601
 * @return velocity {Number|Array}                                                                                     // 14602
 */                                                                                                                    // 14603
WallTransition.prototype.getVelocity = function getVelocity() {                                                        // 14604
    return _getParticleVelocity.call(this);                                                                            // 14605
};                                                                                                                     // 14606
                                                                                                                       // 14607
/**                                                                                                                    // 14608
 * Setter for velocity                                                                                                 // 14609
 *                                                                                                                     // 14610
 * @method setVelocity                                                                                                 // 14611
 *                                                                                                                     // 14612
 * @return velocity {Number|Array}                                                                                     // 14613
 */                                                                                                                    // 14614
WallTransition.prototype.setVelocity = function setVelocity(velocity) {                                                // 14615
    this.call(this, _setParticleVelocity(velocity));                                                                   // 14616
};                                                                                                                     // 14617
                                                                                                                       // 14618
/**                                                                                                                    // 14619
 * Detects whether a transition is in progress                                                                         // 14620
 *                                                                                                                     // 14621
 * @method isActive                                                                                                    // 14622
 *                                                                                                                     // 14623
 * @return {Boolean}                                                                                                   // 14624
 */                                                                                                                    // 14625
WallTransition.prototype.isActive = function isActive() {                                                              // 14626
    return !this.PE.isSleeping();                                                                                      // 14627
};                                                                                                                     // 14628
                                                                                                                       // 14629
/**                                                                                                                    // 14630
 * Halt the transition                                                                                                 // 14631
 *                                                                                                                     // 14632
 * @method halt                                                                                                        // 14633
 */                                                                                                                    // 14634
WallTransition.prototype.halt = function halt() {                                                                      // 14635
    this.set(this.get());                                                                                              // 14636
};                                                                                                                     // 14637
                                                                                                                       // 14638
/**                                                                                                                    // 14639
 * Getter                                                                                                              // 14640
 *                                                                                                                     // 14641
 * @method get                                                                                                         // 14642
 *                                                                                                                     // 14643
 * @return state {Number|Array}                                                                                        // 14644
 */                                                                                                                    // 14645
WallTransition.prototype.get = function get() {                                                                        // 14646
    _update.call(this);                                                                                                // 14647
    return _getParticlePosition.call(this);                                                                            // 14648
};                                                                                                                     // 14649
                                                                                                                       // 14650
/**                                                                                                                    // 14651
 * Set the end position and transition, with optional callback on completion.                                          // 14652
 *                                                                                                                     // 14653
 * @method set                                                                                                         // 14654
 *                                                                                                                     // 14655
 * @param state {Number|Array}      Final state                                                                        // 14656
 * @param [definition] {Object}     Transition definition                                                              // 14657
 * @param [callback] {Function}     Callback                                                                           // 14658
 */                                                                                                                    // 14659
WallTransition.prototype.set = function set(state, definition, callback) {                                             // 14660
    if (!definition) {                                                                                                 // 14661
        this.reset(state);                                                                                             // 14662
        if (callback) callback();                                                                                      // 14663
        return;                                                                                                        // 14664
    }                                                                                                                  // 14665
                                                                                                                       // 14666
    this._dimensions = (state instanceof Array)                                                                        // 14667
        ? state.length                                                                                                 // 14668
        : 0;                                                                                                           // 14669
                                                                                                                       // 14670
    _wake.call(this);                                                                                                  // 14671
    _setupDefinition.call(this, definition);                                                                           // 14672
    _setTarget.call(this, state);                                                                                      // 14673
    _setCallback.call(this, callback);                                                                                 // 14674
};                                                                                                                     // 14675
                                                                                                                       // 14676
module.exports = WallTransition;                                                                                       // 14677
},{"../math/Vector":41,"../physics/PhysicsEngine":48,"../physics/bodies/Particle":51,"../physics/constraints/Wall":60,"../physics/forces/Spring":68}],92:[function(require,module,exports){
module.exports = {                                                                                                     // 14679
  CachedMap: require('./CachedMap'),                                                                                   // 14680
  Easing: require('./Easing'),                                                                                         // 14681
  MultipleTransition: require('./MultipleTransition'),                                                                 // 14682
  SnapTransition: require('./SnapTransition'),                                                                         // 14683
  SpringTransition: require('./SpringTransition'),                                                                     // 14684
  Transitionable: require('./Transitionable'),                                                                         // 14685
  TransitionableTransform: require('./TransitionableTransform'),                                                       // 14686
  TweenTransition: require('./TweenTransition'),                                                                       // 14687
  WallTransition: require('./WallTransition')                                                                          // 14688
};                                                                                                                     // 14689
                                                                                                                       // 14690
},{"./CachedMap":83,"./Easing":84,"./MultipleTransition":85,"./SnapTransition":86,"./SpringTransition":87,"./Transitionable":88,"./TransitionableTransform":89,"./TweenTransition":90,"./WallTransition":91}],93:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14692
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14693
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14694
 *                                                                                                                     // 14695
 * Owner: mark@famo.us                                                                                                 // 14696
 * @license MPL 2.0                                                                                                    // 14697
 * @copyright Famous Industries, Inc. 2014                                                                             // 14698
 */                                                                                                                    // 14699
                                                                                                                       // 14700
                                                                                                                       // 14701
                                                                                                                       // 14702
                                                                                                                       // 14703
/**                                                                                                                    // 14704
 * Collection to map keyboard codes in plain english                                                                   // 14705
 *                                                                                                                     // 14706
 * @class KeyCodes                                                                                                     // 14707
 * @static                                                                                                             // 14708
 */                                                                                                                    // 14709
var KeyCodes = {                                                                                                       // 14710
    0 : 48,                                                                                                            // 14711
    1 : 49,                                                                                                            // 14712
    2 : 50,                                                                                                            // 14713
    3 : 51,                                                                                                            // 14714
    4 : 52,                                                                                                            // 14715
    5 : 53,                                                                                                            // 14716
    6 : 54,                                                                                                            // 14717
    7 : 55,                                                                                                            // 14718
    8 : 56,                                                                                                            // 14719
    9 : 57,                                                                                                            // 14720
    a : 97,                                                                                                            // 14721
    b : 98,                                                                                                            // 14722
    c : 99,                                                                                                            // 14723
    d : 100,                                                                                                           // 14724
    e : 101,                                                                                                           // 14725
    f : 102,                                                                                                           // 14726
    g : 103,                                                                                                           // 14727
    h : 104,                                                                                                           // 14728
    i : 105,                                                                                                           // 14729
    j : 106,                                                                                                           // 14730
    k : 107,                                                                                                           // 14731
    l : 108,                                                                                                           // 14732
    m : 109,                                                                                                           // 14733
    n : 110,                                                                                                           // 14734
    o : 111,                                                                                                           // 14735
    p : 112,                                                                                                           // 14736
    q : 113,                                                                                                           // 14737
    r : 114,                                                                                                           // 14738
    s : 115,                                                                                                           // 14739
    t : 116,                                                                                                           // 14740
    u : 117,                                                                                                           // 14741
    v : 118,                                                                                                           // 14742
    w : 119,                                                                                                           // 14743
    x : 120,                                                                                                           // 14744
    y : 121,                                                                                                           // 14745
    z : 122,                                                                                                           // 14746
    A : 65,                                                                                                            // 14747
    B : 66,                                                                                                            // 14748
    C : 67,                                                                                                            // 14749
    D : 68,                                                                                                            // 14750
    E : 69,                                                                                                            // 14751
    F : 70,                                                                                                            // 14752
    G : 71,                                                                                                            // 14753
    H : 72,                                                                                                            // 14754
    I : 73,                                                                                                            // 14755
    J : 74,                                                                                                            // 14756
    K : 75,                                                                                                            // 14757
    L : 76,                                                                                                            // 14758
    M : 77,                                                                                                            // 14759
    N : 78,                                                                                                            // 14760
    O : 79,                                                                                                            // 14761
    P : 80,                                                                                                            // 14762
    Q : 81,                                                                                                            // 14763
    R : 82,                                                                                                            // 14764
    S : 83,                                                                                                            // 14765
    T : 84,                                                                                                            // 14766
    U : 85,                                                                                                            // 14767
    V : 86,                                                                                                            // 14768
    W : 87,                                                                                                            // 14769
    X : 88,                                                                                                            // 14770
    Y : 89,                                                                                                            // 14771
    Z : 90,                                                                                                            // 14772
    ENTER : 13,                                                                                                        // 14773
    LEFT_ARROW: 37,                                                                                                    // 14774
    RIGHT_ARROW: 39,                                                                                                   // 14775
    UP_ARROW: 38,                                                                                                      // 14776
    DOWN_ARROW: 40,                                                                                                    // 14777
    SPACE: 32,                                                                                                         // 14778
    SHIFT: 16,                                                                                                         // 14779
    TAB: 9                                                                                                             // 14780
};                                                                                                                     // 14781
                                                                                                                       // 14782
module.exports = KeyCodes;                                                                                             // 14783
},{}],94:[function(require,module,exports){                                                                            // 14784
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14785
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14786
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14787
 *                                                                                                                     // 14788
 * Owner: mark@famo.us                                                                                                 // 14789
 * @license MPL 2.0                                                                                                    // 14790
 * @copyright Famous Industries, Inc. 2014                                                                             // 14791
 */                                                                                                                    // 14792
// TODO fix func-style                                                                                                 // 14793
/*eslint func-style: [0, "declaration"] */                                                                             // 14794
                                                                                                                       // 14795
/**                                                                                                                    // 14796
 * An internal library to reproduce javascript time-based scheduling.                                                  // 14797
 *   Using standard javascript setTimeout methods can have a negative performance impact                               // 14798
 *   when combined with the Famous rendering process, so instead require Timer and call                                // 14799
 *   Timer.setTimeout, Timer.setInterval, etc.                                                                         // 14800
 *                                                                                                                     // 14801
 * @class Timer                                                                                                        // 14802
 * @constructor                                                                                                        // 14803
 */                                                                                                                    // 14804
var FamousEngine = require('../core/Engine');                                                                          // 14805
                                                                                                                       // 14806
var _event  = 'prerender';                                                                                             // 14807
                                                                                                                       // 14808
var getTime = (window.performance && window.performance.now) ?                                                         // 14809
    function() {                                                                                                       // 14810
        return window.performance.now();                                                                               // 14811
    }                                                                                                                  // 14812
    : function() {                                                                                                     // 14813
        return Date.now();                                                                                             // 14814
    };                                                                                                                 // 14815
                                                                                                                       // 14816
/**                                                                                                                    // 14817
 * Add a function to be run on every prerender                                                                         // 14818
 *                                                                                                                     // 14819
 * @method addTimerFunction                                                                                            // 14820
 *                                                                                                                     // 14821
 * @param {function} fn function to be run every prerender                                                             // 14822
 *                                                                                                                     // 14823
 * @return {function} function passed in as parameter                                                                  // 14824
 */                                                                                                                    // 14825
function addTimerFunction(fn) {                                                                                        // 14826
    FamousEngine.on(_event, fn);                                                                                       // 14827
    return fn;                                                                                                         // 14828
}                                                                                                                      // 14829
                                                                                                                       // 14830
/**                                                                                                                    // 14831
 * Wraps a function to be invoked after a certain amount of time.                                                      // 14832
 *  After a set duration has passed, it executes the function and                                                      // 14833
 *  removes it as a listener to 'prerender'.                                                                           // 14834
 *                                                                                                                     // 14835
 * @method setTimeout                                                                                                  // 14836
 *                                                                                                                     // 14837
 * @param {function} fn function to be run after a specified duration                                                  // 14838
 * @param {number} duration milliseconds from now to execute the function                                              // 14839
 *                                                                                                                     // 14840
 * @return {function} function passed in as parameter                                                                  // 14841
 */                                                                                                                    // 14842
function setTimeout(fn, duration) {                                                                                    // 14843
    var t = getTime();                                                                                                 // 14844
    var callback = function() {                                                                                        // 14845
        var t2 = getTime();                                                                                            // 14846
        if (t2 - t >= duration) {                                                                                      // 14847
            fn.apply(this, arguments);                                                                                 // 14848
            FamousEngine.removeListener(_event, callback);                                                             // 14849
        }                                                                                                              // 14850
    };                                                                                                                 // 14851
    return addTimerFunction(callback);                                                                                 // 14852
}                                                                                                                      // 14853
                                                                                                                       // 14854
/**                                                                                                                    // 14855
 * Wraps a function to be invoked after a certain amount of time.                                                      // 14856
 *  After a set duration has passed, it executes the function and                                                      // 14857
 *  resets the execution time.                                                                                         // 14858
 *                                                                                                                     // 14859
 * @method setInterval                                                                                                 // 14860
 *                                                                                                                     // 14861
 * @param {function} fn function to be run after a specified duration                                                  // 14862
 * @param {number} duration interval to execute function in milliseconds                                               // 14863
 *                                                                                                                     // 14864
 * @return {function} function passed in as parameter                                                                  // 14865
 */                                                                                                                    // 14866
function setInterval(fn, duration) {                                                                                   // 14867
    var t = getTime();                                                                                                 // 14868
    var callback = function() {                                                                                        // 14869
        var t2 = getTime();                                                                                            // 14870
        if (t2 - t >= duration) {                                                                                      // 14871
            fn.apply(this, arguments);                                                                                 // 14872
            t = getTime();                                                                                             // 14873
        }                                                                                                              // 14874
    };                                                                                                                 // 14875
    return addTimerFunction(callback);                                                                                 // 14876
}                                                                                                                      // 14877
                                                                                                                       // 14878
/**                                                                                                                    // 14879
 * Wraps a function to be invoked after a certain amount of prerender ticks.                                           // 14880
 *  Similar use to setTimeout but tied to the engine's run speed.                                                      // 14881
 *                                                                                                                     // 14882
 * @method after                                                                                                       // 14883
 *                                                                                                                     // 14884
 * @param {function} fn function to be run after a specified amount of ticks                                           // 14885
 * @param {number} numTicks number of prerender frames to wait                                                         // 14886
 *                                                                                                                     // 14887
 * @return {function} function passed in as parameter                                                                  // 14888
 */                                                                                                                    // 14889
function after(fn, numTicks) {                                                                                         // 14890
    if (numTicks === undefined) return undefined;                                                                      // 14891
    var callback = function() {                                                                                        // 14892
        numTicks--;                                                                                                    // 14893
        if (numTicks <= 0) { //in case numTicks is fraction or negative                                                // 14894
            fn.apply(this, arguments);                                                                                 // 14895
            clear(callback);                                                                                           // 14896
        }                                                                                                              // 14897
    };                                                                                                                 // 14898
    return addTimerFunction(callback);                                                                                 // 14899
}                                                                                                                      // 14900
                                                                                                                       // 14901
/**                                                                                                                    // 14902
 * Wraps a function to be continually invoked after a certain amount of prerender ticks.                               // 14903
 *  Similar use to setInterval but tied to the engine's run speed.                                                     // 14904
 *                                                                                                                     // 14905
 * @method every                                                                                                       // 14906
 *                                                                                                                     // 14907
 * @param {function} fn function to be run after a specified amount of ticks                                           // 14908
 * @param {number} numTicks number of prerender frames to wait                                                         // 14909
 *                                                                                                                     // 14910
 * @return {function} function passed in as parameter                                                                  // 14911
 */                                                                                                                    // 14912
function every(fn, numTicks) {                                                                                         // 14913
    numTicks = numTicks || 1;                                                                                          // 14914
    var initial = numTicks;                                                                                            // 14915
    var callback = function() {                                                                                        // 14916
        numTicks--;                                                                                                    // 14917
        if (numTicks <= 0) { //in case numTicks is fraction or negative                                                // 14918
            fn.apply(this, arguments);                                                                                 // 14919
            numTicks = initial;                                                                                        // 14920
        }                                                                                                              // 14921
    };                                                                                                                 // 14922
    return addTimerFunction(callback);                                                                                 // 14923
}                                                                                                                      // 14924
                                                                                                                       // 14925
/**                                                                                                                    // 14926
 * Remove a function that gets called every prerender                                                                  // 14927
 *                                                                                                                     // 14928
 * @method clear                                                                                                       // 14929
 *                                                                                                                     // 14930
 * @param {function} fn event linstener                                                                                // 14931
 */                                                                                                                    // 14932
function clear(fn) {                                                                                                   // 14933
    FamousEngine.removeListener(_event, fn);                                                                           // 14934
}                                                                                                                      // 14935
                                                                                                                       // 14936
/**                                                                                                                    // 14937
 * Executes a function after a certain amount of time. Makes sure                                                      // 14938
 *  the function is not run multiple times.                                                                            // 14939
 *                                                                                                                     // 14940
 * @method debounce                                                                                                    // 14941
 *                                                                                                                     // 14942
 * @param {function} func function to run after certain amount of time                                                 // 14943
 * @param {number} wait amount of time                                                                                 // 14944
 *                                                                                                                     // 14945
 * @return {function} function that is not able to debounce                                                            // 14946
 */                                                                                                                    // 14947
function debounce(func, wait) {                                                                                        // 14948
    var timeout;                                                                                                       // 14949
    var ctx;                                                                                                           // 14950
    var timestamp;                                                                                                     // 14951
    var result;                                                                                                        // 14952
    var args;                                                                                                          // 14953
    return function() {                                                                                                // 14954
        ctx = this;                                                                                                    // 14955
        args = arguments;                                                                                              // 14956
        timestamp = getTime();                                                                                         // 14957
                                                                                                                       // 14958
        var fn = function() {                                                                                          // 14959
            var last = getTime - timestamp;                                                                            // 14960
                                                                                                                       // 14961
            if (last < wait) {                                                                                         // 14962
                timeout = setTimeout(fn, wait - last);                                                                 // 14963
            } else {                                                                                                   // 14964
                timeout = null;                                                                                        // 14965
                result = func.apply(ctx, args);                                                                        // 14966
            }                                                                                                          // 14967
        };                                                                                                             // 14968
                                                                                                                       // 14969
        clear(timeout);                                                                                                // 14970
        timeout = setTimeout(fn, wait);                                                                                // 14971
                                                                                                                       // 14972
        return result;                                                                                                 // 14973
    };                                                                                                                 // 14974
}                                                                                                                      // 14975
                                                                                                                       // 14976
module.exports = {                                                                                                     // 14977
    setTimeout : setTimeout,                                                                                           // 14978
    setInterval : setInterval,                                                                                         // 14979
    debounce : debounce,                                                                                               // 14980
    after : after,                                                                                                     // 14981
    every : every,                                                                                                     // 14982
    clear : clear                                                                                                      // 14983
};                                                                                                                     // 14984
},{"../core/Engine":4}],95:[function(require,module,exports){                                                          // 14985
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14986
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14987
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14988
 *                                                                                                                     // 14989
 * Owner: mark@famo.us                                                                                                 // 14990
 * @license MPL 2.0                                                                                                    // 14991
 * @copyright Famous Industries, Inc. 2014                                                                             // 14992
 */                                                                                                                    // 14993
                                                                                                                       // 14994
                                                                                                                       // 14995
                                                                                                                       // 14996
/**                                                                                                                    // 14997
 * This namespace holds standalone functionality.                                                                      // 14998
 *  Currently includes name mapping for transition curves,                                                             // 14999
 *  name mapping for origin pairs, and the after() function.                                                           // 15000
 *                                                                                                                     // 15001
 * @class Utility                                                                                                      // 15002
 * @static                                                                                                             // 15003
 */                                                                                                                    // 15004
var Utility = {};                                                                                                      // 15005
                                                                                                                       // 15006
/**                                                                                                                    // 15007
 * Table of direction array positions                                                                                  // 15008
 *                                                                                                                     // 15009
 * @property {object} Direction                                                                                        // 15010
 * @final                                                                                                              // 15011
 */                                                                                                                    // 15012
Utility.Direction = {                                                                                                  // 15013
    X: 0,                                                                                                              // 15014
    Y: 1,                                                                                                              // 15015
    Z: 2                                                                                                               // 15016
};                                                                                                                     // 15017
                                                                                                                       // 15018
/**                                                                                                                    // 15019
 * Return wrapper around callback function. Once the wrapper is called N                                               // 15020
 *   times, invoke the callback function. Arguments and scope preserved.                                               // 15021
 *                                                                                                                     // 15022
 * @method after                                                                                                       // 15023
 *                                                                                                                     // 15024
 * @param {number} count number of calls before callback function invoked                                              // 15025
 * @param {Function} callback wrapped callback function                                                                // 15026
 *                                                                                                                     // 15027
 * @return {function} wrapped callback with coundown feature                                                           // 15028
 */                                                                                                                    // 15029
Utility.after = function after(count, callback) {                                                                      // 15030
    var counter = count;                                                                                               // 15031
    return function() {                                                                                                // 15032
        counter--;                                                                                                     // 15033
        if (counter === 0) callback.apply(this, arguments);                                                            // 15034
    };                                                                                                                 // 15035
};                                                                                                                     // 15036
                                                                                                                       // 15037
/**                                                                                                                    // 15038
 * Load a URL and return its contents in a callback                                                                    // 15039
 *                                                                                                                     // 15040
 * @method loadURL                                                                                                     // 15041
 *                                                                                                                     // 15042
 * @param {string} url URL of object                                                                                   // 15043
 * @param {function} callback callback to dispatch with content                                                        // 15044
 */                                                                                                                    // 15045
Utility.loadURL = function loadURL(url, callback) {                                                                    // 15046
    var xhr = new XMLHttpRequest();                                                                                    // 15047
    xhr.onreadystatechange = function onreadystatechange() {                                                           // 15048
        if (this.readyState === 4) {                                                                                   // 15049
            if (callback) callback(this.responseText);                                                                 // 15050
        }                                                                                                              // 15051
    };                                                                                                                 // 15052
    xhr.open('GET', url);                                                                                              // 15053
    xhr.send();                                                                                                        // 15054
};                                                                                                                     // 15055
                                                                                                                       // 15056
/**                                                                                                                    // 15057
 * Create a document fragment from a string of HTML                                                                    // 15058
 *                                                                                                                     // 15059
 * @method createDocumentFragmentFromHTML                                                                              // 15060
 *                                                                                                                     // 15061
 * @param {string} html HTML to convert to DocumentFragment                                                            // 15062
 *                                                                                                                     // 15063
 * @return {DocumentFragment} DocumentFragment representing input HTML                                                 // 15064
 */                                                                                                                    // 15065
Utility.createDocumentFragmentFromHTML = function createDocumentFragmentFromHTML(html) {                               // 15066
    var element = document.createElement('div');                                                                       // 15067
    element.innerHTML = html;                                                                                          // 15068
    var result = document.createDocumentFragment();                                                                    // 15069
    while (element.hasChildNodes()) result.appendChild(element.firstChild);                                            // 15070
    return result;                                                                                                     // 15071
};                                                                                                                     // 15072
                                                                                                                       // 15073
/*                                                                                                                     // 15074
 *  Deep clone an object.                                                                                              // 15075
 *  @param b {Object} Object to clone                                                                                  // 15076
 *  @return a {Object} Cloned object.                                                                                  // 15077
 */                                                                                                                    // 15078
Utility.clone = function clone(b) {                                                                                    // 15079
    var a;                                                                                                             // 15080
    if (typeof b === 'object') {                                                                                       // 15081
        a = (b instanceof Array) ? [] : {};                                                                            // 15082
        for (var key in b) {                                                                                           // 15083
            if (typeof b[key] === 'object' && b[key] !== null) {                                                       // 15084
                if (b[key] instanceof Array) {                                                                         // 15085
                    a[key] = new Array(b[key].length);                                                                 // 15086
                    for (var i = 0; i < b[key].length; i++) {                                                          // 15087
                        a[key][i] = Utility.clone(b[key][i]);                                                          // 15088
                    }                                                                                                  // 15089
                }                                                                                                      // 15090
                else {                                                                                                 // 15091
                  a[key] = Utility.clone(b[key]);                                                                      // 15092
                }                                                                                                      // 15093
            }                                                                                                          // 15094
            else {                                                                                                     // 15095
                a[key] = b[key];                                                                                       // 15096
            }                                                                                                          // 15097
        }                                                                                                              // 15098
    }                                                                                                                  // 15099
    else {                                                                                                             // 15100
        a = b;                                                                                                         // 15101
    }                                                                                                                  // 15102
    return a;                                                                                                          // 15103
};                                                                                                                     // 15104
                                                                                                                       // 15105
module.exports = Utility;                                                                                              // 15106
},{}],96:[function(require,module,exports){                                                                            // 15107
module.exports = {                                                                                                     // 15108
  KeyCodes: require('./KeyCodes'),                                                                                     // 15109
  Timer: require('./Timer'),                                                                                           // 15110
  Utility: require('./Utility')                                                                                        // 15111
};                                                                                                                     // 15112
                                                                                                                       // 15113
},{"./KeyCodes":93,"./Timer":94,"./Utility":95}],97:[function(require,module,exports){                                 // 15114
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15115
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15116
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15117
 *                                                                                                                     // 15118
 * Owner: mike@famo.us                                                                                                 // 15119
 * @license MPL 2.0                                                                                                    // 15120
 * @copyright Famous Industries, Inc. 2014                                                                             // 15121
 */                                                                                                                    // 15122
                                                                                                                       // 15123
var Entity = require('../core/Entity');                                                                                // 15124
var Transform = require('../core/Transform');                                                                          // 15125
var EventHandler = require('../core/EventHandler');                                                                    // 15126
var OptionsManager = require('../core/OptionsManager');                                                                // 15127
                                                                                                                       // 15128
/**                                                                                                                    // 15129
 * ContextualView is an interface for creating views that need to                                                      // 15130
 *   be aware of their parent's transform, size, and/or origin.                                                        // 15131
 *   Consists of a OptionsManager paired with an input EventHandler                                                    // 15132
 *   and an output EventHandler. Meant to be extended by the developer.                                                // 15133
 * @class ContextualView                                                                                               // 15134
 * @constructor                                                                                                        // 15135
 * @param {Options} [options] An object of configurable options.                                                       // 15136
 */                                                                                                                    // 15137
function ContextualView(options) {                                                                                     // 15138
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS || ContextualView.DEFAULT_OPTIONS);                  // 15139
    this._optionsManager = new OptionsManager(this.options);                                                           // 15140
    if (options) this.setOptions(options);                                                                             // 15141
                                                                                                                       // 15142
    this._eventInput = new EventHandler();                                                                             // 15143
    this._eventOutput = new EventHandler();                                                                            // 15144
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 15145
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 15146
                                                                                                                       // 15147
    this._id = Entity.register(this);                                                                                  // 15148
}                                                                                                                      // 15149
                                                                                                                       // 15150
ContextualView.DEFAULT_OPTIONS = {};                                                                                   // 15151
                                                                                                                       // 15152
/**                                                                                                                    // 15153
 * Patches the ContextualLayout instance's options with the passed-in ones.                                            // 15154
 *                                                                                                                     // 15155
 * @method setOptions                                                                                                  // 15156
 * @param {Options} options An object of configurable options for the ContextualLayout instance.                       // 15157
 */                                                                                                                    // 15158
ContextualView.prototype.setOptions = function setOptions(options) {                                                   // 15159
    return this._optionsManager.setOptions(options);                                                                   // 15160
};                                                                                                                     // 15161
                                                                                                                       // 15162
/**                                                                                                                    // 15163
 * Returns ContextualLayout instance's options.                                                                        // 15164
 *                                                                                                                     // 15165
 * @method setOptions                                                                                                  // 15166
 * @param {string} key                                                                                                 // 15167
 * @return {Options} options The instance's object of configurable options.                                            // 15168
 */                                                                                                                    // 15169
ContextualView.prototype.getOptions = function getOptions(key) {                                                       // 15170
    return this._optionsManager.getOptions(key);                                                                       // 15171
};                                                                                                                     // 15172
                                                                                                                       // 15173
/**                                                                                                                    // 15174
 * Return the registers Entity id for the ContextualView.                                                              // 15175
 *                                                                                                                     // 15176
 * @private                                                                                                            // 15177
 * @method render                                                                                                      // 15178
 * @return {Number} Registered Entity id                                                                               // 15179
 */                                                                                                                    // 15180
ContextualView.prototype.render = function render() {                                                                  // 15181
    return this._id;                                                                                                   // 15182
};                                                                                                                     // 15183
                                                                                                                       // 15184
/**                                                                                                                    // 15185
 * Apply changes from this component to the corresponding document element.                                            // 15186
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 15187
 * and matrix transforms.                                                                                              // 15188
 *                                                                                                                     // 15189
 * @private                                                                                                            // 15190
 * @method commit                                                                                                      // 15191
 * @param {Context} context commit context                                                                             // 15192
 */                                                                                                                    // 15193
ContextualView.prototype.commit = function commit(context) {};                                                         // 15194
                                                                                                                       // 15195
module.exports = ContextualView;                                                                                       // 15196
},{"../core/Entity":5,"../core/EventHandler":7,"../core/OptionsManager":10,"../core/Transform":15}],98:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15198
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15199
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15200
 *                                                                                                                     // 15201
 * Owner: felix@famo.us                                                                                                // 15202
 * @license MPL 2.0                                                                                                    // 15203
 * @copyright Famous Industries, Inc. 2014                                                                             // 15204
 */                                                                                                                    // 15205
                                                                                                                       // 15206
var Transform = require('../core/Transform');                                                                          // 15207
var OptionsManager = require('../core/OptionsManager');                                                                // 15208
var Transitionable = require('../transitions/Transitionable');                                                         // 15209
var Utility = require('../utilities/Utility');                                                                         // 15210
var SequentialLayout = require('./SequentialLayout');                                                                  // 15211
                                                                                                                       // 15212
/**                                                                                                                    // 15213
 * A Sequential Layout that can be opened and closed with animations.                                                  // 15214
 *                                                                                                                     // 15215
 *   Takes the same options as SequentialLayout                                                                        // 15216
 *   as well as options for the open/close transition                                                                  // 15217
 *   and the rotation you want your Deck instance to layout in.                                                        // 15218
 *                                                                                                                     // 15219
 * @class Deck                                                                                                         // 15220
 * @constructor                                                                                                        // 15221
 * @extends SequentialLayout                                                                                           // 15222
 *                                                                                                                     // 15223
 * @param {Options} [options] An object of configurable options                                                        // 15224
 * @param {Transition} [options.transition={duration: 500, curve: 'easeOutBounce'}                                     // 15225
 *   The transition that executes upon opening or closing your deck instance.                                          // 15226
 * @param {Number} [stackRotation=0] The amount of rotation applied to the propogation                                 // 15227
 *   of the Deck instance's stack of renderables.                                                                      // 15228
 * @param {Object} [options.transition] A transition object for changing between states.                               // 15229
 * @param {Number} [options.direction] axis of expansion (Utility.Direction.X or .Y)                                   // 15230
 */                                                                                                                    // 15231
function Deck(options) {                                                                                               // 15232
    SequentialLayout.apply(this, arguments);                                                                           // 15233
    this.state = new Transitionable(0);                                                                                // 15234
    this._isOpen = false;                                                                                              // 15235
                                                                                                                       // 15236
    this.setOutputFunction(function(input, offset, index) {                                                            // 15237
        var state = _getState.call(this);                                                                              // 15238
        var positionMatrix = (this.options.direction === Utility.Direction.X) ?                                        // 15239
            Transform.translate(state * offset, 0, 0.001 * (state - 1) * offset) :                                     // 15240
            Transform.translate(0, state * offset, 0.001 * (state - 1) * offset);                                      // 15241
        var output = input.render();                                                                                   // 15242
        if (this.options.stackRotation) {                                                                              // 15243
            var amount = this.options.stackRotation * index * (1 - state);                                             // 15244
            output = {                                                                                                 // 15245
                transform: Transform.rotateZ(amount),                                                                  // 15246
                origin: [0.5, 0.5],                                                                                    // 15247
                target: output                                                                                         // 15248
            };                                                                                                         // 15249
        }                                                                                                              // 15250
        return {                                                                                                       // 15251
            transform: positionMatrix,                                                                                 // 15252
            size: input.getSize(),                                                                                     // 15253
            target: output                                                                                             // 15254
        };                                                                                                             // 15255
    });                                                                                                                // 15256
}                                                                                                                      // 15257
Deck.prototype = Object.create(SequentialLayout.prototype);                                                            // 15258
Deck.prototype.constructor = Deck;                                                                                     // 15259
                                                                                                                       // 15260
Deck.DEFAULT_OPTIONS = OptionsManager.patch(SequentialLayout.DEFAULT_OPTIONS, {                                        // 15261
    transition: {                                                                                                      // 15262
        curve: 'easeOutBounce',                                                                                        // 15263
        duration: 500                                                                                                  // 15264
    },                                                                                                                 // 15265
    stackRotation: 0                                                                                                   // 15266
});                                                                                                                    // 15267
                                                                                                                       // 15268
/**                                                                                                                    // 15269
 * Returns the width and the height of the Deck instance.                                                              // 15270
 *                                                                                                                     // 15271
 * @method getSize                                                                                                     // 15272
 * @return {Array} A two value array of Deck's current width and height (in that order).                               // 15273
 *   Scales as Deck opens and closes.                                                                                  // 15274
 */                                                                                                                    // 15275
Deck.prototype.getSize = function getSize() {                                                                          // 15276
    var originalSize = SequentialLayout.prototype.getSize.apply(this, arguments);                                      // 15277
    var firstSize = this._items ? this._items.get().getSize() : [0, 0];                                                // 15278
    if (!firstSize) firstSize = [0, 0];                                                                                // 15279
    var state = _getState.call(this);                                                                                  // 15280
    var invState = 1 - state;                                                                                          // 15281
    return [firstSize[0] * invState + originalSize[0] * state, firstSize[1] * invState + originalSize[1] * state];     // 15282
};                                                                                                                     // 15283
                                                                                                                       // 15284
function _getState(returnFinal) {                                                                                      // 15285
    if (returnFinal) return this._isOpen ? 1 : 0;                                                                      // 15286
    else return this.state.get();                                                                                      // 15287
}                                                                                                                      // 15288
                                                                                                                       // 15289
function _setState(pos, transition, callback) {                                                                        // 15290
    this.state.halt();                                                                                                 // 15291
    this.state.set(pos, transition, callback);                                                                         // 15292
}                                                                                                                      // 15293
                                                                                                                       // 15294
/**                                                                                                                    // 15295
 * An accesor method to find out if the messaged Deck instance is open or closed.                                      // 15296
 *                                                                                                                     // 15297
 * @method isOpen                                                                                                      // 15298
 * @return {Boolean} Returns true if the instance is open or false if it's closed.                                     // 15299
 */                                                                                                                    // 15300
Deck.prototype.isOpen = function isOpen() {                                                                            // 15301
    return this._isOpen;                                                                                               // 15302
};                                                                                                                     // 15303
                                                                                                                       // 15304
/**                                                                                                                    // 15305
 * Sets the Deck instance to an open state.                                                                            // 15306
 *                                                                                                                     // 15307
 * @method open                                                                                                        // 15308
 * @param {function} [callback] Executes after transitioning to a fully open state.                                    // 15309
 */                                                                                                                    // 15310
Deck.prototype.open = function open(callback) {                                                                        // 15311
    this._isOpen = true;                                                                                               // 15312
   _setState.call(this, 1, this.options.transition, callback);                                                         // 15313
};                                                                                                                     // 15314
                                                                                                                       // 15315
/**                                                                                                                    // 15316
 * Sets the Deck instance to an open state.                                                                            // 15317
 *                                                                                                                     // 15318
 * @method close                                                                                                       // 15319
 * @param {function} [callback] Executes after transitioning to a fully closed state.                                  // 15320
 */                                                                                                                    // 15321
Deck.prototype.close = function close(callback) {                                                                      // 15322
    this._isOpen = false;                                                                                              // 15323
    _setState.call(this, 0, this.options.transition, callback);                                                        // 15324
};                                                                                                                     // 15325
                                                                                                                       // 15326
/**                                                                                                                    // 15327
 * Sets the Deck instance from its current state to the opposite state.                                                // 15328
 *                                                                                                                     // 15329
 * @method close                                                                                                       // 15330
 * @param {function} [callback] Executes after transitioning to the toggled state.                                     // 15331
 */                                                                                                                    // 15332
Deck.prototype.toggle = function toggle(callback) {                                                                    // 15333
    if (this._isOpen) this.close(callback);                                                                            // 15334
    else this.open(callback);                                                                                          // 15335
};                                                                                                                     // 15336
                                                                                                                       // 15337
module.exports = Deck;                                                                                                 // 15338
},{"../core/OptionsManager":10,"../core/Transform":15,"../transitions/Transitionable":88,"../utilities/Utility":95,"./SequentialLayout":110}],99:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15340
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15341
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15342
 *                                                                                                                     // 15343
 * Owner: david@famo.us                                                                                                // 15344
 * @license MPL 2.0                                                                                                    // 15345
 * @copyright Famous Industries, Inc. 2014                                                                             // 15346
 */                                                                                                                    // 15347
                                                                                                                       // 15348
var RenderNode = require('../core/RenderNode');                                                                        // 15349
var Transform = require('../core/Transform');                                                                          // 15350
var OptionsManager = require('../core/OptionsManager');                                                                // 15351
var Transitionable = require('../transitions/Transitionable');                                                         // 15352
var EventHandler = require('../core/EventHandler');                                                                    // 15353
                                                                                                                       // 15354
/**                                                                                                                    // 15355
 * A layout which will arrange two renderables: a featured content, and a                                              // 15356
 *   concealed drawer. The drawer can be revealed from any side of the                                                 // 15357
 *   content (left, top, right, bottom) by dragging the content.                                                       // 15358
 *                                                                                                                     // 15359
 *   A @link{Sync} must be piped in to recieve user input.                                                             // 15360
 *                                                                                                                     // 15361
 *   Events:                                                                                                           // 15362
 *     broadcasts: 'open', 'close'                                                                                     // 15363
 *     listens to: 'update', 'end'                                                                                     // 15364
 *                                                                                                                     // 15365
 * @class DrawerLayout                                                                                                 // 15366
 *                                                                                                                     // 15367
 * @constructor                                                                                                        // 15368
 *                                                                                                                     // 15369
 * @param [options] {Object}                                An object of configurable options                          // 15370
 * @param [options.side=DrawerLayout.SIDES.LEFT] {Number}   The side of the content the drawer is placed.              // 15371
 *                                                          Choice of DrawerLayout.SIDES.LEFT/RIGHT/TOP/BOTTOM         // 15372
 * @param [options.drawerLength=0] {Number}                 The default length of the drawer                           // 15373
 * @param [options.velocityThreshold=0] {Number}            The velocity threshold to trigger a toggle                 // 15374
 * @param [options.positionThreshold=0] {Number}            The position threshold to trigger a toggle                 // 15375
 * @param [options.transition=true] {Boolean|Object}        The toggle transition                                      // 15376
 */                                                                                                                    // 15377
function DrawerLayout(options) {                                                                                       // 15378
    this.options = Object.create(DrawerLayout.DEFAULT_OPTIONS);                                                        // 15379
    this._optionsManager = new OptionsManager(this.options);                                                           // 15380
    if (options) this.setOptions(options);                                                                             // 15381
                                                                                                                       // 15382
    this._position = new Transitionable(0);                                                                            // 15383
    this._direction = _getDirectionFromSide(this.options.side);                                                        // 15384
    this._orientation = _getOrientationFromSide(this.options.side);                                                    // 15385
    this._isOpen = false;                                                                                              // 15386
    this._cachedLength = 0;                                                                                            // 15387
                                                                                                                       // 15388
    this.drawer = new RenderNode();                                                                                    // 15389
    this.content = new RenderNode();                                                                                   // 15390
                                                                                                                       // 15391
    this._eventInput = new EventHandler();                                                                             // 15392
    this._eventOutput = new EventHandler();                                                                            // 15393
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 15394
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 15395
                                                                                                                       // 15396
    this._eventInput.on('update', _handleUpdate.bind(this));                                                           // 15397
    this._eventInput.on('end', _handleEnd.bind(this));                                                                 // 15398
}                                                                                                                      // 15399
                                                                                                                       // 15400
var DIRECTION_X = 0;                                                                                                   // 15401
var DIRECTION_Y = 1;                                                                                                   // 15402
                                                                                                                       // 15403
DrawerLayout.SIDES = {                                                                                                 // 15404
    LEFT   : 0,                                                                                                        // 15405
    TOP    : 1,                                                                                                        // 15406
    RIGHT  : 2,                                                                                                        // 15407
    BOTTOM : 3                                                                                                         // 15408
};                                                                                                                     // 15409
                                                                                                                       // 15410
DrawerLayout.DEFAULT_OPTIONS = {                                                                                       // 15411
    side: DrawerLayout.SIDES.LEFT,                                                                                     // 15412
    drawerLength : 0,                                                                                                  // 15413
    velocityThreshold : 0,                                                                                             // 15414
    positionThreshold : 0,                                                                                             // 15415
    transition : true                                                                                                  // 15416
};                                                                                                                     // 15417
                                                                                                                       // 15418
function _getDirectionFromSide(side) {                                                                                 // 15419
    var SIDES = DrawerLayout.SIDES;                                                                                    // 15420
    return (side === SIDES.LEFT || side === SIDES.RIGHT) ? DIRECTION_X : DIRECTION_Y;                                  // 15421
}                                                                                                                      // 15422
                                                                                                                       // 15423
function _getOrientationFromSide(side) {                                                                               // 15424
    var SIDES = DrawerLayout.SIDES;                                                                                    // 15425
    return (side === SIDES.LEFT || side === SIDES.TOP) ? 1 : -1;                                                       // 15426
}                                                                                                                      // 15427
                                                                                                                       // 15428
function _resolveNodeSize(node) {                                                                                      // 15429
    var options = this.options;                                                                                        // 15430
    var size;                                                                                                          // 15431
    if (options.drawerLength) size = options.drawerLength;                                                             // 15432
    else {                                                                                                             // 15433
        var nodeSize = node.getSize();                                                                                 // 15434
        size = nodeSize ? nodeSize[this._direction] : options.drawerLength;                                            // 15435
    }                                                                                                                  // 15436
    return this._orientation * size;                                                                                   // 15437
}                                                                                                                      // 15438
                                                                                                                       // 15439
function _handleUpdate(data) {                                                                                         // 15440
    var newPosition = this.getPosition() + data.delta;                                                                 // 15441
                                                                                                                       // 15442
    var MIN_LENGTH;                                                                                                    // 15443
    var MAX_LENGTH;                                                                                                    // 15444
    this._cachedLength = _resolveNodeSize.call(this, this.drawer);                                                     // 15445
                                                                                                                       // 15446
    if (this._orientation === 1){                                                                                      // 15447
        MIN_LENGTH = 0;                                                                                                // 15448
        MAX_LENGTH = this._cachedLength;                                                                               // 15449
    }                                                                                                                  // 15450
    else {                                                                                                             // 15451
        MIN_LENGTH = this._cachedLength;                                                                               // 15452
        MAX_LENGTH = 0;                                                                                                // 15453
    }                                                                                                                  // 15454
                                                                                                                       // 15455
    if (newPosition > MAX_LENGTH) newPosition = MAX_LENGTH;                                                            // 15456
    else if (newPosition < MIN_LENGTH) newPosition = MIN_LENGTH;                                                       // 15457
                                                                                                                       // 15458
    this.setPosition(newPosition);                                                                                     // 15459
}                                                                                                                      // 15460
                                                                                                                       // 15461
function _handleEnd(data) {                                                                                            // 15462
    var velocity = data.velocity;                                                                                      // 15463
    var position = this._orientation * this.getPosition();                                                             // 15464
    var options = this.options;                                                                                        // 15465
                                                                                                                       // 15466
    var MAX_LENGTH = this._orientation * this._cachedLength;                                                           // 15467
    var positionThreshold = options.positionThreshold || MAX_LENGTH / 2;                                               // 15468
    var velocityThreshold = options.velocityThreshold;                                                                 // 15469
                                                                                                                       // 15470
    if (options.transition instanceof Object)                                                                          // 15471
        options.transition.velocity = data.velocity;                                                                   // 15472
                                                                                                                       // 15473
    if (position === 0) {                                                                                              // 15474
        this._isOpen = false;                                                                                          // 15475
        return;                                                                                                        // 15476
    }                                                                                                                  // 15477
                                                                                                                       // 15478
    if (position === MAX_LENGTH) {                                                                                     // 15479
        this._isOpen = true;                                                                                           // 15480
        return;                                                                                                        // 15481
    }                                                                                                                  // 15482
                                                                                                                       // 15483
    var shouldToggle = Math.abs(velocity) > velocityThreshold || (!this._isOpen && position > positionThreshold) || (this._isOpen && position < positionThreshold);
    if (shouldToggle) this.toggle();                                                                                   // 15485
    else this.reset();                                                                                                 // 15486
}                                                                                                                      // 15487
                                                                                                                       // 15488
/**                                                                                                                    // 15489
 * Patches the DrawerLayout instance's options with the passed-in ones.                                                // 15490
 *                                                                                                                     // 15491
 * @method setOptions                                                                                                  // 15492
 * @param options {Object} options                                                                                     // 15493
 */                                                                                                                    // 15494
DrawerLayout.prototype.setOptions = function setOptions(options) {                                                     // 15495
    this._optionsManager.setOptions(options);                                                                          // 15496
    if (options.side !== undefined) {                                                                                  // 15497
        this._direction = _getDirectionFromSide(options.side);                                                         // 15498
        this._orientation = _getOrientationFromSide(options.side);                                                     // 15499
    }                                                                                                                  // 15500
};                                                                                                                     // 15501
                                                                                                                       // 15502
/**                                                                                                                    // 15503
 * Reveals the drawer with a transition                                                                                // 15504
 *   Emits an 'open' event when an opening transition has been committed to.                                           // 15505
 *                                                                                                                     // 15506
 * @method open                                                                                                        // 15507
 * @param [transition] {Boolean|Object} transition definition                                                          // 15508
 * @param [callback] {Function}         callback                                                                       // 15509
 */                                                                                                                    // 15510
DrawerLayout.prototype.open = function open(transition, callback) {                                                    // 15511
    if (transition instanceof Function) callback = transition;                                                         // 15512
    if (transition === undefined) transition = this.options.transition;                                                // 15513
    this._cachedLength = _resolveNodeSize.call(this, this.drawer);                                                     // 15514
    this.setPosition(this._cachedLength, transition, callback);                                                        // 15515
    if (!this._isOpen) {                                                                                               // 15516
        this._isOpen = true;                                                                                           // 15517
        this._eventOutput.emit('open');                                                                                // 15518
    }                                                                                                                  // 15519
};                                                                                                                     // 15520
                                                                                                                       // 15521
/**                                                                                                                    // 15522
 * Conceals the drawer with a transition                                                                               // 15523
 *   Emits a 'close' event when an closing transition has been committed to.                                           // 15524
 *                                                                                                                     // 15525
 * @method close                                                                                                       // 15526
 * @param [transition] {Boolean|Object} transition definition                                                          // 15527
 * @param [callback] {Function}         callback                                                                       // 15528
 */                                                                                                                    // 15529
DrawerLayout.prototype.close = function close(transition, callback) {                                                  // 15530
    if (transition instanceof Function) callback = transition;                                                         // 15531
    if (transition === undefined) transition = this.options.transition;                                                // 15532
    this.setPosition(0, transition, callback);                                                                         // 15533
    if (this._isOpen){                                                                                                 // 15534
        this._isOpen = false;                                                                                          // 15535
        this._eventOutput.emit('close');                                                                               // 15536
    }                                                                                                                  // 15537
};                                                                                                                     // 15538
                                                                                                                       // 15539
/**                                                                                                                    // 15540
 * Sets the position in pixels for the content's displacement                                                          // 15541
 *                                                                                                                     // 15542
 * @method setPosition                                                                                                 // 15543
 * @param position {Number}             position                                                                       // 15544
 * @param [transition] {Boolean|Object} transition definition                                                          // 15545
 * @param [callback] {Function}         callback                                                                       // 15546
 */                                                                                                                    // 15547
DrawerLayout.prototype.setPosition = function setPosition(position, transition, callback) {                            // 15548
    if (this._position.isActive()) this._position.halt();                                                              // 15549
    this._position.set(position, transition, callback);                                                                // 15550
};                                                                                                                     // 15551
                                                                                                                       // 15552
/**                                                                                                                    // 15553
 * Gets the position in pixels for the content's displacement                                                          // 15554
 *                                                                                                                     // 15555
 * @method getPosition                                                                                                 // 15556
 * @return position {Number} position                                                                                  // 15557
 */                                                                                                                    // 15558
DrawerLayout.prototype.getPosition = function getPosition() {                                                          // 15559
    return this._position.get();                                                                                       // 15560
};                                                                                                                     // 15561
                                                                                                                       // 15562
/**                                                                                                                    // 15563
 * Sets the progress (between 0 and 1) for the content's displacement                                                  // 15564
 *                                                                                                                     // 15565
 * @method setProgress                                                                                                 // 15566
 * @param progress {Number}             position                                                                       // 15567
 * @param [transition] {Boolean|Object} transition definition                                                          // 15568
 * @param [callback] {Function}         callback                                                                       // 15569
 */                                                                                                                    // 15570
DrawerLayout.prototype.setProgress = function setProgress(progress, transition, callback) {                            // 15571
    return this._position.set(progress * this._cachedLength, transition, callback);                                    // 15572
};                                                                                                                     // 15573
                                                                                                                       // 15574
/**                                                                                                                    // 15575
 * Gets the progress (between 0 and 1) for the content's displacement                                                  // 15576
 *                                                                                                                     // 15577
 * @method getProgress                                                                                                 // 15578
 * @return position {Number} position                                                                                  // 15579
 */                                                                                                                    // 15580
DrawerLayout.prototype.getProgress = function getProgress() {                                                          // 15581
    return this._position.get() / this._cachedLength;                                                                  // 15582
};                                                                                                                     // 15583
                                                                                                                       // 15584
/**                                                                                                                    // 15585
 * Toggles between open and closed states                                                                              // 15586
 *                                                                                                                     // 15587
 * @method toggle                                                                                                      // 15588
 * @param [transition] {Boolean|Object} transition definition                                                          // 15589
 */                                                                                                                    // 15590
DrawerLayout.prototype.toggle = function toggle(transition) {                                                          // 15591
    if (this._isOpen) this.close(transition);                                                                          // 15592
    else this.open(transition);                                                                                        // 15593
};                                                                                                                     // 15594
                                                                                                                       // 15595
/**                                                                                                                    // 15596
 * Resets to last state of being open or closed                                                                        // 15597
 *                                                                                                                     // 15598
 * @method reset                                                                                                       // 15599
 * @param [transition] {Boolean|Object} transition definition                                                          // 15600
 */                                                                                                                    // 15601
DrawerLayout.prototype.reset = function reset(transition) {                                                            // 15602
    if (this._isOpen) this.open(transition);                                                                           // 15603
    else this.close(transition);                                                                                       // 15604
};                                                                                                                     // 15605
                                                                                                                       // 15606
/**                                                                                                                    // 15607
 * Returns if drawer is committed to being open or closed                                                              // 15608
 *                                                                                                                     // 15609
 * @method isOpen                                                                                                      // 15610
 * @return {Boolean}                                                                                                   // 15611
 */                                                                                                                    // 15612
DrawerLayout.prototype.isOpen = function isOpen(transition) {                                                          // 15613
    return this._isOpen;                                                                                               // 15614
};                                                                                                                     // 15615
                                                                                                                       // 15616
/**                                                                                                                    // 15617
 * Generates a Render Spec from the contents of this component                                                         // 15618
 *                                                                                                                     // 15619
 * @private                                                                                                            // 15620
 * @method render                                                                                                      // 15621
 * @return {Spec}                                                                                                      // 15622
 */                                                                                                                    // 15623
DrawerLayout.prototype.render = function render() {                                                                    // 15624
    var position = this.getPosition();                                                                                 // 15625
                                                                                                                       // 15626
    // clamp transition on close                                                                                       // 15627
    if (!this._isOpen && (position < 0 && this._orientation === 1) || (position > 0 && this._orientation === -1)) {    // 15628
        position = 0;                                                                                                  // 15629
        this.setPosition(position);                                                                                    // 15630
    }                                                                                                                  // 15631
                                                                                                                       // 15632
    var contentTransform = (this._direction === DIRECTION_X)                                                           // 15633
        ? Transform.translate(position, 0, 0)                                                                          // 15634
        : Transform.translate(0, position, 0);                                                                         // 15635
                                                                                                                       // 15636
    return [                                                                                                           // 15637
        {                                                                                                              // 15638
            transform : Transform.behind,                                                                              // 15639
            target: this.drawer.render()                                                                               // 15640
        },                                                                                                             // 15641
        {                                                                                                              // 15642
            transform: contentTransform,                                                                               // 15643
            target: this.content.render()                                                                              // 15644
        }                                                                                                              // 15645
    ];                                                                                                                 // 15646
};                                                                                                                     // 15647
                                                                                                                       // 15648
module.exports = DrawerLayout;                                                                                         // 15649
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../transitions/Transitionable":88}],100:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15651
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15652
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15653
 *                                                                                                                     // 15654
 * Owner: felix@famo.us                                                                                                // 15655
 * @license MPL 2.0                                                                                                    // 15656
 * @copyright Famous Industries, Inc. 2014                                                                             // 15657
 */                                                                                                                    // 15658
                                                                                                                       // 15659
var CachedMap = require('../transitions/CachedMap');                                                                   // 15660
var Entity = require('../core/Entity');                                                                                // 15661
var EventHandler = require('../core/EventHandler');                                                                    // 15662
var Transform = require('../core/Transform');                                                                          // 15663
var RenderController = require('./RenderController');                                                                  // 15664
                                                                                                                       // 15665
/**                                                                                                                    // 15666
 * Container which handles swapping renderables from the edge of its parent context.                                   // 15667
 * @class EdgeSwapper                                                                                                  // 15668
 * @constructor                                                                                                        // 15669
 * @param {Options} [options] An object of configurable options.                                                       // 15670
 *   Takes the same options as RenderController.                                                                       // 15671
 * @uses RenderController                                                                                              // 15672
 */                                                                                                                    // 15673
function EdgeSwapper(options) {                                                                                        // 15674
    this._currentTarget = null;                                                                                        // 15675
    this._size = [undefined, undefined];                                                                               // 15676
                                                                                                                       // 15677
    this._controller = new RenderController(options);                                                                  // 15678
    this._controller.inTransformFrom(CachedMap.create(_transformMap.bind(this, 0.0001)));                              // 15679
    this._controller.outTransformFrom(CachedMap.create(_transformMap.bind(this, -0.0001)));                            // 15680
                                                                                                                       // 15681
    this._eventInput = new EventHandler();                                                                             // 15682
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 15683
                                                                                                                       // 15684
    this._entityId = Entity.register(this);                                                                            // 15685
    if (options) this.setOptions(options);                                                                             // 15686
}                                                                                                                      // 15687
                                                                                                                       // 15688
function _transformMap(zMax, progress) {                                                                               // 15689
    return Transform.translate(this._size[0] * (1 - progress), 0, zMax * (1 - progress));                              // 15690
}                                                                                                                      // 15691
                                                                                                                       // 15692
/**                                                                                                                    // 15693
 * Displays the passed-in content with the EdgeSwapper instance's default transition.                                  // 15694
 *                                                                                                                     // 15695
 * @method show                                                                                                        // 15696
 * @param {Object} content The renderable you want to display.                                                         // 15697
 */                                                                                                                    // 15698
EdgeSwapper.prototype.show = function show(content) {                                                                  // 15699
    // stop sending input to old target                                                                                // 15700
    if (this._currentTarget) this._eventInput.unpipe(this._currentTarget);                                             // 15701
                                                                                                                       // 15702
    this._currentTarget = content;                                                                                     // 15703
                                                                                                                       // 15704
    // start sending input to new target                                                                               // 15705
    if (this._currentTarget && this._currentTarget.trigger) this._eventInput.pipe(this._currentTarget);                // 15706
                                                                                                                       // 15707
    this._controller.show.apply(this._controller, arguments);                                                          // 15708
};                                                                                                                     // 15709
                                                                                                                       // 15710
/**                                                                                                                    // 15711
 * Patches the EdgeSwapper instance's options with the passed-in ones.                                                 // 15712
 *                                                                                                                     // 15713
 * @method setOptions                                                                                                  // 15714
 * @param {Options} options An object of configurable options for the Edgeswapper instance.                            // 15715
 */                                                                                                                    // 15716
EdgeSwapper.prototype.setOptions = function setOptions(options) {                                                      // 15717
    this._controller.setOptions(options);                                                                              // 15718
};                                                                                                                     // 15719
                                                                                                                       // 15720
/**                                                                                                                    // 15721
 * Generate a render spec from the contents of this component.                                                         // 15722
 *                                                                                                                     // 15723
 * @private                                                                                                            // 15724
 * @method render                                                                                                      // 15725
 * @return {number} Render spec for this component                                                                     // 15726
 */                                                                                                                    // 15727
EdgeSwapper.prototype.render = function render() {                                                                     // 15728
    return this._entityId;                                                                                             // 15729
};                                                                                                                     // 15730
                                                                                                                       // 15731
/**                                                                                                                    // 15732
 * Apply changes from this component to the corresponding document element.                                            // 15733
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 15734
 * and matrix transforms.                                                                                              // 15735
 *                                                                                                                     // 15736
 * @private                                                                                                            // 15737
 * @method commit                                                                                                      // 15738
 * @param {Context} context commit context                                                                             // 15739
 */                                                                                                                    // 15740
EdgeSwapper.prototype.commit = function commit(context) {                                                              // 15741
    this._size[0] = context.size[0];                                                                                   // 15742
    this._size[1] = context.size[1];                                                                                   // 15743
                                                                                                                       // 15744
    return {                                                                                                           // 15745
        transform: context.transform,                                                                                  // 15746
        opacity: context.opacity,                                                                                      // 15747
        origin: context.origin,                                                                                        // 15748
        size: context.size,                                                                                            // 15749
        target: this._controller.render()                                                                              // 15750
    };                                                                                                                 // 15751
};                                                                                                                     // 15752
                                                                                                                       // 15753
module.exports = EdgeSwapper;                                                                                          // 15754
},{"../core/Entity":5,"../core/EventHandler":7,"../core/Transform":15,"../transitions/CachedMap":83,"./RenderController":106}],101:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15756
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15757
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15758
 *                                                                                                                     // 15759
 * Owner: mike@famo.us                                                                                                 // 15760
 * @license MPL 2.0                                                                                                    // 15761
 * @copyright Famous Industries, Inc. 2014                                                                             // 15762
 */                                                                                                                    // 15763
                                                                                                                       // 15764
var Entity = require('../core/Entity');                                                                                // 15765
var Transform = require('../core/Transform');                                                                          // 15766
var OptionsManager = require('../core/OptionsManager');                                                                // 15767
var EventHandler = require('../core/EventHandler');                                                                    // 15768
var Transitionable = require('../transitions/Transitionable');                                                         // 15769
                                                                                                                       // 15770
/**                                                                                                                    // 15771
 * A layout which divides a context into sections based on a proportion                                                // 15772
 *   of the total sum of ratios.  FlexibleLayout can either lay renderables                                            // 15773
 *   out vertically or horizontally.                                                                                   // 15774
 * @class FlexibleLayout                                                                                               // 15775
 * @constructor                                                                                                        // 15776
 * @param {Options} [options] An object of configurable options.                                                       // 15777
 * @param {Number} [options.direction=0] Direction the FlexibleLayout instance should lay out renderables.             // 15778
 * @param {Transition} [options.transition=false] The transiton that controls the FlexibleLayout instance's reflow.    // 15779
 * @param {Ratios} [options.ratios=[]] The proportions for the renderables to maintain                                 // 15780
 */                                                                                                                    // 15781
function FlexibleLayout(options) {                                                                                     // 15782
    this.options = Object.create(FlexibleLayout.DEFAULT_OPTIONS);                                                      // 15783
    this.optionsManager = new OptionsManager(this.options);                                                            // 15784
    if (options) this.setOptions(options);                                                                             // 15785
                                                                                                                       // 15786
    this.id = Entity.register(this);                                                                                   // 15787
                                                                                                                       // 15788
    this._ratios = new Transitionable(this.options.ratios);                                                            // 15789
    this._nodes = [];                                                                                                  // 15790
    this._size = [0, 0];                                                                                               // 15791
                                                                                                                       // 15792
    this._cachedDirection = null;                                                                                      // 15793
    this._cachedLengths = [];                                                                                          // 15794
    this._cachedTransforms = null;                                                                                     // 15795
    this._ratiosDirty = false;                                                                                         // 15796
                                                                                                                       // 15797
    this._eventOutput = new EventHandler();                                                                            // 15798
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 15799
}                                                                                                                      // 15800
                                                                                                                       // 15801
FlexibleLayout.DIRECTION_X = 0;                                                                                        // 15802
FlexibleLayout.DIRECTION_Y = 1;                                                                                        // 15803
                                                                                                                       // 15804
FlexibleLayout.DEFAULT_OPTIONS = {                                                                                     // 15805
    direction: FlexibleLayout.DIRECTION_X,                                                                             // 15806
    transition: false,                                                                                                 // 15807
    ratios : []                                                                                                        // 15808
};                                                                                                                     // 15809
                                                                                                                       // 15810
function _reflow(ratios, length, direction) {                                                                          // 15811
    var currTransform;                                                                                                 // 15812
    var translation = 0;                                                                                               // 15813
    var flexLength = length;                                                                                           // 15814
    var ratioSum = 0;                                                                                                  // 15815
    var ratio;                                                                                                         // 15816
    var node;                                                                                                          // 15817
    var i;                                                                                                             // 15818
                                                                                                                       // 15819
    this._cachedLengths = [];                                                                                          // 15820
    this._cachedTransforms = [];                                                                                       // 15821
                                                                                                                       // 15822
    for (i = 0; i < ratios.length; i++){                                                                               // 15823
        ratio = ratios[i];                                                                                             // 15824
        node = this._nodes[i];                                                                                         // 15825
                                                                                                                       // 15826
        if (typeof ratio !== 'number')                                                                                 // 15827
            flexLength -= node.getSize()[direction] || 0;                                                              // 15828
        else                                                                                                           // 15829
            ratioSum += ratio;                                                                                         // 15830
    }                                                                                                                  // 15831
                                                                                                                       // 15832
    for (i = 0; i < ratios.length; i++) {                                                                              // 15833
        node = this._nodes[i];                                                                                         // 15834
        ratio = ratios[i];                                                                                             // 15835
                                                                                                                       // 15836
        length = (typeof ratio === 'number')                                                                           // 15837
            ? flexLength * ratio / ratioSum                                                                            // 15838
            : node.getSize()[direction];                                                                               // 15839
                                                                                                                       // 15840
        currTransform = (direction === FlexibleLayout.DIRECTION_X)                                                     // 15841
            ? Transform.translate(translation, 0, 0)                                                                   // 15842
            : Transform.translate(0, translation, 0);                                                                  // 15843
                                                                                                                       // 15844
        this._cachedTransforms.push(currTransform);                                                                    // 15845
        this._cachedLengths.push(length);                                                                              // 15846
                                                                                                                       // 15847
        translation += length;                                                                                         // 15848
    }                                                                                                                  // 15849
}                                                                                                                      // 15850
                                                                                                                       // 15851
function _trueSizedDirty(ratios, direction) {                                                                          // 15852
    for (var i = 0; i < ratios.length; i++) {                                                                          // 15853
        if (typeof ratios[i] !== 'number') {                                                                           // 15854
            if (this._nodes[i].getSize()[direction] !== this._cachedLengths[i])                                        // 15855
                return true;                                                                                           // 15856
        }                                                                                                              // 15857
    }                                                                                                                  // 15858
                                                                                                                       // 15859
    return false;                                                                                                      // 15860
}                                                                                                                      // 15861
                                                                                                                       // 15862
/**                                                                                                                    // 15863
 * Generate a render spec from the contents of this component.                                                         // 15864
 *                                                                                                                     // 15865
 * @private                                                                                                            // 15866
 * @method render                                                                                                      // 15867
 * @return {Object} Render spec for this component                                                                     // 15868
 */                                                                                                                    // 15869
FlexibleLayout.prototype.render = function render() {                                                                  // 15870
    return this.id;                                                                                                    // 15871
};                                                                                                                     // 15872
                                                                                                                       // 15873
/**                                                                                                                    // 15874
 * Patches the FlexibleLayouts instance's options with the passed-in ones.                                             // 15875
 *                                                                                                                     // 15876
 * @method setOptions                                                                                                  // 15877
 * @param {Options} options An object of configurable options for the FlexibleLayout instance.                         // 15878
 */                                                                                                                    // 15879
FlexibleLayout.prototype.setOptions = function setOptions(options) {                                                   // 15880
    this.optionsManager.setOptions(options);                                                                           // 15881
};                                                                                                                     // 15882
                                                                                                                       // 15883
/**                                                                                                                    // 15884
 * Sets the collection of renderables under the FlexibleLayout instance's control.  Also sets                          // 15885
 * the associated ratio values for sizing the renderables if given.                                                    // 15886
 *                                                                                                                     // 15887
 * @method sequenceFrom                                                                                                // 15888
 * @param {Array} sequence An array of renderables.                                                                    // 15889
 */                                                                                                                    // 15890
FlexibleLayout.prototype.sequenceFrom = function sequenceFrom(sequence) {                                              // 15891
    this._nodes = sequence;                                                                                            // 15892
                                                                                                                       // 15893
    if (this._ratios.get().length === 0) {                                                                             // 15894
        var ratios = [];                                                                                               // 15895
        for (var i = 0; i < this._nodes.length; i++) ratios.push(1);                                                   // 15896
        this.setRatios(ratios);                                                                                        // 15897
    }                                                                                                                  // 15898
};                                                                                                                     // 15899
                                                                                                                       // 15900
/**                                                                                                                    // 15901
 * Sets the associated ratio values for sizing the renderables.                                                        // 15902
 *                                                                                                                     // 15903
 * @method setRatios                                                                                                   // 15904
 * @param {Array} ratios Array of ratios corresponding to the percentage sizes each renderable should be               // 15905
 */                                                                                                                    // 15906
FlexibleLayout.prototype.setRatios = function setRatios(ratios, transition, callback) {                                // 15907
    if (transition === undefined) transition = this.options.transition;                                                // 15908
    var currRatios = this._ratios;                                                                                     // 15909
    if (currRatios.get().length === 0) transition = undefined;                                                         // 15910
    if (currRatios.isActive()) currRatios.halt();                                                                      // 15911
    currRatios.set(ratios, transition, callback);                                                                      // 15912
    this._ratiosDirty = true;                                                                                          // 15913
};                                                                                                                     // 15914
                                                                                                                       // 15915
/**                                                                                                                    // 15916
 * Gets the size of the context the FlexibleLayout exists within.                                                      // 15917
 *                                                                                                                     // 15918
 * @method getSize                                                                                                     // 15919
 *                                                                                                                     // 15920
 * @return {Array} Size of the FlexibleLayout in pixels [width, height]                                                // 15921
 */                                                                                                                    // 15922
FlexibleLayout.prototype.getSize = function getSize() {                                                                // 15923
    return this._size;                                                                                                 // 15924
};                                                                                                                     // 15925
                                                                                                                       // 15926
/**                                                                                                                    // 15927
 * Apply changes from this component to the corresponding document element.                                            // 15928
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 15929
 * and matrix transforms.                                                                                              // 15930
 *                                                                                                                     // 15931
 * @private                                                                                                            // 15932
 * @method commit                                                                                                      // 15933
 * @param {Context} context commit context                                                                             // 15934
 */                                                                                                                    // 15935
FlexibleLayout.prototype.commit = function commit(context) {                                                           // 15936
    var parentSize = context.size;                                                                                     // 15937
    var parentTransform = context.transform;                                                                           // 15938
    var parentOrigin = context.origin;                                                                                 // 15939
    var parentOpacity = context.opacity;                                                                               // 15940
                                                                                                                       // 15941
    var ratios = this._ratios.get();                                                                                   // 15942
    var direction = this.options.direction;                                                                            // 15943
    var length = parentSize[direction];                                                                                // 15944
    var size;                                                                                                          // 15945
                                                                                                                       // 15946
    if (length !== this._size[direction] || this._ratiosDirty || this._ratios.isActive() || direction !== this._cachedDirection || _trueSizedDirty.call(this, ratios, direction)) {
        _reflow.call(this, ratios, length, direction);                                                                 // 15948
                                                                                                                       // 15949
        if (length !== this._size[direction]) {                                                                        // 15950
            this._size[0] = parentSize[0];                                                                             // 15951
            this._size[1] = parentSize[1];                                                                             // 15952
        }                                                                                                              // 15953
                                                                                                                       // 15954
        if (direction !== this._cachedDirection) this._cachedDirection = direction;                                    // 15955
        if (this._ratiosDirty) this._ratiosDirty = false;                                                              // 15956
    }                                                                                                                  // 15957
                                                                                                                       // 15958
    var result = [];                                                                                                   // 15959
    for (var i = 0; i < ratios.length; i++) {                                                                          // 15960
        size = [undefined, undefined];                                                                                 // 15961
        length = this._cachedLengths[i];                                                                               // 15962
        size[direction] = length;                                                                                      // 15963
        result.push({                                                                                                  // 15964
            transform : this._cachedTransforms[i],                                                                     // 15965
            size: size,                                                                                                // 15966
            target : this._nodes[i].render()                                                                           // 15967
        });                                                                                                            // 15968
    }                                                                                                                  // 15969
                                                                                                                       // 15970
    if (parentSize && (parentOrigin[0] !== 0 && parentOrigin[1] !== 0))                                                // 15971
        parentTransform = Transform.moveThen([-parentSize[0]*parentOrigin[0], -parentSize[1]*parentOrigin[1], 0], parentTransform);
                                                                                                                       // 15973
    return {                                                                                                           // 15974
        transform: parentTransform,                                                                                    // 15975
        size: parentSize,                                                                                              // 15976
        opacity: parentOpacity,                                                                                        // 15977
        target: result                                                                                                 // 15978
    };                                                                                                                 // 15979
};                                                                                                                     // 15980
                                                                                                                       // 15981
module.exports = FlexibleLayout;                                                                                       // 15982
},{"../core/Entity":5,"../core/EventHandler":7,"../core/OptionsManager":10,"../core/Transform":15,"../transitions/Transitionable":88}],102:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15984
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15985
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15986
 *                                                                                                                     // 15987
 * Owner: felix@famo.us                                                                                                // 15988
 * @license MPL 2.0                                                                                                    // 15989
 * @copyright Famous Industries, Inc. 2014                                                                             // 15990
 */                                                                                                                    // 15991
                                                                                                                       // 15992
var Transform = require('../core/Transform');                                                                          // 15993
var Transitionable = require('../transitions/Transitionable');                                                         // 15994
var RenderNode = require('../core/RenderNode');                                                                        // 15995
var OptionsManager = require('../core/OptionsManager');                                                                // 15996
                                                                                                                       // 15997
/**                                                                                                                    // 15998
 * Allows you to link two renderables as front and back sides that can be                                              // 15999
 *  'flipped' back and forth along a chosen axis. Rendering optimizations are                                          // 16000
 *  automatically handled.                                                                                             // 16001
 *                                                                                                                     // 16002
 * @class Flipper                                                                                                      // 16003
 * @constructor                                                                                                        // 16004
 * @param {Options} [options] An object of options.                                                                    // 16005
 * @param {Transition} [options.transition=true] The transition executed when flipping your Flipper instance.          // 16006
 */                                                                                                                    // 16007
function Flipper(options) {                                                                                            // 16008
    this.options = Object.create(Flipper.DEFAULT_OPTIONS);                                                             // 16009
    this._optionsManager = new OptionsManager(this.options);                                                           // 16010
    if (options) this.setOptions(options);                                                                             // 16011
                                                                                                                       // 16012
    this.angle = new Transitionable(0);                                                                                // 16013
                                                                                                                       // 16014
    this.frontNode = undefined;                                                                                        // 16015
    this.backNode = undefined;                                                                                         // 16016
                                                                                                                       // 16017
    this.flipped = false;                                                                                              // 16018
}                                                                                                                      // 16019
                                                                                                                       // 16020
Flipper.DIRECTION_X = 0;                                                                                               // 16021
Flipper.DIRECTION_Y = 1;                                                                                               // 16022
                                                                                                                       // 16023
var SEPERATION_LENGTH = 1;                                                                                             // 16024
                                                                                                                       // 16025
Flipper.DEFAULT_OPTIONS = {                                                                                            // 16026
    transition: true,                                                                                                  // 16027
    direction: Flipper.DIRECTION_X                                                                                     // 16028
};                                                                                                                     // 16029
                                                                                                                       // 16030
/**                                                                                                                    // 16031
 * Toggles the rotation between the front and back renderables                                                         // 16032
 *                                                                                                                     // 16033
 * @method flip                                                                                                        // 16034
 * @param {Object} [transition] Transition definition                                                                  // 16035
 * @param {Function} [callback] Callback                                                                               // 16036
 */                                                                                                                    // 16037
Flipper.prototype.flip = function flip(transition, callback) {                                                         // 16038
    var angle = this.flipped ? 0 : Math.PI;                                                                            // 16039
    this.setAngle(angle, transition, callback);                                                                        // 16040
    this.flipped = !this.flipped;                                                                                      // 16041
};                                                                                                                     // 16042
                                                                                                                       // 16043
/**                                                                                                                    // 16044
 * Basic setter to the angle                                                                                           // 16045
 *                                                                                                                     // 16046
 * @method setAngle                                                                                                    // 16047
 * @param {Number} angle                                                                                               // 16048
 * @param {Object} [transition] Transition definition                                                                  // 16049
 * @param {Function} [callback] Callback                                                                               // 16050
 */                                                                                                                    // 16051
Flipper.prototype.setAngle = function setAngle(angle, transition, callback) {                                          // 16052
    if (transition === undefined) transition = this.options.transition;                                                // 16053
    if (this.angle.isActive()) this.angle.halt();                                                                      // 16054
    this.angle.set(angle, transition, callback);                                                                       // 16055
};                                                                                                                     // 16056
                                                                                                                       // 16057
/**                                                                                                                    // 16058
 * Patches the Flipper instance's options with the passed-in ones.                                                     // 16059
 *                                                                                                                     // 16060
 * @method setOptions                                                                                                  // 16061
 * @param {Options} options An object of configurable options for the Flipper instance.                                // 16062
 */                                                                                                                    // 16063
Flipper.prototype.setOptions = function setOptions(options) {                                                          // 16064
    return this._optionsManager.setOptions(options);                                                                   // 16065
};                                                                                                                     // 16066
                                                                                                                       // 16067
/**                                                                                                                    // 16068
 * Adds the passed-in renderable to the view associated with the 'front' of the Flipper instance.                      // 16069
 *                                                                                                                     // 16070
 * @method setFront                                                                                                    // 16071
 * @chainable                                                                                                          // 16072
 * @param {Object} node The renderable you want to add to the front.                                                   // 16073
 */                                                                                                                    // 16074
Flipper.prototype.setFront = function setFront(node) {                                                                 // 16075
    this.frontNode = node;                                                                                             // 16076
};                                                                                                                     // 16077
                                                                                                                       // 16078
/**                                                                                                                    // 16079
 * Adds the passed-in renderable to the view associated with the 'back' of the Flipper instance.                       // 16080
 *                                                                                                                     // 16081
 * @method setBack                                                                                                     // 16082
 * @chainable                                                                                                          // 16083
 * @param {Object} node The renderable you want to add to the back.                                                    // 16084
 */                                                                                                                    // 16085
Flipper.prototype.setBack = function setBack(node) {                                                                   // 16086
    this.backNode = node;                                                                                              // 16087
};                                                                                                                     // 16088
                                                                                                                       // 16089
/**                                                                                                                    // 16090
 * Generate a render spec from the contents of this component.                                                         // 16091
 *                                                                                                                     // 16092
 * @private                                                                                                            // 16093
 * @method render                                                                                                      // 16094
 * @return {Number} Render spec for this component                                                                     // 16095
 */                                                                                                                    // 16096
Flipper.prototype.render = function render() {                                                                         // 16097
    var angle = this.angle.get();                                                                                      // 16098
                                                                                                                       // 16099
    var frontTransform;                                                                                                // 16100
    var backTransform;                                                                                                 // 16101
                                                                                                                       // 16102
    if (this.options.direction === Flipper.DIRECTION_X) {                                                              // 16103
        frontTransform = Transform.rotateY(angle);                                                                     // 16104
        backTransform = Transform.rotateY(angle + Math.PI);                                                            // 16105
    }                                                                                                                  // 16106
    else {                                                                                                             // 16107
        frontTransform = Transform.rotateX(angle);                                                                     // 16108
        backTransform = Transform.rotateX(angle + Math.PI);                                                            // 16109
    }                                                                                                                  // 16110
                                                                                                                       // 16111
    var result = [];                                                                                                   // 16112
    if (this.frontNode){                                                                                               // 16113
        result.push({                                                                                                  // 16114
            transform: frontTransform,                                                                                 // 16115
            target: this.frontNode.render()                                                                            // 16116
        });                                                                                                            // 16117
    }                                                                                                                  // 16118
                                                                                                                       // 16119
    if (this.backNode){                                                                                                // 16120
        result.push({                                                                                                  // 16121
            transform: Transform.moveThen([0, 0, SEPERATION_LENGTH], backTransform),                                   // 16122
            target: this.backNode.render()                                                                             // 16123
        });                                                                                                            // 16124
    }                                                                                                                  // 16125
                                                                                                                       // 16126
    return result;                                                                                                     // 16127
};                                                                                                                     // 16128
                                                                                                                       // 16129
module.exports = Flipper;                                                                                              // 16130
},{"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../transitions/Transitionable":88}],103:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16132
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16133
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16134
 *                                                                                                                     // 16135
 * Owner: felix@famo.us                                                                                                // 16136
 * @license MPL 2.0                                                                                                    // 16137
 * @copyright Famous Industries, Inc. 2014                                                                             // 16138
 */                                                                                                                    // 16139
                                                                                                                       // 16140
var Entity = require('../core/Entity');                                                                                // 16141
var RenderNode = require('../core/RenderNode');                                                                        // 16142
var Transform = require('../core/Transform');                                                                          // 16143
var ViewSequence = require('../core/ViewSequence');                                                                    // 16144
var EventHandler = require('../core/EventHandler');                                                                    // 16145
var Modifier = require('../core/Modifier');                                                                            // 16146
var OptionsManager = require('../core/OptionsManager');                                                                // 16147
var Transitionable = require('../transitions/Transitionable');                                                         // 16148
var TransitionableTransform = require('../transitions/TransitionableTransform');                                       // 16149
                                                                                                                       // 16150
/**                                                                                                                    // 16151
 * A layout which divides a context into several evenly-sized grid cells.                                              // 16152
 *   If dimensions are provided, the grid is evenly subdivided with children                                           // 16153
 *   cells representing their own context, otherwise the cellSize property is used to compute                          // 16154
 *   dimensions so that items of cellSize will fit.                                                                    // 16155
 * @class GridLayout                                                                                                   // 16156
 * @constructor                                                                                                        // 16157
 * @param {Options} [options] An object of configurable options.                                                       // 16158
 * @param {Array.Number} [options.dimensions=[1, 1]] A two value array which specifies the amount of columns           // 16159
 * and rows in your Gridlayout instance.                                                                               // 16160
 * @param {Array.Number} [options.gutterSize=[0, 0]] A two-value array which specifies size of the                     // 16161
 * horizontal and vertical gutters between items in the grid layout.                                                   // 16162
 * @param {Transition} [options.transition=false] The transiton that controls the Gridlayout instance's reflow.        // 16163
 */                                                                                                                    // 16164
function GridLayout(options) {                                                                                         // 16165
    this.options = Object.create(GridLayout.DEFAULT_OPTIONS);                                                          // 16166
    this.optionsManager = new OptionsManager(this.options);                                                            // 16167
    if (options) this.setOptions(options);                                                                             // 16168
                                                                                                                       // 16169
    this.id = Entity.register(this);                                                                                   // 16170
                                                                                                                       // 16171
    this._modifiers = [];                                                                                              // 16172
    this._states = [];                                                                                                 // 16173
    this._contextSizeCache = [0, 0];                                                                                   // 16174
    this._dimensionsCache = [0, 0];                                                                                    // 16175
    this._activeCount = 0;                                                                                             // 16176
                                                                                                                       // 16177
    this._eventOutput = new EventHandler();                                                                            // 16178
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 16179
}                                                                                                                      // 16180
                                                                                                                       // 16181
function _reflow(size, cols, rows) {                                                                                   // 16182
    var usableSize = [size[0], size[1]];                                                                               // 16183
    usableSize[0] -= this.options.gutterSize[0] * (cols - 1);                                                          // 16184
    usableSize[1] -= this.options.gutterSize[1] * (rows - 1);                                                          // 16185
                                                                                                                       // 16186
    var rowSize = Math.round(usableSize[1] / rows);                                                                    // 16187
    var colSize = Math.round(usableSize[0] / cols);                                                                    // 16188
                                                                                                                       // 16189
    var currY = 0;                                                                                                     // 16190
    var currX;                                                                                                         // 16191
    var currIndex = 0;                                                                                                 // 16192
    for (var i = 0; i < rows; i++) {                                                                                   // 16193
        currX = 0;                                                                                                     // 16194
        for (var j = 0; j < cols; j++) {                                                                               // 16195
            if (this._modifiers[currIndex] === undefined) {                                                            // 16196
                _createModifier.call(this, currIndex, [colSize, rowSize], [currX, currY, 0], 1);                       // 16197
            }                                                                                                          // 16198
            else {                                                                                                     // 16199
                _animateModifier.call(this, currIndex, [colSize, rowSize], [currX, currY, 0], 1);                      // 16200
            }                                                                                                          // 16201
                                                                                                                       // 16202
            currIndex++;                                                                                               // 16203
            currX += colSize + this.options.gutterSize[0];                                                             // 16204
        }                                                                                                              // 16205
                                                                                                                       // 16206
        currY += rowSize + this.options.gutterSize[1];                                                                 // 16207
    }                                                                                                                  // 16208
                                                                                                                       // 16209
    this._dimensionsCache = [this.options.dimensions[0], this.options.dimensions[1]];                                  // 16210
    this._contextSizeCache = [size[0], size[1]];                                                                       // 16211
                                                                                                                       // 16212
    this._activeCount = rows * cols;                                                                                   // 16213
                                                                                                                       // 16214
    for (i = this._activeCount ; i < this._modifiers.length; i++) _animateModifier.call(this, i, [Math.round(colSize), Math.round(rowSize)], [0, 0], 0);
                                                                                                                       // 16216
    this._eventOutput.emit('reflow');                                                                                  // 16217
}                                                                                                                      // 16218
                                                                                                                       // 16219
function _createModifier(index, size, position, opacity) {                                                             // 16220
    var transitionItem = {                                                                                             // 16221
        transform: new TransitionableTransform(Transform.translate.apply(null, position)),                             // 16222
        opacity: new Transitionable(opacity),                                                                          // 16223
        size: new Transitionable(size)                                                                                 // 16224
    };                                                                                                                 // 16225
                                                                                                                       // 16226
    var modifier = new Modifier({                                                                                      // 16227
        transform: transitionItem.transform,                                                                           // 16228
        opacity: transitionItem.opacity,                                                                               // 16229
        size: transitionItem.size                                                                                      // 16230
    });                                                                                                                // 16231
                                                                                                                       // 16232
    this._states[index] = transitionItem;                                                                              // 16233
    this._modifiers[index] = modifier;                                                                                 // 16234
                                                                                                                       // 16235
}                                                                                                                      // 16236
                                                                                                                       // 16237
function _animateModifier(index, size, position, opacity) {                                                            // 16238
    var currState = this._states[index];                                                                               // 16239
                                                                                                                       // 16240
    var currSize = currState.size;                                                                                     // 16241
    var currOpacity = currState.opacity;                                                                               // 16242
    var currTransform = currState.transform;                                                                           // 16243
                                                                                                                       // 16244
    var transition = this.options.transition;                                                                          // 16245
                                                                                                                       // 16246
    currTransform.halt();                                                                                              // 16247
    currOpacity.halt();                                                                                                // 16248
    currSize.halt();                                                                                                   // 16249
                                                                                                                       // 16250
    currTransform.setTranslate(position, transition);                                                                  // 16251
    currSize.set(size, transition);                                                                                    // 16252
    currOpacity.set(opacity, transition);                                                                              // 16253
}                                                                                                                      // 16254
                                                                                                                       // 16255
GridLayout.DEFAULT_OPTIONS = {                                                                                         // 16256
    dimensions: [1, 1],                                                                                                // 16257
    transition: false,                                                                                                 // 16258
    gutterSize: [0, 0]                                                                                                 // 16259
};                                                                                                                     // 16260
                                                                                                                       // 16261
/**                                                                                                                    // 16262
 * Generate a render spec from the contents of this component.                                                         // 16263
 *                                                                                                                     // 16264
 * @private                                                                                                            // 16265
 * @method render                                                                                                      // 16266
 * @return {Object} Render spec for this component                                                                     // 16267
 */                                                                                                                    // 16268
GridLayout.prototype.render = function render() {                                                                      // 16269
    return this.id;                                                                                                    // 16270
};                                                                                                                     // 16271
                                                                                                                       // 16272
/**                                                                                                                    // 16273
 * Patches the GridLayout instance's options with the passed-in ones.                                                  // 16274
 *                                                                                                                     // 16275
 * @method setOptions                                                                                                  // 16276
 * @param {Options} options An object of configurable options for the GridLayout instance.                             // 16277
 */                                                                                                                    // 16278
GridLayout.prototype.setOptions = function setOptions(options) {                                                       // 16279
    return this.optionsManager.setOptions(options);                                                                    // 16280
};                                                                                                                     // 16281
                                                                                                                       // 16282
/**                                                                                                                    // 16283
 * Sets the collection of renderables under the Gridlayout instance's control.                                         // 16284
 *                                                                                                                     // 16285
 * @method sequenceFrom                                                                                                // 16286
 * @param {Array|ViewSequence} sequence Either an array of renderables or a Famous viewSequence.                       // 16287
 */                                                                                                                    // 16288
GridLayout.prototype.sequenceFrom = function sequenceFrom(sequence) {                                                  // 16289
    if (sequence instanceof Array) sequence = new ViewSequence(sequence);                                              // 16290
    this.sequence = sequence;                                                                                          // 16291
};                                                                                                                     // 16292
                                                                                                                       // 16293
/**                                                                                                                    // 16294
 * Apply changes from this component to the corresponding document element.                                            // 16295
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 16296
 * and matrix transforms.                                                                                              // 16297
 *                                                                                                                     // 16298
 * @private                                                                                                            // 16299
 * @method commit                                                                                                      // 16300
 * @param {Context} context commit context                                                                             // 16301
 */                                                                                                                    // 16302
GridLayout.prototype.commit = function commit(context) {                                                               // 16303
    var transform = context.transform;                                                                                 // 16304
    var opacity = context.opacity;                                                                                     // 16305
    var origin = context.origin;                                                                                       // 16306
    var size = context.size;                                                                                           // 16307
                                                                                                                       // 16308
    var cols = this.options.dimensions[0];                                                                             // 16309
    var rows = this.options.dimensions[1];                                                                             // 16310
                                                                                                                       // 16311
    if (size[0] !== this._contextSizeCache[0] || size[1] !== this._contextSizeCache[1] || cols !== this._dimensionsCache[0] || rows !== this._dimensionsCache[1]) {
        _reflow.call(this, size, cols, rows);                                                                          // 16313
    }                                                                                                                  // 16314
                                                                                                                       // 16315
    var sequence = this.sequence;                                                                                      // 16316
    var result = [];                                                                                                   // 16317
    var currIndex = 0;                                                                                                 // 16318
    while (sequence && (currIndex < this._modifiers.length)) {                                                         // 16319
        var item = sequence.get();                                                                                     // 16320
        var modifier = this._modifiers[currIndex];                                                                     // 16321
        if (currIndex >= this._activeCount && this._states[currIndex].opacity.isActive()) {                            // 16322
            this._modifiers.splice(currIndex, 1);                                                                      // 16323
            this._states.splice(currIndex, 1);                                                                         // 16324
        }                                                                                                              // 16325
        if (item) {                                                                                                    // 16326
            result.push(                                                                                               // 16327
                modifier.modify({                                                                                      // 16328
                    origin: origin,                                                                                    // 16329
                    target: item.render()                                                                              // 16330
                })                                                                                                     // 16331
            );                                                                                                         // 16332
        }                                                                                                              // 16333
        sequence = sequence.getNext();                                                                                 // 16334
        currIndex++;                                                                                                   // 16335
    }                                                                                                                  // 16336
                                                                                                                       // 16337
    if (size) transform = Transform.moveThen([-size[0]*origin[0], -size[1]*origin[1], 0], transform);                  // 16338
    return {                                                                                                           // 16339
        transform: transform,                                                                                          // 16340
        opacity: opacity,                                                                                              // 16341
        size: size,                                                                                                    // 16342
        target: result                                                                                                 // 16343
    };                                                                                                                 // 16344
};                                                                                                                     // 16345
                                                                                                                       // 16346
module.exports = GridLayout;                                                                                           // 16347
},{"../core/Entity":5,"../core/EventHandler":7,"../core/Modifier":9,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../core/ViewSequence":17,"../transitions/Transitionable":88,"../transitions/TransitionableTransform":89}],104:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16349
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16350
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16351
 *                                                                                                                     // 16352
 * Owner: felix@famo.us                                                                                                // 16353
 * @license MPL 2.0                                                                                                    // 16354
 * @copyright Famous Industries, Inc. 2014                                                                             // 16355
 */                                                                                                                    // 16356
                                                                                                                       // 16357
var Entity = require('../core/Entity');                                                                                // 16358
var RenderNode = require('../core/RenderNode');                                                                        // 16359
var Transform = require('../core/Transform');                                                                          // 16360
var OptionsManager = require('../core/OptionsManager');                                                                // 16361
                                                                                                                       // 16362
/**                                                                                                                    // 16363
 * A layout which will arrange three renderables into a header and footer area of defined size,                        // 16364
  and a content area of flexible size.                                                                                 // 16365
 * @class HeaderFooterLayout                                                                                           // 16366
 * @constructor                                                                                                        // 16367
 * @param {Options} [options] An object of configurable options.                                                       // 16368
 * @param {Number} [options.direction=HeaderFooterLayout.DIRECTION_Y] A direction of HeaderFooterLayout.DIRECTION_X    // 16369
 * lays your HeaderFooterLayout instance horizontally, and a direction of HeaderFooterLayout.DIRECTION_Y               // 16370
 * lays it out vertically.                                                                                             // 16371
 * @param {Number} [options.headerSize=undefined]  The amount of pixels allocated to the header node                   // 16372
 * in the HeaderFooterLayout instance's direction.                                                                     // 16373
 * @param {Number} [options.footerSize=undefined] The amount of pixels allocated to the footer node                    // 16374
 * in the HeaderFooterLayout instance's direction.                                                                     // 16375
 */                                                                                                                    // 16376
function HeaderFooterLayout(options) {                                                                                 // 16377
    this.options = Object.create(HeaderFooterLayout.DEFAULT_OPTIONS);                                                  // 16378
    this._optionsManager = new OptionsManager(this.options);                                                           // 16379
    if (options) this.setOptions(options);                                                                             // 16380
                                                                                                                       // 16381
    this._entityId = Entity.register(this);                                                                            // 16382
                                                                                                                       // 16383
    this.header = new RenderNode();                                                                                    // 16384
    this.footer = new RenderNode();                                                                                    // 16385
    this.content = new RenderNode();                                                                                   // 16386
}                                                                                                                      // 16387
                                                                                                                       // 16388
/**                                                                                                                    // 16389
 *  When used as a value for your HeaderFooterLayout's direction option, causes it to lay out horizontally.            // 16390
 *                                                                                                                     // 16391
 *  @attribute DIRECTION_X                                                                                             // 16392
 *  @type Number                                                                                                       // 16393
 *  @static                                                                                                            // 16394
 *  @default 0                                                                                                         // 16395
 *  @protected                                                                                                         // 16396
 */                                                                                                                    // 16397
HeaderFooterLayout.DIRECTION_X = 0;                                                                                    // 16398
                                                                                                                       // 16399
/**                                                                                                                    // 16400
 *  When used as a value for your HeaderFooterLayout's direction option, causes it to lay out vertically.              // 16401
 *                                                                                                                     // 16402
 *  @attribute DIRECTION_Y                                                                                             // 16403
 *  @type Number                                                                                                       // 16404
 *  @static                                                                                                            // 16405
 *  @default 1                                                                                                         // 16406
 *  @protected                                                                                                         // 16407
 */                                                                                                                    // 16408
HeaderFooterLayout.DIRECTION_Y = 1;                                                                                    // 16409
                                                                                                                       // 16410
HeaderFooterLayout.DEFAULT_OPTIONS = {                                                                                 // 16411
    direction: HeaderFooterLayout.DIRECTION_Y,                                                                         // 16412
    headerSize: undefined,                                                                                             // 16413
    footerSize: undefined,                                                                                             // 16414
    defaultHeaderSize: 0,                                                                                              // 16415
    defaultFooterSize: 0                                                                                               // 16416
};                                                                                                                     // 16417
                                                                                                                       // 16418
/**                                                                                                                    // 16419
 * Generate a render spec from the contents of this component.                                                         // 16420
 *                                                                                                                     // 16421
 * @private                                                                                                            // 16422
 * @method render                                                                                                      // 16423
 * @return {Object} Render spec for this component                                                                     // 16424
 */                                                                                                                    // 16425
HeaderFooterLayout.prototype.render = function render() {                                                              // 16426
    return this._entityId;                                                                                             // 16427
};                                                                                                                     // 16428
                                                                                                                       // 16429
/**                                                                                                                    // 16430
 * Patches the HeaderFooterLayout instance's options with the passed-in ones.                                          // 16431
 *                                                                                                                     // 16432
 * @method setOptions                                                                                                  // 16433
 * @param {Options} options An object of configurable options for the HeaderFooterLayout instance.                     // 16434
 */                                                                                                                    // 16435
HeaderFooterLayout.prototype.setOptions = function setOptions(options) {                                               // 16436
    return this._optionsManager.setOptions(options);                                                                   // 16437
};                                                                                                                     // 16438
                                                                                                                       // 16439
function _resolveNodeSize(node, defaultSize) {                                                                         // 16440
    var nodeSize = node.getSize();                                                                                     // 16441
    return nodeSize ? nodeSize[this.options.direction] : defaultSize;                                                  // 16442
}                                                                                                                      // 16443
                                                                                                                       // 16444
function _outputTransform(offset) {                                                                                    // 16445
    if (this.options.direction === HeaderFooterLayout.DIRECTION_X) return Transform.translate(offset, 0, 0);           // 16446
    else return Transform.translate(0, offset, 0);                                                                     // 16447
}                                                                                                                      // 16448
                                                                                                                       // 16449
function _finalSize(directionSize, size) {                                                                             // 16450
    if (this.options.direction === HeaderFooterLayout.DIRECTION_X) return [directionSize, size[1]];                    // 16451
    else return [size[0], directionSize];                                                                              // 16452
}                                                                                                                      // 16453
                                                                                                                       // 16454
/**                                                                                                                    // 16455
 * Apply changes from this component to the corresponding document element.                                            // 16456
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 16457
 * and matrix transforms.                                                                                              // 16458
 *                                                                                                                     // 16459
 * @private                                                                                                            // 16460
 * @method commit                                                                                                      // 16461
 * @param {Context} context commit context                                                                             // 16462
 */                                                                                                                    // 16463
HeaderFooterLayout.prototype.commit = function commit(context) {                                                       // 16464
    var transform = context.transform;                                                                                 // 16465
    var origin = context.origin;                                                                                       // 16466
    var size = context.size;                                                                                           // 16467
    var opacity = context.opacity;                                                                                     // 16468
                                                                                                                       // 16469
    var headerSize = (this.options.headerSize !== undefined) ? this.options.headerSize : _resolveNodeSize.call(this, this.header, this.options.defaultHeaderSize);
    var footerSize = (this.options.footerSize !== undefined) ? this.options.footerSize : _resolveNodeSize.call(this, this.footer, this.options.defaultFooterSize);
    var contentSize = size[this.options.direction] - headerSize - footerSize;                                          // 16472
                                                                                                                       // 16473
    if (size) transform = Transform.moveThen([-size[0]*origin[0], -size[1]*origin[1], 0], transform);                  // 16474
                                                                                                                       // 16475
    var result = [                                                                                                     // 16476
        {                                                                                                              // 16477
            size: _finalSize.call(this, headerSize, size),                                                             // 16478
            target: this.header.render()                                                                               // 16479
        },                                                                                                             // 16480
        {                                                                                                              // 16481
            transform: _outputTransform.call(this, headerSize),                                                        // 16482
            size: _finalSize.call(this, contentSize, size),                                                            // 16483
            target: this.content.render()                                                                              // 16484
        },                                                                                                             // 16485
        {                                                                                                              // 16486
            transform: _outputTransform.call(this, headerSize + contentSize),                                          // 16487
            size: _finalSize.call(this, footerSize, size),                                                             // 16488
            target: this.footer.render()                                                                               // 16489
        }                                                                                                              // 16490
    ];                                                                                                                 // 16491
                                                                                                                       // 16492
    return {                                                                                                           // 16493
        transform: transform,                                                                                          // 16494
        opacity: opacity,                                                                                              // 16495
        size: size,                                                                                                    // 16496
        target: result                                                                                                 // 16497
    };                                                                                                                 // 16498
};                                                                                                                     // 16499
                                                                                                                       // 16500
module.exports = HeaderFooterLayout;                                                                                   // 16501
},{"../core/Entity":5,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15}],105:[function(require,module,exports){
var Transform = require('../core/Transform');                                                                          // 16503
var Modifier = require('../core/Modifier');                                                                            // 16504
var RenderNode = require('../core/RenderNode');                                                                        // 16505
var Utility = require('../utilities/Utility');                                                                         // 16506
var OptionsManager = require('../core/OptionsManager');                                                                // 16507
var Transitionable = require('../transitions/Transitionable');                                                         // 16508
var TransitionableTransform = require('../transitions/TransitionableTransform');                                       // 16509
                                                                                                                       // 16510
/**                                                                                                                    // 16511
 * Lightbox, using transitions, shows and hides different renderables. Lightbox can essentially be                     // 16512
 * thought of as RenderController with a stateful implementation and interface.                                        // 16513
 *                                                                                                                     // 16514
 * @class Lightbox                                                                                                     // 16515
 * @constructor                                                                                                        // 16516
 * @param {Options} [options] An object of configurable options.                                                       // 16517
 * @param {Transform} [options.inTransform] The transform at the start of transitioning in a shown renderable.         // 16518
 * @param {Transform} [options.outTransform] The transform at the end of transitioning out a renderable.               // 16519
 * @param {Transform} [options.showTransform] The transform applied to your shown renderable in its state of equilibrium.
 * @param {Number} [options.inOpacity] A number between one and zero that defines the state of a shown renderables opacity upon initially
 * being transitioned in.                                                                                              // 16522
 * @param {Number} [options.outOpacity] A number between one and zero that defines the state of a shown renderables opacity upon being
 * fully transitioned out.                                                                                             // 16524
 * @param {Number} [options.showOpacity] A number between one and zero that defines the state of a shown renderables opacity
 * once succesfully transitioned in.                                                                                   // 16526
 * @param {Array<Number>} [options.inOrigin] A two value array of numbers between one and zero that defines the state of a shown renderables
 * origin upon intially being transitioned in.                                                                         // 16528
 * @param {Array<Number>} [options.outOrigin] A two value array of numbers between one and zero that defines the state of a shown renderable
 * origin once fully hidden.                                                                                           // 16530
 * @param {Array<Number>} [options.showOrigin] A two value array of numbers between one and zero that defines the state of a shown renderables
 * origin upon succesfully being shown.                                                                                // 16532
 * @param {Array<Number>} [options.inAlign] A two value array of numbers between one and zero that defines the state of a shown renderables
 * align upon intially being transitioned in.                                                                          // 16534
 * @param {Array<Number>} [options.outAlign] A two value array of numbers between one and zero that defines the state of a shown renderable
 * align once fully hidden.                                                                                            // 16536
 * @param {Array<Number>} [options.showAlign] A two value array of numbers between one and zero that defines the state of a shown renderables
 * align upon succesfully being shown.                                                                                 // 16538
 * @param {Transition} [options.inTransition=true] The transition in charge of showing a renderable.                   // 16539
 * @param {Transition} [options.outTransition=true]  The transition in charge of removing your previous renderable when
 * you show a new one, or hiding your current renderable.                                                              // 16541
 * @param {Boolean} [options.overlap=false] When showing a new renderable, overlap determines if the                   // 16542
 *   out transition of the old one executes concurrently with the in transition of the new one,                        // 16543
  *  or synchronously beforehand.                                                                                      // 16544
 */                                                                                                                    // 16545
function Lightbox(options) {                                                                                           // 16546
    this.options = Object.create(Lightbox.DEFAULT_OPTIONS);                                                            // 16547
    this._optionsManager = new OptionsManager(this.options);                                                           // 16548
                                                                                                                       // 16549
    if (options) this.setOptions(options);                                                                             // 16550
                                                                                                                       // 16551
    this._showing = false;                                                                                             // 16552
    this.nodes = [];                                                                                                   // 16553
    this.transforms = [];                                                                                              // 16554
    this.states = [];                                                                                                  // 16555
}                                                                                                                      // 16556
                                                                                                                       // 16557
Lightbox.DEFAULT_OPTIONS = {                                                                                           // 16558
    inTransform: Transform.scale(0.001, 0.001, 0.001),                                                                 // 16559
    inOpacity: 0,                                                                                                      // 16560
    inOrigin: [0.5, 0.5],                                                                                              // 16561
    inAlign: [0.5, 0.5],                                                                                               // 16562
    outTransform: Transform.scale(0.001, 0.001, 0.001),                                                                // 16563
    outOpacity: 0,                                                                                                     // 16564
    outOrigin: [0.5, 0.5],                                                                                             // 16565
    outAlign: [0.5, 0.5],                                                                                              // 16566
    showTransform: Transform.identity,                                                                                 // 16567
    showOpacity: 1,                                                                                                    // 16568
    showOrigin: [0.5, 0.5],                                                                                            // 16569
    showAlign: [0.5, 0.5],                                                                                             // 16570
    inTransition: true,                                                                                                // 16571
    outTransition: true,                                                                                               // 16572
    overlap: false                                                                                                     // 16573
};                                                                                                                     // 16574
                                                                                                                       // 16575
/**                                                                                                                    // 16576
 * Patches the Lightbox instance's options with the passed-in ones.                                                    // 16577
 *                                                                                                                     // 16578
 * @method setOptions                                                                                                  // 16579
 * @param {Options} options An object of configurable options for the Lightbox instance.                               // 16580
 */                                                                                                                    // 16581
Lightbox.prototype.setOptions = function setOptions(options) {                                                         // 16582
    return this._optionsManager.setOptions(options);                                                                   // 16583
};                                                                                                                     // 16584
                                                                                                                       // 16585
   /**                                                                                                                 // 16586
 * Show displays the targeted renderable with a transition and an optional callback to                                 // 16587
 *  execute afterwards.                                                                                                // 16588
 * @method show                                                                                                        // 16589
 * @param {Object} renderable The renderable you want to show.                                                         // 16590
 * @param {Transition} [transition] Overwrites the default transition in to display the                                // 16591
 * passed-in renderable.                                                                                               // 16592
 * @param {function} [callback] Executes after transitioning in the renderable.                                        // 16593
 */                                                                                                                    // 16594
Lightbox.prototype.show = function show(renderable, transition, callback) {                                            // 16595
    if (!renderable) {                                                                                                 // 16596
        return this.hide(callback);                                                                                    // 16597
    }                                                                                                                  // 16598
                                                                                                                       // 16599
    if (transition instanceof Function) {                                                                              // 16600
        callback = transition;                                                                                         // 16601
        transition = undefined;                                                                                        // 16602
    }                                                                                                                  // 16603
                                                                                                                       // 16604
    if (this._showing) {                                                                                               // 16605
        if (this.options.overlap) this.hide();                                                                         // 16606
        else {                                                                                                         // 16607
            return this.hide(this.show.bind(this, renderable, transition, callback));                                  // 16608
        }                                                                                                              // 16609
    }                                                                                                                  // 16610
    this._showing = true;                                                                                              // 16611
                                                                                                                       // 16612
    var stateItem = {                                                                                                  // 16613
        transform: new TransitionableTransform(this.options.inTransform),                                              // 16614
        origin: new Transitionable(this.options.inOrigin),                                                             // 16615
        align: new Transitionable(this.options.inAlign),                                                               // 16616
        opacity: new Transitionable(this.options.inOpacity)                                                            // 16617
    };                                                                                                                 // 16618
                                                                                                                       // 16619
    var transform = new Modifier({                                                                                     // 16620
        transform: stateItem.transform,                                                                                // 16621
        opacity: stateItem.opacity,                                                                                    // 16622
        origin: stateItem.origin,                                                                                      // 16623
        align: stateItem.align                                                                                         // 16624
    });                                                                                                                // 16625
    var node = new RenderNode();                                                                                       // 16626
    node.add(transform).add(renderable);                                                                               // 16627
    this.nodes.push(node);                                                                                             // 16628
    this.states.push(stateItem);                                                                                       // 16629
    this.transforms.push(transform);                                                                                   // 16630
                                                                                                                       // 16631
    var _cb = callback ? Utility.after(3, callback) : undefined;                                                       // 16632
                                                                                                                       // 16633
    if (!transition) transition = this.options.inTransition;                                                           // 16634
    stateItem.transform.set(this.options.showTransform, transition, _cb);                                              // 16635
    stateItem.opacity.set(this.options.showOpacity, transition, _cb);                                                  // 16636
    stateItem.origin.set(this.options.showOrigin, transition, _cb);                                                    // 16637
    stateItem.align.set(this.options.showAlign, transition, _cb);                                                      // 16638
};                                                                                                                     // 16639
                                                                                                                       // 16640
/**                                                                                                                    // 16641
 * Hide hides the currently displayed renderable with an out transition.                                               // 16642
 * @method hide                                                                                                        // 16643
 * @param {Transition} [transition] Overwrites the default transition in to hide the                                   // 16644
 * currently controlled renderable.                                                                                    // 16645
 * @param {function} [callback] Executes after transitioning out the renderable.                                       // 16646
 */                                                                                                                    // 16647
Lightbox.prototype.hide = function hide(transition, callback) {                                                        // 16648
    if (!this._showing) return;                                                                                        // 16649
    this._showing = false;                                                                                             // 16650
                                                                                                                       // 16651
    if (transition instanceof Function) {                                                                              // 16652
        callback = transition;                                                                                         // 16653
        transition = undefined;                                                                                        // 16654
    }                                                                                                                  // 16655
                                                                                                                       // 16656
    var node = this.nodes[this.nodes.length - 1];                                                                      // 16657
    var transform = this.transforms[this.transforms.length - 1];                                                       // 16658
    var stateItem = this.states[this.states.length - 1];                                                               // 16659
    var _cb = Utility.after(3, function() {                                                                            // 16660
        this.nodes.splice(this.nodes.indexOf(node), 1);                                                                // 16661
        this.states.splice(this.states.indexOf(stateItem), 1);                                                         // 16662
        this.transforms.splice(this.transforms.indexOf(transform), 1);                                                 // 16663
        if (callback) callback.call(this);                                                                             // 16664
    }.bind(this));                                                                                                     // 16665
                                                                                                                       // 16666
    if (!transition) transition = this.options.outTransition;                                                          // 16667
    stateItem.transform.set(this.options.outTransform, transition, _cb);                                               // 16668
    stateItem.opacity.set(this.options.outOpacity, transition, _cb);                                                   // 16669
    stateItem.origin.set(this.options.outOrigin, transition, _cb);                                                     // 16670
    stateItem.align.set(this.options.outAlign, transition, _cb);                                                       // 16671
};                                                                                                                     // 16672
                                                                                                                       // 16673
/**                                                                                                                    // 16674
 * Generate a render spec from the contents of this component.                                                         // 16675
 *                                                                                                                     // 16676
 * @private                                                                                                            // 16677
 * @method render                                                                                                      // 16678
 * @return {number} Render spec for this component                                                                     // 16679
 */                                                                                                                    // 16680
Lightbox.prototype.render = function render() {                                                                        // 16681
    var result = [];                                                                                                   // 16682
    for (var i = 0; i < this.nodes.length; i++) {                                                                      // 16683
        result.push(this.nodes[i].render());                                                                           // 16684
    }                                                                                                                  // 16685
    return result;                                                                                                     // 16686
};                                                                                                                     // 16687
                                                                                                                       // 16688
module.exports = Lightbox;                                                                                             // 16689
},{"../core/Modifier":9,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../transitions/Transitionable":88,"../transitions/TransitionableTransform":89,"../utilities/Utility":95}],106:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16691
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16692
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16693
 *                                                                                                                     // 16694
 * Owner: felix@famo.us                                                                                                // 16695
 * @license MPL 2.0                                                                                                    // 16696
 * @copyright Famous Industries, Inc. 2014                                                                             // 16697
 */                                                                                                                    // 16698
                                                                                                                       // 16699
var Modifier = require('../core/Modifier');                                                                            // 16700
var RenderNode = require('../core/RenderNode');                                                                        // 16701
var Transform = require('../core/Transform');                                                                          // 16702
var Transitionable = require('../transitions/Transitionable');                                                         // 16703
var View = require('../core/View');                                                                                    // 16704
                                                                                                                       // 16705
/**                                                                                                                    // 16706
 * A dynamic view that can show or hide different renerables with transitions.                                         // 16707
 * @class RenderController                                                                                             // 16708
 * @constructor                                                                                                        // 16709
 * @param {Options} [options] An object of configurable options.                                                       // 16710
 * @param {Transition} [inTransition=true] The transition in charge of showing a renderable.                           // 16711
 * @param {Transition} [outTransition=true]  The transition in charge of removing your previous renderable when        // 16712
 * you show a new one, or hiding your current renderable.                                                              // 16713
 * @param {Boolean} [overlap=true] When showing a new renderable, overlap determines if the                            // 16714
  out transition of the old one executes concurrently with the in transition of the new one,                           // 16715
   or synchronously beforehand.                                                                                        // 16716
 */                                                                                                                    // 16717
function RenderController(options) {                                                                                   // 16718
    View.apply(this, arguments);                                                                                       // 16719
                                                                                                                       // 16720
    this._showing = -1;                                                                                                // 16721
    this._outgoingRenderables = [];                                                                                    // 16722
    this._nextRenderable = null;                                                                                       // 16723
                                                                                                                       // 16724
    this._renderables = [];                                                                                            // 16725
    this._nodes = [];                                                                                                  // 16726
    this._modifiers = [];                                                                                              // 16727
    this._states = [];                                                                                                 // 16728
                                                                                                                       // 16729
    this.inTransformMap = RenderController.DefaultMap.transform;                                                       // 16730
    this.inOpacityMap = RenderController.DefaultMap.opacity;                                                           // 16731
    this.inOriginMap = RenderController.DefaultMap.origin;                                                             // 16732
    this.outTransformMap = RenderController.DefaultMap.transform;                                                      // 16733
    this.outOpacityMap = RenderController.DefaultMap.opacity;                                                          // 16734
    this.outOriginMap = RenderController.DefaultMap.origin;                                                            // 16735
                                                                                                                       // 16736
    this._output = [];                                                                                                 // 16737
}                                                                                                                      // 16738
RenderController.prototype = Object.create(View.prototype);                                                            // 16739
RenderController.prototype.constructor = RenderController;                                                             // 16740
                                                                                                                       // 16741
RenderController.DEFAULT_OPTIONS = {                                                                                   // 16742
    inTransition: true,                                                                                                // 16743
    outTransition: true,                                                                                               // 16744
    overlap: true                                                                                                      // 16745
};                                                                                                                     // 16746
                                                                                                                       // 16747
RenderController.DefaultMap = {                                                                                        // 16748
    transform: function() {                                                                                            // 16749
        return Transform.identity;                                                                                     // 16750
    },                                                                                                                 // 16751
    opacity: function(progress) {                                                                                      // 16752
        return progress;                                                                                               // 16753
    },                                                                                                                 // 16754
    origin: null                                                                                                       // 16755
};                                                                                                                     // 16756
                                                                                                                       // 16757
function _mappedState(map, state) {                                                                                    // 16758
    return map(state.get());                                                                                           // 16759
}                                                                                                                      // 16760
                                                                                                                       // 16761
/**                                                                                                                    // 16762
 * As your RenderController shows a new renderable, it executes a transition in. This transition in                    // 16763
 *  will affect a default interior state and modify it as you bring renderables in and out. However, if you want to control
 *  the transform, opacity, and origin state yourself, you may call certain methods (such as inTransformFrom) to obtain state from an outside source,
 *  that may either be a function or a Famous transitionable. inTransformFrom sets the accessor for the state of       // 16766
 *  the transform used in transitioning in renderables.                                                                // 16767
 *                                                                                                                     // 16768
 * @method inTransformFrom                                                                                             // 16769
 * @param {Function|Transitionable} transform  A function that returns a transform from outside closure, or a          // 16770
 * a transitionable that manages a full transform (a sixteen value array).                                             // 16771
 * @chainable                                                                                                          // 16772
 */                                                                                                                    // 16773
RenderController.prototype.inTransformFrom = function inTransformFrom(transform) {                                     // 16774
    if (transform instanceof Function) this.inTransformMap = transform;                                                // 16775
    else if (transform && transform.get) this.inTransformMap = transform.get.bind(transform);                          // 16776
    else throw new Error('inTransformFrom takes only function or getter object');                                      // 16777
    //TODO: tween transition                                                                                           // 16778
    return this;                                                                                                       // 16779
};                                                                                                                     // 16780
                                                                                                                       // 16781
/**                                                                                                                    // 16782
 * inOpacityFrom sets the accessor for the state of the opacity used in transitioning in renderables.                  // 16783
 * @method inOpacityFrom                                                                                               // 16784
 * @param {Function|Transitionable} opacity  A function that returns an opacity from outside closure, or a             // 16785
 * a transitionable that manages opacity (a number between zero and one).                                              // 16786
 * @chainable                                                                                                          // 16787
 */                                                                                                                    // 16788
RenderController.prototype.inOpacityFrom = function inOpacityFrom(opacity) {                                           // 16789
    if (opacity instanceof Function) this.inOpacityMap = opacity;                                                      // 16790
    else if (opacity && opacity.get) this.inOpacityMap = opacity.get.bind(opacity);                                    // 16791
    else throw new Error('inOpacityFrom takes only function or getter object');                                        // 16792
    //TODO: tween opacity                                                                                              // 16793
    return this;                                                                                                       // 16794
};                                                                                                                     // 16795
                                                                                                                       // 16796
/**                                                                                                                    // 16797
 * inOriginFrom sets the accessor for the state of the origin used in transitioning in renderables.                    // 16798
 * @method inOriginFrom                                                                                                // 16799
 * @param {Function|Transitionable} origin A function that returns an origin from outside closure, or a                // 16800
 * a transitionable that manages origin (a two value array of numbers between zero and one).                           // 16801
 * @chainable                                                                                                          // 16802
 */                                                                                                                    // 16803
RenderController.prototype.inOriginFrom = function inOriginFrom(origin) {                                              // 16804
    if (origin instanceof Function) this.inOriginMap = origin;                                                         // 16805
    else if (origin && origin.get) this.inOriginMap = origin.get.bind(origin);                                         // 16806
    else throw new Error('inOriginFrom takes only function or getter object');                                         // 16807
    //TODO: tween origin                                                                                               // 16808
    return this;                                                                                                       // 16809
};                                                                                                                     // 16810
                                                                                                                       // 16811
/**                                                                                                                    // 16812
 * outTransformFrom sets the accessor for the state of the transform used in transitioning out renderables.            // 16813
 * @method outTransformFrom                                                                                            // 16814
 * @param {Function|Transitionable} transform  A function that returns a transform from outside closure, or a          // 16815
 * a transitionable that manages a full transform (a sixteen value array).                                             // 16816
 * @chainable                                                                                                          // 16817
 */                                                                                                                    // 16818
RenderController.prototype.outTransformFrom = function outTransformFrom(transform) {                                   // 16819
    if (transform instanceof Function) this.outTransformMap = transform;                                               // 16820
    else if (transform && transform.get) this.outTransformMap = transform.get.bind(transform);                         // 16821
    else throw new Error('outTransformFrom takes only function or getter object');                                     // 16822
    //TODO: tween transition                                                                                           // 16823
    return this;                                                                                                       // 16824
};                                                                                                                     // 16825
                                                                                                                       // 16826
/**                                                                                                                    // 16827
 * outOpacityFrom sets the accessor for the state of the opacity used in transitioning out renderables.                // 16828
 * @method outOpacityFrom                                                                                              // 16829
 * @param {Function|Transitionable} opacity  A function that returns an opacity from outside closure, or a             // 16830
 * a transitionable that manages opacity (a number between zero and one).                                              // 16831
 * @chainable                                                                                                          // 16832
 */                                                                                                                    // 16833
RenderController.prototype.outOpacityFrom = function outOpacityFrom(opacity) {                                         // 16834
    if (opacity instanceof Function) this.outOpacityMap = opacity;                                                     // 16835
    else if (opacity && opacity.get) this.outOpacityMap = opacity.get.bind(opacity);                                   // 16836
    else throw new Error('outOpacityFrom takes only function or getter object');                                       // 16837
    //TODO: tween opacity                                                                                              // 16838
    return this;                                                                                                       // 16839
};                                                                                                                     // 16840
                                                                                                                       // 16841
/**                                                                                                                    // 16842
 * outOriginFrom sets the accessor for the state of the origin used in transitioning out renderables.                  // 16843
 * @method outOriginFrom                                                                                               // 16844
 * @param {Function|Transitionable} origin A function that returns an origin from outside closure, or a                // 16845
 * a transitionable that manages origin (a two value array of numbers between zero and one).                           // 16846
 * @chainable                                                                                                          // 16847
 */                                                                                                                    // 16848
RenderController.prototype.outOriginFrom = function outOriginFrom(origin) {                                            // 16849
    if (origin instanceof Function) this.outOriginMap = origin;                                                        // 16850
    else if (origin && origin.get) this.outOriginMap = origin.get.bind(origin);                                        // 16851
    else throw new Error('outOriginFrom takes only function or getter object');                                        // 16852
    //TODO: tween origin                                                                                               // 16853
    return this;                                                                                                       // 16854
};                                                                                                                     // 16855
                                                                                                                       // 16856
/**                                                                                                                    // 16857
 * Show displays the targeted renderable with a transition and an optional callback to                                 // 16858
 * execute afterwards.                                                                                                 // 16859
 * @method show                                                                                                        // 16860
 * @param {Object} renderable The renderable you want to show.                                                         // 16861
 * @param {Transition} [transition] Overwrites the default transition in to display the                                // 16862
 * passed-in renderable.                                                                                               // 16863
 * @param {function} [callback] Executes after transitioning in the renderable.                                        // 16864
 * @chainable                                                                                                          // 16865
 */                                                                                                                    // 16866
RenderController.prototype.show = function show(renderable, transition, callback) {                                    // 16867
    if (!renderable) {                                                                                                 // 16868
        return this.hide(callback);                                                                                    // 16869
    }                                                                                                                  // 16870
                                                                                                                       // 16871
    if (transition instanceof Function) {                                                                              // 16872
        callback = transition;                                                                                         // 16873
        transition = null;                                                                                             // 16874
    }                                                                                                                  // 16875
                                                                                                                       // 16876
    if (this._showing >= 0) {                                                                                          // 16877
        if (this.options.overlap) this.hide();                                                                         // 16878
        else {                                                                                                         // 16879
            if (this._nextRenderable) {                                                                                // 16880
                this._nextRenderable = renderable;                                                                     // 16881
            }                                                                                                          // 16882
            else {                                                                                                     // 16883
                this._nextRenderable = renderable;                                                                     // 16884
                this.hide(function() {                                                                                 // 16885
                    if (this._nextRenderable === renderable) this.show(this._nextRenderable, callback);                // 16886
                    this._nextRenderable = null;                                                                       // 16887
                });                                                                                                    // 16888
            }                                                                                                          // 16889
            return undefined;                                                                                          // 16890
        }                                                                                                              // 16891
    }                                                                                                                  // 16892
                                                                                                                       // 16893
    var state = null;                                                                                                  // 16894
                                                                                                                       // 16895
    // check to see if we should restore                                                                               // 16896
    var renderableIndex = this._renderables.indexOf(renderable);                                                       // 16897
    if (renderableIndex >= 0) {                                                                                        // 16898
        this._showing = renderableIndex;                                                                               // 16899
        state = this._states[renderableIndex];                                                                         // 16900
        state.halt();                                                                                                  // 16901
                                                                                                                       // 16902
        var outgoingIndex = this._outgoingRenderables.indexOf(renderable);                                             // 16903
        if (outgoingIndex >= 0) this._outgoingRenderables.splice(outgoingIndex, 1);                                    // 16904
    }                                                                                                                  // 16905
    else {                                                                                                             // 16906
        state = new Transitionable(0);                                                                                 // 16907
                                                                                                                       // 16908
        var modifier = new Modifier({                                                                                  // 16909
            transform: this.inTransformMap ? _mappedState.bind(this, this.inTransformMap, state) : null,               // 16910
            opacity: this.inOpacityMap ? _mappedState.bind(this, this.inOpacityMap, state) : null,                     // 16911
            origin: this.inOriginMap ? _mappedState.bind(this, this.inOriginMap, state) : null                         // 16912
        });                                                                                                            // 16913
        var node = new RenderNode();                                                                                   // 16914
        node.add(modifier).add(renderable);                                                                            // 16915
                                                                                                                       // 16916
        this._showing = this._nodes.length;                                                                            // 16917
        this._nodes.push(node);                                                                                        // 16918
        this._modifiers.push(modifier);                                                                                // 16919
        this._states.push(state);                                                                                      // 16920
        this._renderables.push(renderable);                                                                            // 16921
    }                                                                                                                  // 16922
                                                                                                                       // 16923
    if (!transition) transition = this.options.inTransition;                                                           // 16924
    state.set(1, transition, callback);                                                                                // 16925
};                                                                                                                     // 16926
                                                                                                                       // 16927
/**                                                                                                                    // 16928
 * Hide hides the currently displayed renderable with an out transition.                                               // 16929
 * @method hide                                                                                                        // 16930
 * @param {Transition} [transition] Overwrites the default transition in to hide the                                   // 16931
 * currently controlled renderable.                                                                                    // 16932
 * @param {function} [callback] Executes after transitioning out the renderable.                                       // 16933
 * @chainable                                                                                                          // 16934
 */                                                                                                                    // 16935
RenderController.prototype.hide = function hide(transition, callback) {                                                // 16936
    if (this._showing < 0) return;                                                                                     // 16937
    var index = this._showing;                                                                                         // 16938
    this._showing = -1;                                                                                                // 16939
                                                                                                                       // 16940
    if (transition instanceof Function) {                                                                              // 16941
        callback = transition;                                                                                         // 16942
        transition = undefined;                                                                                        // 16943
    }                                                                                                                  // 16944
                                                                                                                       // 16945
    var node = this._nodes[index];                                                                                     // 16946
    var modifier = this._modifiers[index];                                                                             // 16947
    var state = this._states[index];                                                                                   // 16948
    var renderable = this._renderables[index];                                                                         // 16949
                                                                                                                       // 16950
    modifier.transformFrom(this.outTransformMap ? _mappedState.bind(this, this.outTransformMap, state) : null);        // 16951
    modifier.opacityFrom(this.outOpacityMap ? _mappedState.bind(this, this.outOpacityMap, state) : null);              // 16952
    modifier.originFrom(this.outOriginMap ? _mappedState.bind(this, this.outOriginMap, state) : null);                 // 16953
                                                                                                                       // 16954
    if (this._outgoingRenderables.indexOf(renderable) < 0) this._outgoingRenderables.push(renderable);                 // 16955
                                                                                                                       // 16956
    if (!transition) transition = this.options.outTransition;                                                          // 16957
    state.halt();                                                                                                      // 16958
    state.set(0, transition, function(node, modifier, state, renderable) {                                             // 16959
        if (this._outgoingRenderables.indexOf(renderable) >= 0) {                                                      // 16960
            var index = this._nodes.indexOf(node);                                                                     // 16961
            this._nodes.splice(index, 1);                                                                              // 16962
            this._modifiers.splice(index, 1);                                                                          // 16963
            this._states.splice(index, 1);                                                                             // 16964
            this._renderables.splice(index, 1);                                                                        // 16965
            this._outgoingRenderables.splice(this._outgoingRenderables.indexOf(renderable), 1);                        // 16966
                                                                                                                       // 16967
            if (this._showing >= index) this._showing--;                                                               // 16968
        }                                                                                                              // 16969
        if (callback) callback.call(this);                                                                             // 16970
    }.bind(this, node, modifier, state, renderable));                                                                  // 16971
};                                                                                                                     // 16972
                                                                                                                       // 16973
/**                                                                                                                    // 16974
 * Generate a render spec from the contents of this component.                                                         // 16975
 *                                                                                                                     // 16976
 * @private                                                                                                            // 16977
 * @method render                                                                                                      // 16978
 * @return {number} Render spec for this component                                                                     // 16979
 */                                                                                                                    // 16980
RenderController.prototype.render = function render() {                                                                // 16981
    var result = this._output;                                                                                         // 16982
    if (result.length > this._nodes.length) result.splice(this._nodes.length);                                         // 16983
    for (var i = 0; i < this._nodes.length; i++) {                                                                     // 16984
        result[i] = this._nodes[i].render();                                                                           // 16985
    }                                                                                                                  // 16986
    return result;                                                                                                     // 16987
};                                                                                                                     // 16988
                                                                                                                       // 16989
module.exports = RenderController;                                                                                     // 16990
},{"../core/Modifier":9,"../core/RenderNode":11,"../core/Transform":15,"../core/View":16,"../transitions/Transitionable":88}],107:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16992
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16993
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16994
 *                                                                                                                     // 16995
 * Owner: felix@famo.us                                                                                                // 16996
 * @license MPL 2.0                                                                                                    // 16997
 * @copyright Famous Industries, Inc. 2014                                                                             // 16998
 */                                                                                                                    // 16999
                                                                                                                       // 17000
var ContainerSurface = require('../surfaces/ContainerSurface');                                                        // 17001
var EventHandler = require('../core/EventHandler');                                                                    // 17002
var Scrollview = require('./Scrollview');                                                                              // 17003
var Utility = require('../utilities/Utility');                                                                         // 17004
var OptionsManager = require('../core/OptionsManager');                                                                // 17005
                                                                                                                       // 17006
/**                                                                                                                    // 17007
 * A Container surface with a scrollview automatically added. The convenience of ScrollContainer lies in               // 17008
 * being able to clip out portions of the associated scrollview that lie outside the bounding surface,                 // 17009
 * and in being able to move the scrollview more easily by applying modifiers to the parent container                  // 17010
 * surface.                                                                                                            // 17011
 * @class ScrollContainer                                                                                              // 17012
 * @constructor                                                                                                        // 17013
 * @param {Options} [options] An object of configurable options.                                                       // 17014
 * @param {Options} [options.container=undefined] Options for the ScrollContainer instance's surface.                  // 17015
 * @param {Options} [options.scrollview={direction:Utility.Direction.X}]  Options for the ScrollContainer instance's scrollview.
 */                                                                                                                    // 17017
function ScrollContainer(options) {                                                                                    // 17018
    this.options = Object.create(ScrollContainer.DEFAULT_OPTIONS);                                                     // 17019
    this._optionsManager = new OptionsManager(this.options);                                                           // 17020
                                                                                                                       // 17021
    if (options) this.setOptions(options);                                                                             // 17022
                                                                                                                       // 17023
    this.container = new ContainerSurface(this.options.container);                                                     // 17024
    this.scrollview = new Scrollview(this.options.scrollview);                                                         // 17025
                                                                                                                       // 17026
    this.container.add(this.scrollview);                                                                               // 17027
                                                                                                                       // 17028
    this._eventInput = new EventHandler();                                                                             // 17029
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 17030
                                                                                                                       // 17031
    this._eventInput.pipe(this.scrollview);                                                                            // 17032
                                                                                                                       // 17033
    this._eventOutput = new EventHandler();                                                                            // 17034
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 17035
                                                                                                                       // 17036
    this.container.pipe(this._eventOutput);                                                                            // 17037
    this.scrollview.pipe(this._eventOutput);                                                                           // 17038
}                                                                                                                      // 17039
                                                                                                                       // 17040
ScrollContainer.DEFAULT_OPTIONS = {                                                                                    // 17041
    container: {                                                                                                       // 17042
        properties: {overflow : 'hidden'}                                                                              // 17043
    },                                                                                                                 // 17044
    scrollview: {}                                                                                                     // 17045
};                                                                                                                     // 17046
                                                                                                                       // 17047
/**                                                                                                                    // 17048
 * Patches the ScrollContainer instance's options with the passed-in ones.                                             // 17049
 *                                                                                                                     // 17050
 * @method setOptions                                                                                                  // 17051
 * @param {Options} options An object of configurable options for the ScrollContainer instance.                        // 17052
 */                                                                                                                    // 17053
ScrollContainer.prototype.setOptions = function setOptions(options) {                                                  // 17054
    return this._optionsManager.setOptions(options);                                                                   // 17055
};                                                                                                                     // 17056
                                                                                                                       // 17057
/**                                                                                                                    // 17058
 * Sets the collection of renderables under the ScrollContainer instance scrollview's control.                         // 17059
 *                                                                                                                     // 17060
 * @method sequenceFrom                                                                                                // 17061
 * @param {Array|ViewSequence} sequence Either an array of renderables or a Famous ViewSequence.                       // 17062
 */                                                                                                                    // 17063
ScrollContainer.prototype.sequenceFrom = function sequenceFrom() {                                                     // 17064
    return this.scrollview.sequenceFrom.apply(this.scrollview, arguments);                                             // 17065
};                                                                                                                     // 17066
                                                                                                                       // 17067
/**                                                                                                                    // 17068
 * Returns the width and the height of the ScrollContainer instance.                                                   // 17069
 *                                                                                                                     // 17070
 * @method getSize                                                                                                     // 17071
 * @return {Array} A two value array of the ScrollContainer instance's current width and height (in that order).       // 17072
 */                                                                                                                    // 17073
ScrollContainer.prototype.getSize = function getSize() {                                                               // 17074
    return this.container.getSize.apply(this.container, arguments);                                                    // 17075
};                                                                                                                     // 17076
                                                                                                                       // 17077
/**                                                                                                                    // 17078
 * Generate a render spec from the contents of this component.                                                         // 17079
 *                                                                                                                     // 17080
 * @private                                                                                                            // 17081
 * @method render                                                                                                      // 17082
 * @return {number} Render spec for this component                                                                     // 17083
 */                                                                                                                    // 17084
ScrollContainer.prototype.render = function render() {                                                                 // 17085
    return this.container.render();                                                                                    // 17086
};                                                                                                                     // 17087
                                                                                                                       // 17088
module.exports = ScrollContainer;                                                                                      // 17089
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../surfaces/ContainerSurface":75,"../utilities/Utility":95,"./Scrollview":109}],108:[function(require,module,exports){
var Entity = require('../core/Entity');                                                                                // 17091
var Group = require('../core/Group');                                                                                  // 17092
var OptionsManager = require('../core/OptionsManager');                                                                // 17093
var Transform = require('../core/Transform');                                                                          // 17094
var Utility = require('../utilities/Utility');                                                                         // 17095
var ViewSequence = require('../core/ViewSequence');                                                                    // 17096
var EventHandler = require('../core/EventHandler');                                                                    // 17097
                                                                                                                       // 17098
/**                                                                                                                    // 17099
 * Scroller lays out a collection of renderables, and will browse through them based on                                // 17100
 * accessed position. Scroller also broadcasts an 'edgeHit' event, with a position property of the location of the edge,
 * when you've hit the 'edges' of it's renderable collection.                                                          // 17102
 * @class Scroller                                                                                                     // 17103
 * @constructor                                                                                                        // 17104
  * @event error                                                                                                       // 17105
 * @param {Options} [options] An object of configurable options.                                                       // 17106
 * @param {Number} [options.direction=Utility.Direction.Y] Using the direction helper found in the famous Utility      // 17107
 * module, this option will lay out the Scroller instance's renderables either horizontally                            // 17108
 * (x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free                  // 17109
 * to just use integers as well.                                                                                       // 17110
 * @param {Number} [clipSize=undefined] The size of the area (in pixels) that Scroller will display content in.        // 17111
 * @param {Number} [margin=undefined] The size of the area (in pixels) that Scroller will process renderables' associated calculations in.
 */                                                                                                                    // 17113
function Scroller(options) {                                                                                           // 17114
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 17115
    this._optionsManager = new OptionsManager(this.options);                                                           // 17116
    if (options) this._optionsManager.setOptions(options);                                                             // 17117
                                                                                                                       // 17118
    this._node = null;                                                                                                 // 17119
    this._position = 0;                                                                                                // 17120
                                                                                                                       // 17121
    // used for shifting nodes                                                                                         // 17122
    this._positionOffset = 0;                                                                                          // 17123
                                                                                                                       // 17124
    this._positionGetter = null;                                                                                       // 17125
    this._outputFunction = null;                                                                                       // 17126
    this._masterOutputFunction = null;                                                                                 // 17127
    this.outputFrom();                                                                                                 // 17128
                                                                                                                       // 17129
    this._onEdge = 0; // -1 for top, 1 for bottom                                                                      // 17130
                                                                                                                       // 17131
    this.group = new Group();                                                                                          // 17132
    this.group.add({render: _innerRender.bind(this)});                                                                 // 17133
                                                                                                                       // 17134
    this._entityId = Entity.register(this);                                                                            // 17135
    this._size = [undefined, undefined];                                                                               // 17136
    this._contextSize = [undefined, undefined];                                                                        // 17137
                                                                                                                       // 17138
    this._eventInput = new EventHandler();                                                                             // 17139
    this._eventOutput = new EventHandler();                                                                            // 17140
                                                                                                                       // 17141
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 17142
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 17143
}                                                                                                                      // 17144
                                                                                                                       // 17145
Scroller.DEFAULT_OPTIONS = {                                                                                           // 17146
    direction: Utility.Direction.Y,                                                                                    // 17147
    margin: 0,                                                                                                         // 17148
    clipSize: undefined,                                                                                               // 17149
    groupScroll: false                                                                                                 // 17150
};                                                                                                                     // 17151
                                                                                                                       // 17152
var EDGE_TOLERANCE = 0; //slop for detecting passing the edge                                                          // 17153
                                                                                                                       // 17154
function _sizeForDir(size) {                                                                                           // 17155
    if (!size) size = this._contextSize;                                                                               // 17156
    var dimension = this.options.direction;                                                                            // 17157
    return (size[dimension] === undefined) ? this._contextSize[dimension] : size[dimension];                           // 17158
}                                                                                                                      // 17159
                                                                                                                       // 17160
function _output(node, offset, target) {                                                                               // 17161
    var size = node.getSize ? node.getSize() : this._contextSize;                                                      // 17162
    var transform = this._outputFunction(offset);                                                                      // 17163
    target.push({transform: transform, target: node.render()});                                                        // 17164
    return _sizeForDir.call(this, size);                                                                               // 17165
}                                                                                                                      // 17166
                                                                                                                       // 17167
function _getClipSize() {                                                                                              // 17168
    if (this.options.clipSize !== undefined) return this.options.clipSize;                                             // 17169
    if (this._contextSize[this.options.direction] > this.getCumulativeSize()[this.options.direction]) {                // 17170
        return _sizeForDir.call(this, this.getCumulativeSize());                                                       // 17171
    } else {                                                                                                           // 17172
        return _sizeForDir.call(this, this._contextSize);                                                              // 17173
    }                                                                                                                  // 17174
}                                                                                                                      // 17175
                                                                                                                       // 17176
/**                                                                                                                    // 17177
* Returns the cumulative size of the renderables in the view sequence                                                  // 17178
* @method getCumulativeSize                                                                                            // 17179
* @return {array} a two value array of the view sequence's cumulative size up to the index.                            // 17180
*/                                                                                                                     // 17181
Scroller.prototype.getCumulativeSize = function(index) {                                                               // 17182
    if (index === undefined) index = this._node._.cumulativeSizes.length - 1;                                          // 17183
    return this._node._.getSize(index);                                                                                // 17184
};                                                                                                                     // 17185
                                                                                                                       // 17186
/**                                                                                                                    // 17187
 * Patches the Scroller instance's options with the passed-in ones.                                                    // 17188
 * @method setOptions                                                                                                  // 17189
 * @param {Options} options An object of configurable options for the Scroller instance.                               // 17190
 */                                                                                                                    // 17191
Scroller.prototype.setOptions = function setOptions(options) {                                                         // 17192
    if (options.groupScroll !== this.options.groupScroll) {                                                            // 17193
        if (options.groupScroll)                                                                                       // 17194
            this.group.pipe(this._eventOutput);                                                                        // 17195
        else                                                                                                           // 17196
            this.group.unpipe(this._eventOutput);                                                                      // 17197
    }                                                                                                                  // 17198
    this._optionsManager.setOptions(options);                                                                          // 17199
};                                                                                                                     // 17200
                                                                                                                       // 17201
/**                                                                                                                    // 17202
 * Tells you if the Scroller instance is on an edge.                                                                   // 17203
 * @method onEdge                                                                                                      // 17204
 * @return {Boolean} Whether the Scroller instance is on an edge or not.                                               // 17205
 */                                                                                                                    // 17206
Scroller.prototype.onEdge = function onEdge() {                                                                        // 17207
    return this._onEdge;                                                                                               // 17208
};                                                                                                                     // 17209
                                                                                                                       // 17210
/**                                                                                                                    // 17211
 * Allows you to overwrite the way Scroller lays out it's renderables. Scroller will                                   // 17212
 * pass an offset into the function. By default the Scroller instance just translates each node                        // 17213
 * in it's direction by the passed-in offset.                                                                          // 17214
 * Scroller will translate each renderable down                                                                        // 17215
 * @method outputFrom                                                                                                  // 17216
 * @param {Function} fn A function that takes an offset and returns a transform.                                       // 17217
 * @param {Function} [masterFn]                                                                                        // 17218
 */                                                                                                                    // 17219
Scroller.prototype.outputFrom = function outputFrom(fn, masterFn) {                                                    // 17220
    if (!fn) {                                                                                                         // 17221
        fn = function(offset) {                                                                                        // 17222
            return (this.options.direction === Utility.Direction.X) ? Transform.translate(offset, 0) : Transform.translate(0, offset);
        }.bind(this);                                                                                                  // 17224
        if (!masterFn) masterFn = fn;                                                                                  // 17225
    }                                                                                                                  // 17226
    this._outputFunction = fn;                                                                                         // 17227
    this._masterOutputFunction = masterFn ? masterFn : function(offset) {                                              // 17228
        return Transform.inverse(fn(-offset));                                                                         // 17229
    };                                                                                                                 // 17230
};                                                                                                                     // 17231
                                                                                                                       // 17232
/**                                                                                                                    // 17233
 * The Scroller instance's method for reading from an external position. Scroller uses                                 // 17234
 * the external position to actually scroll through it's renderables.                                                  // 17235
 * @method positionFrom                                                                                                // 17236
 * @param {Getter} position Can be either a function that returns a position,                                          // 17237
 * or an object with a get method that returns a position.                                                             // 17238
 */                                                                                                                    // 17239
Scroller.prototype.positionFrom = function positionFrom(position) {                                                    // 17240
    if (position instanceof Function) this._positionGetter = position;                                                 // 17241
    else if (position && position.get) this._positionGetter = position.get.bind(position);                             // 17242
    else {                                                                                                             // 17243
        this._positionGetter = null;                                                                                   // 17244
        this._position = position;                                                                                     // 17245
    }                                                                                                                  // 17246
    if (this._positionGetter) this._position = this._positionGetter.call(this);                                        // 17247
};                                                                                                                     // 17248
                                                                                                                       // 17249
/**                                                                                                                    // 17250
 * Sets the collection of renderables under the Scroller instance's control.                                           // 17251
 *                                                                                                                     // 17252
 * @method sequenceFrom                                                                                                // 17253
 * @param node {Array|ViewSequence} Either an array of renderables or a Famous viewSequence.                           // 17254
 * @chainable                                                                                                          // 17255
 */                                                                                                                    // 17256
Scroller.prototype.sequenceFrom = function sequenceFrom(node) {                                                        // 17257
    if (node instanceof Array) node = new ViewSequence({array: node});                                                 // 17258
    this._node = node;                                                                                                 // 17259
    this._positionOffset = 0;                                                                                          // 17260
};                                                                                                                     // 17261
                                                                                                                       // 17262
/**                                                                                                                    // 17263
 * Returns the width and the height of the Scroller instance.                                                          // 17264
 *                                                                                                                     // 17265
 * @method getSize                                                                                                     // 17266
 * @return {Array} A two value array of the Scroller instance's current width and height (in that order).              // 17267
 */                                                                                                                    // 17268
Scroller.prototype.getSize = function getSize(actual) {                                                                // 17269
    return actual ? this._contextSize : this._size;                                                                    // 17270
};                                                                                                                     // 17271
                                                                                                                       // 17272
/**                                                                                                                    // 17273
 * Generate a render spec from the contents of this component.                                                         // 17274
 *                                                                                                                     // 17275
 * @private                                                                                                            // 17276
 * @method render                                                                                                      // 17277
 * @return {number} Render spec for this component                                                                     // 17278
 */                                                                                                                    // 17279
Scroller.prototype.render = function render() {                                                                        // 17280
    if (!this._node) return null;                                                                                      // 17281
    if (this._positionGetter) this._position = this._positionGetter.call(this);                                        // 17282
    return this._entityId;                                                                                             // 17283
};                                                                                                                     // 17284
                                                                                                                       // 17285
/**                                                                                                                    // 17286
 * Apply changes from this component to the corresponding document element.                                            // 17287
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 17288
 * and matrix transforms.                                                                                              // 17289
 *                                                                                                                     // 17290
 * @private                                                                                                            // 17291
 * @method commit                                                                                                      // 17292
 * @param {Context} context commit context                                                                             // 17293
 */                                                                                                                    // 17294
Scroller.prototype.commit = function commit(context) {                                                                 // 17295
    var transform = context.transform;                                                                                 // 17296
    var opacity = context.opacity;                                                                                     // 17297
    var origin = context.origin;                                                                                       // 17298
    var size = context.size;                                                                                           // 17299
                                                                                                                       // 17300
    // reset edge detection on size change                                                                             // 17301
    if (!this.options.clipSize && (size[0] !== this._contextSize[0] || size[1] !== this._contextSize[1])) {            // 17302
        this._onEdge = 0;                                                                                              // 17303
        this._contextSize[0] = size[0];                                                                                // 17304
        this._contextSize[1] = size[1];                                                                                // 17305
                                                                                                                       // 17306
        if (this.options.direction === Utility.Direction.X) {                                                          // 17307
            this._size[0] = _getClipSize.call(this);                                                                   // 17308
            this._size[1] = undefined;                                                                                 // 17309
        }                                                                                                              // 17310
        else {                                                                                                         // 17311
            this._size[0] = undefined;                                                                                 // 17312
            this._size[1] = _getClipSize.call(this);                                                                   // 17313
        }                                                                                                              // 17314
    }                                                                                                                  // 17315
                                                                                                                       // 17316
    var scrollTransform = this._masterOutputFunction(-this._position);                                                 // 17317
                                                                                                                       // 17318
    return {                                                                                                           // 17319
        transform: Transform.multiply(transform, scrollTransform),                                                     // 17320
        size: size,                                                                                                    // 17321
        opacity: opacity,                                                                                              // 17322
        origin: origin,                                                                                                // 17323
        target: this.group.render()                                                                                    // 17324
    };                                                                                                                 // 17325
};                                                                                                                     // 17326
                                                                                                                       // 17327
function _innerRender() {                                                                                              // 17328
    var size = null;                                                                                                   // 17329
    var position = this._position;                                                                                     // 17330
    var result = [];                                                                                                   // 17331
                                                                                                                       // 17332
    var offset = -this._positionOffset;                                                                                // 17333
    var clipSize = _getClipSize.call(this);                                                                            // 17334
    var currNode = this._node;                                                                                         // 17335
    while (currNode && offset - position < clipSize + this.options.margin) {                                           // 17336
        offset += _output.call(this, currNode, offset, result);                                                        // 17337
        currNode = currNode.getNext ? currNode.getNext() : null;                                                       // 17338
    }                                                                                                                  // 17339
                                                                                                                       // 17340
    var sizeNode = this._node;                                                                                         // 17341
    var nodesSize = _sizeForDir.call(this, sizeNode.getSize());                                                        // 17342
    if (offset < clipSize) {                                                                                           // 17343
        while (sizeNode && nodesSize < clipSize) {                                                                     // 17344
            sizeNode = sizeNode.getPrevious();                                                                         // 17345
            if (sizeNode) nodesSize += _sizeForDir.call(this, sizeNode.getSize());                                     // 17346
        }                                                                                                              // 17347
        sizeNode = this._node;                                                                                         // 17348
        while (sizeNode && nodesSize < clipSize) {                                                                     // 17349
            sizeNode = sizeNode.getNext();                                                                             // 17350
            if (sizeNode) nodesSize += _sizeForDir.call(this, sizeNode.getSize());                                     // 17351
        }                                                                                                              // 17352
    }                                                                                                                  // 17353
                                                                                                                       // 17354
    if (!currNode && offset - position < clipSize - EDGE_TOLERANCE) {                                                  // 17355
        if (this._onEdge !== 1){                                                                                       // 17356
            this._onEdge = 1;                                                                                          // 17357
            this._eventOutput.emit('onEdge', {                                                                         // 17358
                position: offset - clipSize                                                                            // 17359
            });                                                                                                        // 17360
        }                                                                                                              // 17361
    }                                                                                                                  // 17362
    else if (!this._node.getPrevious() && position < -EDGE_TOLERANCE) {                                                // 17363
        if (this._onEdge !== -1) {                                                                                     // 17364
            this._onEdge = -1;                                                                                         // 17365
            this._eventOutput.emit('onEdge', {                                                                         // 17366
                position: 0                                                                                            // 17367
            });                                                                                                        // 17368
        }                                                                                                              // 17369
    }                                                                                                                  // 17370
    else {                                                                                                             // 17371
        if (this._onEdge !== 0){                                                                                       // 17372
            this._onEdge = 0;                                                                                          // 17373
            this._eventOutput.emit('offEdge');                                                                         // 17374
        }                                                                                                              // 17375
    }                                                                                                                  // 17376
                                                                                                                       // 17377
    // backwards                                                                                                       // 17378
    currNode = (this._node && this._node.getPrevious) ? this._node.getPrevious() : null;                               // 17379
    offset = -this._positionOffset;                                                                                    // 17380
    if (currNode) {                                                                                                    // 17381
        size = currNode.getSize ? currNode.getSize() : this._contextSize;                                              // 17382
        offset -= _sizeForDir.call(this, size);                                                                        // 17383
    }                                                                                                                  // 17384
                                                                                                                       // 17385
    while (currNode && ((offset - position) > -(clipSize + this.options.margin))) {                                    // 17386
        _output.call(this, currNode, offset, result);                                                                  // 17387
        currNode = currNode.getPrevious ? currNode.getPrevious() : null;                                               // 17388
        if (currNode) {                                                                                                // 17389
            size = currNode.getSize ? currNode.getSize() : this._contextSize;                                          // 17390
            offset -= _sizeForDir.call(this, size);                                                                    // 17391
        }                                                                                                              // 17392
    }                                                                                                                  // 17393
                                                                                                                       // 17394
    return result;                                                                                                     // 17395
}                                                                                                                      // 17396
                                                                                                                       // 17397
module.exports = Scroller;                                                                                             // 17398
},{"../core/Entity":5,"../core/EventHandler":7,"../core/Group":8,"../core/OptionsManager":10,"../core/Transform":15,"../core/ViewSequence":17,"../utilities/Utility":95}],109:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 17400
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 17401
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 17402
 *                                                                                                                     // 17403
 * Owner: felix@famo.us                                                                                                // 17404
 * @license MPL 2.0                                                                                                    // 17405
 * @copyright Famous Industries, Inc. 2014                                                                             // 17406
 */                                                                                                                    // 17407
                                                                                                                       // 17408
var PhysicsEngine = require('../physics/PhysicsEngine');                                                               // 17409
var Particle = require('../physics/bodies/Particle');                                                                  // 17410
var Drag = require('../physics/forces/Drag');                                                                          // 17411
var Spring = require('../physics/forces/Spring');                                                                      // 17412
var EventHandler = require('../core/EventHandler');                                                                    // 17413
var OptionsManager = require('../core/OptionsManager');                                                                // 17414
var ViewSequence = require('../core/ViewSequence');                                                                    // 17415
var Scroller = require('../views/Scroller');                                                                           // 17416
var Utility = require('../utilities/Utility');                                                                         // 17417
var GenericSync = require('../inputs/GenericSync');                                                                    // 17418
var ScrollSync = require('../inputs/ScrollSync');                                                                      // 17419
var TouchSync = require('../inputs/TouchSync');                                                                        // 17420
GenericSync.register({scroll : ScrollSync, touch : TouchSync});                                                        // 17421
                                                                                                                       // 17422
/** @const */                                                                                                          // 17423
var TOLERANCE = 0.5;                                                                                                   // 17424
                                                                                                                       // 17425
/** @enum */                                                                                                           // 17426
var SpringStates = {                                                                                                   // 17427
    NONE: 0,                                                                                                           // 17428
    EDGE: 1,                                                                                                           // 17429
    PAGE: 2                                                                                                            // 17430
};                                                                                                                     // 17431
                                                                                                                       // 17432
/** @enum */                                                                                                           // 17433
var EdgeStates = {                                                                                                     // 17434
    TOP:   -1,                                                                                                         // 17435
    NONE:   0,                                                                                                         // 17436
    BOTTOM: 1                                                                                                          // 17437
};                                                                                                                     // 17438
                                                                                                                       // 17439
/**                                                                                                                    // 17440
 * Scrollview will lay out a collection of renderables sequentially in the specified direction, and will               // 17441
 * allow you to scroll through them with mousewheel or touch events.                                                   // 17442
 * @class Scrollview                                                                                                   // 17443
 * @constructor                                                                                                        // 17444
 * @param {Options} [options] An object of configurable options.                                                       // 17445
 * @param {Number} [options.direction=Utility.Direction.Y] Using the direction helper found in the famous Utility      // 17446
 * module, this option will lay out the Scrollview instance's renderables either horizontally                          // 17447
 * (x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free                  // 17448
 * to just use integers as well.                                                                                       // 17449
 * @param {Boolean} [options.rails=true] When true, Scrollview's genericSync will only process input in it's primary access.
 * @param {Number} [clipSize=undefined] The size of the area (in pixels) that Scrollview will display content in.      // 17451
 * @param {Number} [margin=undefined] The size of the area (in pixels) that Scrollview will process renderables' associated calculations in.
 * @param {Number} [friction=0.001] Input resistance proportional to the velocity of the input.                        // 17453
 * Controls the feel of the Scrollview instance at low velocities.                                                     // 17454
 * @param {Number} [drag=0.0001] Input resistance proportional to the square of the velocity of the input.             // 17455
 * Affects Scrollview instance more prominently at high velocities.                                                    // 17456
 * @param {Number} [edgeGrip=0.5] A coefficient for resistance against after-touch momentum.                           // 17457
 * @param {Number} [egePeriod=300] Sets the period on the spring that handles the physics associated                   // 17458
 * with hitting the end of a scrollview.                                                                               // 17459
 * @param {Number} [edgeDamp=1] Sets the damping on the spring that handles the physics associated                     // 17460
 * with hitting the end of a scrollview.                                                                               // 17461
 * @param {Boolean} [paginated=false] A paginated scrollview will scroll through items discretely                      // 17462
 * rather than continously.                                                                                            // 17463
 * @param {Number} [pagePeriod=500] Sets the period on the spring that handles the physics associated                  // 17464
 * with pagination.                                                                                                    // 17465
 * @param {Number} [pageDamp=0.8] Sets the damping on the spring that handles the physics associated                   // 17466
 * with pagination.                                                                                                    // 17467
 * @param {Number} [pageStopSpeed=Infinity] The threshold for determining the amount of velocity                       // 17468
 * required to trigger pagination. The lower the threshold, the easier it is to scroll continuosly.                    // 17469
 * @param {Number} [pageSwitchSpeed=1] The threshold for momentum-based velocity pagination.                           // 17470
 * @param {Number} [speedLimit=10] The highest scrolling speed you can reach.                                          // 17471
 */                                                                                                                    // 17472
function Scrollview(options) {                                                                                         // 17473
    // patch options with defaults                                                                                     // 17474
    this.options = Object.create(Scrollview.DEFAULT_OPTIONS);                                                          // 17475
    this._optionsManager = new OptionsManager(this.options);                                                           // 17476
                                                                                                                       // 17477
    // create sub-components                                                                                           // 17478
    this._scroller = new Scroller(this.options);                                                                       // 17479
                                                                                                                       // 17480
    this.sync = new GenericSync(                                                                                       // 17481
        ['scroll', 'touch'],                                                                                           // 17482
        {                                                                                                              // 17483
            direction : this.options.direction,                                                                        // 17484
            scale : this.options.syncScale,                                                                            // 17485
            rails: this.options.rails,                                                                                 // 17486
            preventDefault: this.options.preventDefault !== undefined                                                  // 17487
                ? this.options.preventDefault                                                                          // 17488
                : this.options.direction !== Utility.Direction.Y                                                       // 17489
        }                                                                                                              // 17490
    );                                                                                                                 // 17491
                                                                                                                       // 17492
    this._physicsEngine = new PhysicsEngine();                                                                         // 17493
    this._particle = new Particle();                                                                                   // 17494
    this._physicsEngine.addBody(this._particle);                                                                       // 17495
                                                                                                                       // 17496
    this.spring = new Spring({                                                                                         // 17497
        anchor: [0, 0, 0],                                                                                             // 17498
        period: this.options.edgePeriod,                                                                               // 17499
        dampingRatio: this.options.edgeDamp                                                                            // 17500
    });                                                                                                                // 17501
    this.drag = new Drag({                                                                                             // 17502
        forceFunction: Drag.FORCE_FUNCTIONS.QUADRATIC,                                                                 // 17503
        strength: this.options.drag                                                                                    // 17504
    });                                                                                                                // 17505
    this.friction = new Drag({                                                                                         // 17506
        forceFunction: Drag.FORCE_FUNCTIONS.LINEAR,                                                                    // 17507
        strength: this.options.friction                                                                                // 17508
    });                                                                                                                // 17509
                                                                                                                       // 17510
    // state                                                                                                           // 17511
    this._node = null;                                                                                                 // 17512
    this._touchCount = 0;                                                                                              // 17513
    this._springState = SpringStates.NONE;                                                                             // 17514
    this._onEdge = EdgeStates.NONE;                                                                                    // 17515
    this._pageSpringPosition = 0;                                                                                      // 17516
    this._edgeSpringPosition = 0;                                                                                      // 17517
    this._touchVelocity = 0;                                                                                           // 17518
    this._earlyEnd = false;                                                                                            // 17519
    this._needsPaginationCheck = false;                                                                                // 17520
    this._displacement = 0;                                                                                            // 17521
    this._totalShift = 0;                                                                                              // 17522
    this._cachedIndex = 0;                                                                                             // 17523
                                                                                                                       // 17524
    // subcomponent logic                                                                                              // 17525
    this._scroller.positionFrom(this.getPosition.bind(this));                                                          // 17526
                                                                                                                       // 17527
    // eventing                                                                                                        // 17528
    this._eventInput = new EventHandler();                                                                             // 17529
    this._eventOutput = new EventHandler();                                                                            // 17530
                                                                                                                       // 17531
    this._eventInput.pipe(this.sync);                                                                                  // 17532
    this.sync.pipe(this._eventInput);                                                                                  // 17533
                                                                                                                       // 17534
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 17535
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 17536
                                                                                                                       // 17537
    _bindEvents.call(this);                                                                                            // 17538
                                                                                                                       // 17539
    // override default options with passed-in custom options                                                          // 17540
    if (options) this.setOptions(options);                                                                             // 17541
}                                                                                                                      // 17542
                                                                                                                       // 17543
Scrollview.DEFAULT_OPTIONS = {                                                                                         // 17544
    direction: Utility.Direction.Y,                                                                                    // 17545
    rails: true,                                                                                                       // 17546
    friction: 0.005,                                                                                                   // 17547
    drag: 0.0001,                                                                                                      // 17548
    edgeGrip: 0.2,                                                                                                     // 17549
    edgePeriod: 300,                                                                                                   // 17550
    edgeDamp: 1,                                                                                                       // 17551
    margin: 1000,       // mostly safe                                                                                 // 17552
    paginated: false,                                                                                                  // 17553
    pagePeriod: 500,                                                                                                   // 17554
    pageDamp: 0.8,                                                                                                     // 17555
    pageStopSpeed: 10,                                                                                                 // 17556
    pageSwitchSpeed: 0.5,                                                                                              // 17557
    speedLimit: 5,                                                                                                     // 17558
    groupScroll: false,                                                                                                // 17559
    syncScale: 1                                                                                                       // 17560
};                                                                                                                     // 17561
                                                                                                                       // 17562
function _handleStart(event) {                                                                                         // 17563
    this._touchCount = event.count;                                                                                    // 17564
    if (event.count === undefined) this._touchCount = 1;                                                               // 17565
                                                                                                                       // 17566
    _detachAgents.call(this);                                                                                          // 17567
                                                                                                                       // 17568
    this.setVelocity(0);                                                                                               // 17569
    this._touchVelocity = 0;                                                                                           // 17570
    this._earlyEnd = false;                                                                                            // 17571
}                                                                                                                      // 17572
                                                                                                                       // 17573
function _handleMove(event) {                                                                                          // 17574
    var velocity = -event.velocity;                                                                                    // 17575
    var delta = -event.delta;                                                                                          // 17576
                                                                                                                       // 17577
    if (this._onEdge !== EdgeStates.NONE && event.slip) {                                                              // 17578
        if ((velocity < 0 && this._onEdge === EdgeStates.TOP) || (velocity > 0 && this._onEdge === EdgeStates.BOTTOM)) {
            if (!this._earlyEnd) {                                                                                     // 17580
                _handleEnd.call(this, event);                                                                          // 17581
                this._earlyEnd = true;                                                                                 // 17582
            }                                                                                                          // 17583
        }                                                                                                              // 17584
        else if (this._earlyEnd && (Math.abs(velocity) > Math.abs(this.getVelocity()))) {                              // 17585
            _handleStart.call(this, event);                                                                            // 17586
        }                                                                                                              // 17587
    }                                                                                                                  // 17588
    if (this._earlyEnd) return;                                                                                        // 17589
    this._touchVelocity = velocity;                                                                                    // 17590
                                                                                                                       // 17591
    if (event.slip) {                                                                                                  // 17592
        var speedLimit = this.options.speedLimit;                                                                      // 17593
        if (velocity < -speedLimit) velocity = -speedLimit;                                                            // 17594
        else if (velocity > speedLimit) velocity = speedLimit;                                                         // 17595
                                                                                                                       // 17596
        this.setVelocity(velocity);                                                                                    // 17597
                                                                                                                       // 17598
        var deltaLimit = speedLimit * 16;                                                                              // 17599
        if (delta > deltaLimit) delta = deltaLimit;                                                                    // 17600
        else if (delta < -deltaLimit) delta = -deltaLimit;                                                             // 17601
    }                                                                                                                  // 17602
                                                                                                                       // 17603
    this.setPosition(this.getPosition() + delta);                                                                      // 17604
    this._displacement += delta;                                                                                       // 17605
                                                                                                                       // 17606
    if (this._springState === SpringStates.NONE) _normalizeState.call(this);                                           // 17607
}                                                                                                                      // 17608
                                                                                                                       // 17609
function _handleEnd(event) {                                                                                           // 17610
    this._touchCount = event.count || 0;                                                                               // 17611
    if (!this._touchCount) {                                                                                           // 17612
        _detachAgents.call(this);                                                                                      // 17613
        if (this._onEdge !== EdgeStates.NONE) _setSpring.call(this, this._edgeSpringPosition, SpringStates.EDGE);      // 17614
        _attachAgents.call(this);                                                                                      // 17615
        var velocity = -event.velocity;                                                                                // 17616
        var speedLimit = this.options.speedLimit;                                                                      // 17617
        if (event.slip) speedLimit *= this.options.edgeGrip;                                                           // 17618
        if (velocity < -speedLimit) velocity = -speedLimit;                                                            // 17619
        else if (velocity > speedLimit) velocity = speedLimit;                                                         // 17620
        this.setVelocity(velocity);                                                                                    // 17621
        this._touchVelocity = 0;                                                                                       // 17622
        this._needsPaginationCheck = true;                                                                             // 17623
    }                                                                                                                  // 17624
}                                                                                                                      // 17625
                                                                                                                       // 17626
function _bindEvents() {                                                                                               // 17627
    this._eventInput.bindThis(this);                                                                                   // 17628
    this._eventInput.on('start', _handleStart);                                                                        // 17629
    this._eventInput.on('update', _handleMove);                                                                        // 17630
    this._eventInput.on('end', _handleEnd);                                                                            // 17631
                                                                                                                       // 17632
    this._eventInput.on('resize', function() {                                                                         // 17633
        this._node._.calculateSize();                                                                                  // 17634
    }.bind(this));                                                                                                     // 17635
                                                                                                                       // 17636
    this._scroller.on('onEdge', function(data) {                                                                       // 17637
        this._edgeSpringPosition = data.position;                                                                      // 17638
        _handleEdge.call(this, this._scroller.onEdge());                                                               // 17639
        this._eventOutput.emit('onEdge');                                                                              // 17640
    }.bind(this));                                                                                                     // 17641
                                                                                                                       // 17642
    this._scroller.on('offEdge', function() {                                                                          // 17643
        this.sync.setOptions({scale: this.options.syncScale});                                                         // 17644
        this._onEdge = this._scroller.onEdge();                                                                        // 17645
        this._eventOutput.emit('offEdge');                                                                             // 17646
    }.bind(this));                                                                                                     // 17647
                                                                                                                       // 17648
    this._particle.on('update', function(particle) {                                                                   // 17649
        if (this._springState === SpringStates.NONE) _normalizeState.call(this);                                       // 17650
        this._displacement = particle.position.x - this._totalShift;                                                   // 17651
    }.bind(this));                                                                                                     // 17652
                                                                                                                       // 17653
    this._particle.on('end', function() {                                                                              // 17654
        if (!this.options.paginated || (this.options.paginated && this._springState !== SpringStates.NONE))            // 17655
            this._eventOutput.emit('settle');                                                                          // 17656
    }.bind(this));                                                                                                     // 17657
}                                                                                                                      // 17658
                                                                                                                       // 17659
function _attachAgents() {                                                                                             // 17660
    if (this._springState) this._physicsEngine.attach([this.spring], this._particle);                                  // 17661
    else this._physicsEngine.attach([this.drag, this.friction], this._particle);                                       // 17662
}                                                                                                                      // 17663
                                                                                                                       // 17664
function _detachAgents() {                                                                                             // 17665
    this._springState = SpringStates.NONE;                                                                             // 17666
    this._physicsEngine.detachAll();                                                                                   // 17667
}                                                                                                                      // 17668
                                                                                                                       // 17669
function _nodeSizeForDirection(node) {                                                                                 // 17670
    var direction = this.options.direction;                                                                            // 17671
    var nodeSize = node.getSize();                                                                                     // 17672
    return (!nodeSize) ? this._scroller.getSize()[direction] : nodeSize[direction];                                    // 17673
}                                                                                                                      // 17674
                                                                                                                       // 17675
function _handleEdge(edge) {                                                                                           // 17676
    this.sync.setOptions({scale: this.options.edgeGrip});                                                              // 17677
    this._onEdge = edge;                                                                                               // 17678
                                                                                                                       // 17679
    if (!this._touchCount && this._springState !== SpringStates.EDGE) {                                                // 17680
        _setSpring.call(this, this._edgeSpringPosition, SpringStates.EDGE);                                            // 17681
    }                                                                                                                  // 17682
                                                                                                                       // 17683
    if (this._springState && Math.abs(this.getVelocity()) < 0.001) {                                                   // 17684
        // reset agents, detaching the spring                                                                          // 17685
        _detachAgents.call(this);                                                                                      // 17686
        _attachAgents.call(this);                                                                                      // 17687
    }                                                                                                                  // 17688
}                                                                                                                      // 17689
                                                                                                                       // 17690
function _handlePagination() {                                                                                         // 17691
    if (this._touchCount) return;                                                                                      // 17692
    if (this._springState === SpringStates.EDGE) return;                                                               // 17693
                                                                                                                       // 17694
    var velocity = this.getVelocity();                                                                                 // 17695
    if (Math.abs(velocity) >= this.options.pageStopSpeed) return;                                                      // 17696
                                                                                                                       // 17697
    var position = this.getPosition();                                                                                 // 17698
    var velocitySwitch = Math.abs(velocity) > this.options.pageSwitchSpeed;                                            // 17699
                                                                                                                       // 17700
    // parameters to determine when to switch                                                                          // 17701
    var nodeSize = _nodeSizeForDirection.call(this, this._node);                                                       // 17702
    var positionNext = position > 0.5 * nodeSize;                                                                      // 17703
    var positionPrev = position < 0.5 * nodeSize;                                                                      // 17704
                                                                                                                       // 17705
    var velocityNext = velocity > 0;                                                                                   // 17706
    var velocityPrev = velocity < 0;                                                                                   // 17707
                                                                                                                       // 17708
    this._needsPaginationCheck = false;                                                                                // 17709
                                                                                                                       // 17710
    if ((positionNext && !velocitySwitch) || (velocitySwitch && velocityNext)) {                                       // 17711
        this.goToNextPage();                                                                                           // 17712
    }                                                                                                                  // 17713
    else if (velocitySwitch && velocityPrev) {                                                                         // 17714
        this.goToPreviousPage();                                                                                       // 17715
    }                                                                                                                  // 17716
    else _setSpring.call(this, 0, SpringStates.PAGE);                                                                  // 17717
}                                                                                                                      // 17718
                                                                                                                       // 17719
function _setSpring(position, springState) {                                                                           // 17720
    var springOptions;                                                                                                 // 17721
    if (springState === SpringStates.EDGE) {                                                                           // 17722
        this._edgeSpringPosition = position;                                                                           // 17723
        springOptions = {                                                                                              // 17724
            anchor: [this._edgeSpringPosition, 0, 0],                                                                  // 17725
            period: this.options.edgePeriod,                                                                           // 17726
            dampingRatio: this.options.edgeDamp                                                                        // 17727
        };                                                                                                             // 17728
    }                                                                                                                  // 17729
    else if (springState === SpringStates.PAGE) {                                                                      // 17730
        this._pageSpringPosition = position;                                                                           // 17731
        springOptions = {                                                                                              // 17732
            anchor: [this._pageSpringPosition, 0, 0],                                                                  // 17733
            period: this.options.pagePeriod,                                                                           // 17734
            dampingRatio: this.options.pageDamp                                                                        // 17735
        };                                                                                                             // 17736
    }                                                                                                                  // 17737
                                                                                                                       // 17738
    this.spring.setOptions(springOptions);                                                                             // 17739
    if (springState && !this._springState) {                                                                           // 17740
        _detachAgents.call(this);                                                                                      // 17741
        this._springState = springState;                                                                               // 17742
        _attachAgents.call(this);                                                                                      // 17743
    }                                                                                                                  // 17744
    this._springState = springState;                                                                                   // 17745
}                                                                                                                      // 17746
                                                                                                                       // 17747
function _normalizeState() {                                                                                           // 17748
    var offset = 0;                                                                                                    // 17749
                                                                                                                       // 17750
    var position = this.getPosition();                                                                                 // 17751
    position += (position < 0 ? -0.5 : 0.5) >> 0;                                                                      // 17752
                                                                                                                       // 17753
    var nodeSize = _nodeSizeForDirection.call(this, this._node);                                                       // 17754
    var nextNode = this._node.getNext();                                                                               // 17755
                                                                                                                       // 17756
    while (offset + position >= nodeSize && nextNode) {                                                                // 17757
        offset -= nodeSize;                                                                                            // 17758
        this._scroller.sequenceFrom(nextNode);                                                                         // 17759
        this._node = nextNode;                                                                                         // 17760
        nextNode = this._node.getNext();                                                                               // 17761
        nodeSize = _nodeSizeForDirection.call(this, this._node);                                                       // 17762
    }                                                                                                                  // 17763
                                                                                                                       // 17764
    var previousNode = this._node.getPrevious();                                                                       // 17765
    var previousNodeSize;                                                                                              // 17766
                                                                                                                       // 17767
    while (offset + position <= 0 && previousNode) {                                                                   // 17768
        previousNodeSize = _nodeSizeForDirection.call(this, previousNode);                                             // 17769
        this._scroller.sequenceFrom(previousNode);                                                                     // 17770
        this._node = previousNode;                                                                                     // 17771
        offset += previousNodeSize;                                                                                    // 17772
        previousNode = this._node.getPrevious();                                                                       // 17773
    }                                                                                                                  // 17774
                                                                                                                       // 17775
    if (offset) _shiftOrigin.call(this, offset);                                                                       // 17776
                                                                                                                       // 17777
    if (this._node) {                                                                                                  // 17778
        if (this._node.index !== this._cachedIndex) {                                                                  // 17779
            if (this.getPosition() < 0.5 * nodeSize) {                                                                 // 17780
                this._cachedIndex = this._node.index;                                                                  // 17781
                this._eventOutput.emit('pageChange', {direction: -1, index: this._cachedIndex});                       // 17782
            }                                                                                                          // 17783
        } else {                                                                                                       // 17784
            if (this.getPosition() > 0.5 * nodeSize) {                                                                 // 17785
                this._cachedIndex = this._node.index + 1;                                                              // 17786
                this._eventOutput.emit('pageChange', {direction: 1, index: this._cachedIndex});                        // 17787
            }                                                                                                          // 17788
        }                                                                                                              // 17789
    }                                                                                                                  // 17790
}                                                                                                                      // 17791
                                                                                                                       // 17792
function _shiftOrigin(amount) {                                                                                        // 17793
    this._edgeSpringPosition += amount;                                                                                // 17794
    this._pageSpringPosition += amount;                                                                                // 17795
    this.setPosition(this.getPosition() + amount);                                                                     // 17796
    this._totalShift += amount;                                                                                        // 17797
                                                                                                                       // 17798
    if (this._springState === SpringStates.EDGE) {                                                                     // 17799
        this.spring.setOptions({anchor: [this._edgeSpringPosition, 0, 0]});                                            // 17800
    }                                                                                                                  // 17801
    else if (this._springState === SpringStates.PAGE) {                                                                // 17802
        this.spring.setOptions({anchor: [this._pageSpringPosition, 0, 0]});                                            // 17803
    }                                                                                                                  // 17804
}                                                                                                                      // 17805
                                                                                                                       // 17806
/**                                                                                                                    // 17807
 * Returns the index of the first visible renderable                                                                   // 17808
 *                                                                                                                     // 17809
 * @method getCurrentIndex                                                                                             // 17810
 * @return {Number} The current index of the ViewSequence                                                              // 17811
 */                                                                                                                    // 17812
Scrollview.prototype.getCurrentIndex = function getCurrentIndex() {                                                    // 17813
    return this._node.index;                                                                                           // 17814
};                                                                                                                     // 17815
                                                                                                                       // 17816
/**                                                                                                                    // 17817
 * goToPreviousPage paginates your Scrollview instance backwards by one item.                                          // 17818
 *                                                                                                                     // 17819
 * @method goToPreviousPage                                                                                            // 17820
 * @return {ViewSequence} The previous node.                                                                           // 17821
 */                                                                                                                    // 17822
Scrollview.prototype.goToPreviousPage = function goToPreviousPage() {                                                  // 17823
    if (!this._node || this._onEdge === EdgeStates.TOP) return null;                                                   // 17824
                                                                                                                       // 17825
    // if moving back to the current node                                                                              // 17826
    if (this.getPosition() > 1 && this._springState === SpringStates.NONE) {                                           // 17827
        _setSpring.call(this, 0, SpringStates.PAGE);                                                                   // 17828
        return this._node;                                                                                             // 17829
    }                                                                                                                  // 17830
                                                                                                                       // 17831
    // if moving to the previous node                                                                                  // 17832
    var previousNode = this._node.getPrevious();                                                                       // 17833
    if (previousNode) {                                                                                                // 17834
        var previousNodeSize = _nodeSizeForDirection.call(this, previousNode);                                         // 17835
        this._scroller.sequenceFrom(previousNode);                                                                     // 17836
        this._node = previousNode;                                                                                     // 17837
        _shiftOrigin.call(this, previousNodeSize);                                                                     // 17838
        _setSpring.call(this, 0, SpringStates.PAGE);                                                                   // 17839
    }                                                                                                                  // 17840
    return previousNode;                                                                                               // 17841
};                                                                                                                     // 17842
                                                                                                                       // 17843
/**                                                                                                                    // 17844
 * goToNextPage paginates your Scrollview instance forwards by one item.                                               // 17845
 *                                                                                                                     // 17846
 * @method goToNextPage                                                                                                // 17847
 * @return {ViewSequence} The next node.                                                                               // 17848
 */                                                                                                                    // 17849
Scrollview.prototype.goToNextPage = function goToNextPage() {                                                          // 17850
    if (!this._node || this._onEdge === EdgeStates.BOTTOM) return null;                                                // 17851
    var nextNode = this._node.getNext();                                                                               // 17852
    if (nextNode) {                                                                                                    // 17853
        var currentNodeSize = _nodeSizeForDirection.call(this, this._node);                                            // 17854
        this._scroller.sequenceFrom(nextNode);                                                                         // 17855
        this._node = nextNode;                                                                                         // 17856
        _shiftOrigin.call(this, -currentNodeSize);                                                                     // 17857
        _setSpring.call(this, 0, SpringStates.PAGE);                                                                   // 17858
    }                                                                                                                  // 17859
    return nextNode;                                                                                                   // 17860
};                                                                                                                     // 17861
                                                                                                                       // 17862
/**                                                                                                                    // 17863
 * Paginates the Scrollview to an absolute page index.                                                                 // 17864
 *                                                                                                                     // 17865
 * @method goToPage                                                                                                    // 17866
 */                                                                                                                    // 17867
Scrollview.prototype.goToPage = function goToPage(index) {                                                             // 17868
    var currentIndex = this.getCurrentIndex();                                                                         // 17869
    var i;                                                                                                             // 17870
                                                                                                                       // 17871
    if (currentIndex > index) {                                                                                        // 17872
        for (i = 0; i < currentIndex - index; i++)                                                                     // 17873
            this.goToPreviousPage();                                                                                   // 17874
    }                                                                                                                  // 17875
                                                                                                                       // 17876
    if (currentIndex < index) {                                                                                        // 17877
        for (i = 0; i < index - currentIndex; i++)                                                                     // 17878
            this.goToNextPage();                                                                                       // 17879
    }                                                                                                                  // 17880
};                                                                                                                     // 17881
                                                                                                                       // 17882
Scrollview.prototype.outputFrom = function outputFrom() {                                                              // 17883
    return this._scroller.outputFrom.apply(this._scroller, arguments);                                                 // 17884
};                                                                                                                     // 17885
                                                                                                                       // 17886
/**                                                                                                                    // 17887
 * Returns the position associated with the Scrollview instance's current node                                         // 17888
 *  (generally the node currently at the top).                                                                         // 17889
 *                                                                                                                     // 17890
 * @deprecated                                                                                                         // 17891
 * @method getPosition                                                                                                 // 17892
 * @param {number} [node] If specified, returns the position of the node at that index in the                          // 17893
 * Scrollview instance's currently managed collection.                                                                 // 17894
 * @return {number} The position of either the specified node, or the Scrollview's current Node,                       // 17895
 * in pixels translated.                                                                                               // 17896
 */                                                                                                                    // 17897
Scrollview.prototype.getPosition = function getPosition() {                                                            // 17898
    return this._particle.getPosition1D();                                                                             // 17899
};                                                                                                                     // 17900
                                                                                                                       // 17901
/**                                                                                                                    // 17902
 * Returns the absolute position associated with the Scrollview instance                                               // 17903
 *                                                                                                                     // 17904
 * @method getAbsolutePosition                                                                                         // 17905
 * @return {number} The position of the Scrollview's current Node,                                                     // 17906
 * in pixels translated.                                                                                               // 17907
 */                                                                                                                    // 17908
Scrollview.prototype.getAbsolutePosition = function getAbsolutePosition() {                                            // 17909
    return this._scroller.getCumulativeSize(this.getCurrentIndex())[this.options.direction] + this.getPosition();      // 17910
};                                                                                                                     // 17911
                                                                                                                       // 17912
/**                                                                                                                    // 17913
 * Returns the offset associated with the Scrollview instance's current node                                           // 17914
 *  (generally the node currently at the top).                                                                         // 17915
 *                                                                                                                     // 17916
 * @method getOffset                                                                                                   // 17917
 * @param {number} [node] If specified, returns the position of the node at that index in the                          // 17918
 * Scrollview instance's currently managed collection.                                                                 // 17919
 * @return {number} The position of either the specified node, or the Scrollview's current Node,                       // 17920
 * in pixels translated.                                                                                               // 17921
 */                                                                                                                    // 17922
Scrollview.prototype.getOffset = Scrollview.prototype.getPosition;                                                     // 17923
                                                                                                                       // 17924
/**                                                                                                                    // 17925
 * Sets the position of the physics particle that controls Scrollview instance's "position"                            // 17926
 *                                                                                                                     // 17927
 * @deprecated                                                                                                         // 17928
 * @method setPosition                                                                                                 // 17929
 * @param {number} x The amount of pixels you want your scrollview to progress by.                                     // 17930
 */                                                                                                                    // 17931
Scrollview.prototype.setPosition = function setPosition(x) {                                                           // 17932
    this._particle.setPosition1D(x);                                                                                   // 17933
};                                                                                                                     // 17934
                                                                                                                       // 17935
/**                                                                                                                    // 17936
 * Sets the offset of the physics particle that controls Scrollview instance's "position"                              // 17937
 *                                                                                                                     // 17938
 * @method setPosition                                                                                                 // 17939
 * @param {number} x The amount of pixels you want your scrollview to progress by.                                     // 17940
 */                                                                                                                    // 17941
Scrollview.prototype.setOffset = Scrollview.prototype.setPosition;                                                     // 17942
                                                                                                                       // 17943
/**                                                                                                                    // 17944
 * Returns the Scrollview instance's velocity.                                                                         // 17945
 *                                                                                                                     // 17946
 * @method getVelocity                                                                                                 // 17947
 * @return {Number} The velocity.                                                                                      // 17948
 */                                                                                                                    // 17949
                                                                                                                       // 17950
Scrollview.prototype.getVelocity = function getVelocity() {                                                            // 17951
    return this._touchCount ? this._touchVelocity : this._particle.getVelocity1D();                                    // 17952
};                                                                                                                     // 17953
                                                                                                                       // 17954
/**                                                                                                                    // 17955
 * Sets the Scrollview instance's velocity. Until affected by input or another call of setVelocity                     // 17956
 *  the Scrollview instance will scroll at the passed-in velocity.                                                     // 17957
 *                                                                                                                     // 17958
 * @method setVelocity                                                                                                 // 17959
 * @param {number} v The magnitude of the velocity.                                                                    // 17960
 */                                                                                                                    // 17961
Scrollview.prototype.setVelocity = function setVelocity(v) {                                                           // 17962
    this._particle.setVelocity1D(v);                                                                                   // 17963
};                                                                                                                     // 17964
                                                                                                                       // 17965
/**                                                                                                                    // 17966
 * Patches the Scrollview instance's options with the passed-in ones.                                                  // 17967
 *                                                                                                                     // 17968
 * @method setOptions                                                                                                  // 17969
 * @param {Options} options An object of configurable options for the Scrollview instance.                             // 17970
 */                                                                                                                    // 17971
Scrollview.prototype.setOptions = function setOptions(options) {                                                       // 17972
    // preprocess custom options                                                                                       // 17973
    if (options.direction !== undefined) {                                                                             // 17974
        if (options.direction === 'x') options.direction = Utility.Direction.X;                                        // 17975
        else if (options.direction === 'y') options.direction = Utility.Direction.Y;                                   // 17976
    }                                                                                                                  // 17977
                                                                                                                       // 17978
    if (options.groupScroll !== this.options.groupScroll) {                                                            // 17979
        if (options.groupScroll)                                                                                       // 17980
            this.subscribe(this._scroller);                                                                            // 17981
        else                                                                                                           // 17982
            this.unsubscribe(this._scroller);                                                                          // 17983
    }                                                                                                                  // 17984
                                                                                                                       // 17985
    // patch custom options                                                                                            // 17986
    this._optionsManager.setOptions(options);                                                                          // 17987
                                                                                                                       // 17988
    // propagate options to sub-components                                                                             // 17989
                                                                                                                       // 17990
    // scroller sub-component                                                                                          // 17991
    this._scroller.setOptions(options);                                                                                // 17992
                                                                                                                       // 17993
    // physics sub-components                                                                                          // 17994
    if (options.drag !== undefined) this.drag.setOptions({strength: this.options.drag});                               // 17995
    if (options.friction !== undefined) this.friction.setOptions({strength: this.options.friction});                   // 17996
    if (options.edgePeriod !== undefined || options.edgeDamp !== undefined) {                                          // 17997
        this.spring.setOptions({                                                                                       // 17998
            period: this.options.edgePeriod,                                                                           // 17999
            dampingRatio: this.options.edgeDamp                                                                        // 18000
        });                                                                                                            // 18001
    }                                                                                                                  // 18002
                                                                                                                       // 18003
    // sync sub-component                                                                                              // 18004
    if (options.rails || options.direction !== undefined || options.syncScale !== undefined || options.preventDefault) {
        this.sync.setOptions({                                                                                         // 18006
            rails: this.options.rails,                                                                                 // 18007
            direction: (this.options.direction === Utility.Direction.X) ? GenericSync.DIRECTION_X : GenericSync.DIRECTION_Y,
            scale: this.options.syncScale,                                                                             // 18009
            preventDefault: this.options.preventDefault                                                                // 18010
        });                                                                                                            // 18011
    }                                                                                                                  // 18012
};                                                                                                                     // 18013
                                                                                                                       // 18014
/**                                                                                                                    // 18015
 * Sets the collection of renderables under the Scrollview instance's control, by                                      // 18016
 *  setting its current node to the passed in ViewSequence. If you                                                     // 18017
 *  pass in an array, the Scrollview instance will set its node as a ViewSequence instantiated with                    // 18018
 *  the passed-in array.                                                                                               // 18019
 *                                                                                                                     // 18020
 * @method sequenceFrom                                                                                                // 18021
 * @param {Array|ViewSequence} node Either an array of renderables or a Famous viewSequence.                           // 18022
 */                                                                                                                    // 18023
Scrollview.prototype.sequenceFrom = function sequenceFrom(node) {                                                      // 18024
    if (node instanceof Array) node = new ViewSequence({array: node, trackSize: true});                                // 18025
    this._node = node;                                                                                                 // 18026
    return this._scroller.sequenceFrom(node);                                                                          // 18027
};                                                                                                                     // 18028
                                                                                                                       // 18029
/**                                                                                                                    // 18030
 * Returns the width and the height of the Scrollview instance.                                                        // 18031
 *                                                                                                                     // 18032
 * @method getSize                                                                                                     // 18033
 * @return {Array} A two value array of the Scrollview instance's current width and height (in that order).            // 18034
 */                                                                                                                    // 18035
Scrollview.prototype.getSize = function getSize() {                                                                    // 18036
    return this._scroller.getSize.apply(this._scroller, arguments);                                                    // 18037
};                                                                                                                     // 18038
                                                                                                                       // 18039
/**                                                                                                                    // 18040
 * Generate a render spec from the contents of this component.                                                         // 18041
 *                                                                                                                     // 18042
 * @private                                                                                                            // 18043
 * @method render                                                                                                      // 18044
 * @return {number} Render spec for this component                                                                     // 18045
 */                                                                                                                    // 18046
Scrollview.prototype.render = function render() {                                                                      // 18047
    if (this.options.paginated && this._needsPaginationCheck) _handlePagination.call(this);                            // 18048
                                                                                                                       // 18049
    return this._scroller.render();                                                                                    // 18050
};                                                                                                                     // 18051
                                                                                                                       // 18052
module.exports = Scrollview;                                                                                           // 18053
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../core/ViewSequence":17,"../inputs/GenericSync":27,"../inputs/ScrollSync":32,"../inputs/TouchSync":33,"../physics/PhysicsEngine":48,"../physics/bodies/Particle":51,"../physics/forces/Drag":63,"../physics/forces/Spring":68,"../utilities/Utility":95,"../views/Scroller":108}],110:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18055
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18056
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18057
 *                                                                                                                     // 18058
 * Owner: felix@famo.us                                                                                                // 18059
 * @license MPL 2.0                                                                                                    // 18060
 * @copyright Famous Industries, Inc. 2014                                                                             // 18061
 */                                                                                                                    // 18062
                                                                                                                       // 18063
var OptionsManager = require('../core/OptionsManager');                                                                // 18064
var Transform = require('../core/Transform');                                                                          // 18065
var ViewSequence = require('../core/ViewSequence');                                                                    // 18066
var Utility = require('../utilities/Utility');                                                                         // 18067
                                                                                                                       // 18068
/**                                                                                                                    // 18069
 * SequentialLayout will lay out a collection of renderables sequentially in the specified direction.                  // 18070
 * @class SequentialLayout                                                                                             // 18071
 * @constructor                                                                                                        // 18072
 * @param {Options} [options] An object of configurable options.                                                       // 18073
 * @param {Number} [options.direction=Utility.Direction.Y] Using the direction helper found in the famous Utility      // 18074
 * module, this option will lay out the SequentialLayout instance's renderables either horizontally                    // 18075
 * (x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free                  // 18076
 * to just use integers as well.                                                                                       // 18077
 */                                                                                                                    // 18078
function SequentialLayout(options) {                                                                                   // 18079
    this._items = null;                                                                                                // 18080
    this._size = null;                                                                                                 // 18081
    this._outputFunction = SequentialLayout.DEFAULT_OUTPUT_FUNCTION;                                                   // 18082
                                                                                                                       // 18083
    this.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || SequentialLayout.DEFAULT_OPTIONS);                // 18084
    this.optionsManager = new OptionsManager(this.options);                                                            // 18085
                                                                                                                       // 18086
    if (options) this.setOptions(options);                                                                             // 18087
}                                                                                                                      // 18088
                                                                                                                       // 18089
SequentialLayout.DEFAULT_OPTIONS = {                                                                                   // 18090
    direction: Utility.Direction.Y,                                                                                    // 18091
    itemSpacing: 0                                                                                                     // 18092
};                                                                                                                     // 18093
                                                                                                                       // 18094
SequentialLayout.DEFAULT_OUTPUT_FUNCTION = function DEFAULT_OUTPUT_FUNCTION(input, offset, index) {                    // 18095
    var transform = (this.options.direction === Utility.Direction.X) ? Transform.translate(offset, 0) : Transform.translate(0, offset);
    return {                                                                                                           // 18097
        transform: transform,                                                                                          // 18098
        target: input.render()                                                                                         // 18099
    };                                                                                                                 // 18100
};                                                                                                                     // 18101
                                                                                                                       // 18102
/**                                                                                                                    // 18103
 * Returns the width and the height of the SequentialLayout instance.                                                  // 18104
 *                                                                                                                     // 18105
 * @method getSize                                                                                                     // 18106
 * @return {Array} A two value array of the SequentialLayout instance's current width and height (in that order).      // 18107
 */                                                                                                                    // 18108
SequentialLayout.prototype.getSize = function getSize() {                                                              // 18109
    if (!this._size) this.render(); // hack size in                                                                    // 18110
    return this._size;                                                                                                 // 18111
};                                                                                                                     // 18112
                                                                                                                       // 18113
/**                                                                                                                    // 18114
 * Sets the collection of renderables under the SequentialLayout instance's control.                                   // 18115
 *                                                                                                                     // 18116
 * @method sequenceFrom                                                                                                // 18117
 * @param {Array|ViewSequence} items Either an array of renderables or a Famous viewSequence.                          // 18118
 * @chainable                                                                                                          // 18119
 */                                                                                                                    // 18120
SequentialLayout.prototype.sequenceFrom = function sequenceFrom(items) {                                               // 18121
    if (items instanceof Array) items = new ViewSequence(items);                                                       // 18122
    this._items = items;                                                                                               // 18123
    return this;                                                                                                       // 18124
};                                                                                                                     // 18125
                                                                                                                       // 18126
/**                                                                                                                    // 18127
 * Patches the SequentialLayout instance's options with the passed-in ones.                                            // 18128
 *                                                                                                                     // 18129
 * @method setOptions                                                                                                  // 18130
 * @param {Options} options An object of configurable options for the SequentialLayout instance.                       // 18131
 * @chainable                                                                                                          // 18132
 */                                                                                                                    // 18133
SequentialLayout.prototype.setOptions = function setOptions(options) {                                                 // 18134
    this.optionsManager.setOptions.apply(this.optionsManager, arguments);                                              // 18135
    return this;                                                                                                       // 18136
};                                                                                                                     // 18137
                                                                                                                       // 18138
/**                                                                                                                    // 18139
 * setOutputFunction is used to apply a user-defined output transform on each processed renderable.                    // 18140
 *  For a good example, check out SequentialLayout's own DEFAULT_OUTPUT_FUNCTION in the code.                          // 18141
 *                                                                                                                     // 18142
 * @method setOutputFunction                                                                                           // 18143
 * @param {Function} outputFunction An output processer for each renderable in the SequentialLayout                    // 18144
 * instance.                                                                                                           // 18145
 * @chainable                                                                                                          // 18146
 */                                                                                                                    // 18147
SequentialLayout.prototype.setOutputFunction = function setOutputFunction(outputFunction) {                            // 18148
    this._outputFunction = outputFunction;                                                                             // 18149
    return this;                                                                                                       // 18150
};                                                                                                                     // 18151
                                                                                                                       // 18152
/**                                                                                                                    // 18153
 * Generate a render spec from the contents of this component.                                                         // 18154
 *                                                                                                                     // 18155
 * @private                                                                                                            // 18156
 * @method render                                                                                                      // 18157
 * @return {number} Render spec for this component                                                                     // 18158
 */                                                                                                                    // 18159
SequentialLayout.prototype.render = function render() {                                                                // 18160
    var length             = 0;                                                                                        // 18161
    var secondaryDirection = this.options.direction ^ 1;                                                               // 18162
    var currentNode        = this._items;                                                                              // 18163
    var item               = null;                                                                                     // 18164
    var itemSize           = [];                                                                                       // 18165
    var output             = {};                                                                                       // 18166
    var result             = [];                                                                                       // 18167
    var i                  = 0;                                                                                        // 18168
                                                                                                                       // 18169
    this._size = [0, 0];                                                                                               // 18170
                                                                                                                       // 18171
    while (currentNode) {                                                                                              // 18172
        item = currentNode.get();                                                                                      // 18173
        if (!item) break;                                                                                              // 18174
                                                                                                                       // 18175
        if (item.getSize) itemSize = item.getSize();                                                                   // 18176
                                                                                                                       // 18177
        output = this._outputFunction.call(this, item, length, i++);                                                   // 18178
        result.push(output);                                                                                           // 18179
                                                                                                                       // 18180
        if (itemSize) {                                                                                                // 18181
            if (itemSize[this.options.direction]) length += itemSize[this.options.direction];                          // 18182
            if (itemSize[secondaryDirection] > this._size[secondaryDirection]) this._size[secondaryDirection] = itemSize[secondaryDirection];
        }                                                                                                              // 18184
                                                                                                                       // 18185
        currentNode = currentNode.getNext();                                                                           // 18186
                                                                                                                       // 18187
        if (this.options.itemSpacing && currentNode) length += this.options.itemSpacing;                               // 18188
    }                                                                                                                  // 18189
                                                                                                                       // 18190
    this._size[this.options.direction] = length;                                                                       // 18191
                                                                                                                       // 18192
    return result;                                                                                                     // 18193
};                                                                                                                     // 18194
                                                                                                                       // 18195
module.exports = SequentialLayout;                                                                                     // 18196
},{"../core/OptionsManager":10,"../core/Transform":15,"../core/ViewSequence":17,"../utilities/Utility":95}],111:[function(require,module,exports){
module.exports = {                                                                                                     // 18198
  ContextualView: require('./ContextualView'),                                                                         // 18199
  Deck: require('./Deck'),                                                                                             // 18200
  DrawerLayout: require('./DrawerLayout'),                                                                             // 18201
  EdgeSwapper: require('./EdgeSwapper'),                                                                               // 18202
  FlexibleLayout: require('./FlexibleLayout'),                                                                         // 18203
  Flipper: require('./Flipper'),                                                                                       // 18204
  GridLayout: require('./GridLayout'),                                                                                 // 18205
  HeaderFooterLayout: require('./HeaderFooterLayout'),                                                                 // 18206
  Lightbox: require('./Lightbox'),                                                                                     // 18207
  RenderController: require('./RenderController'),                                                                     // 18208
  ScrollContainer: require('./ScrollContainer'),                                                                       // 18209
  Scroller: require('./Scroller'),                                                                                     // 18210
  Scrollview: require('./Scrollview'),                                                                                 // 18211
  SequentialLayout: require('./SequentialLayout')                                                                      // 18212
};                                                                                                                     // 18213
                                                                                                                       // 18214
},{"./ContextualView":97,"./Deck":98,"./DrawerLayout":99,"./EdgeSwapper":100,"./FlexibleLayout":101,"./Flipper":102,"./GridLayout":103,"./HeaderFooterLayout":104,"./Lightbox":105,"./RenderController":106,"./ScrollContainer":107,"./Scroller":108,"./Scrollview":109,"./SequentialLayout":110}],112:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18216
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18217
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18218
 *                                                                                                                     // 18219
 * Owner: mark@famo.us                                                                                                 // 18220
 * @license MPL 2.0                                                                                                    // 18221
 * @copyright Famous Industries, Inc. 2014                                                                             // 18222
 */                                                                                                                    // 18223
                                                                                                                       // 18224
var Scene = require('../core/Scene');                                                                                  // 18225
var Surface = require('../core/Surface');                                                                              // 18226
var Transform = require('../core/Transform');                                                                          // 18227
var View = require('../core/View');                                                                                    // 18228
                                                                                                                       // 18229
/**                                                                                                                    // 18230
 * A view for displaying the title of the current page                                                                 // 18231
 *  as well as icons for navigating backwards and opening                                                              // 18232
 *  further options                                                                                                    // 18233
 *                                                                                                                     // 18234
 * @class NavigationBar                                                                                                // 18235
 * @extends View                                                                                                       // 18236
 * @constructor                                                                                                        // 18237
 *                                                                                                                     // 18238
 * @param {object} [options] overrides of default options                                                              // 18239
 * @param {Array.number} [options.size=(undefined,0.5)] Size of the navigation bar and it's componenets.               // 18240
 * @param {Array.string} [options.backClasses=(back)] CSS Classes attached to back of Navigation.                      // 18241
 * @param {String} [options.backContent=(&#x25c0;)] Content of the back button.                                        // 18242
 * @param {Array.string} [options.classes=(navigation)] CSS Classes attached to the surfaces.                          // 18243
 * @param {String} [options.content] Content to pass into title bar.                                                   // 18244
 * @param {Array.string} [options.classes=(more)] CSS Classes attached to the More surface.                            // 18245
 * @param {String} [options.moreContent=(&#x271a;)] Content of the more button.                                        // 18246
 */                                                                                                                    // 18247
function NavigationBar(options) {                                                                                      // 18248
    View.apply(this, arguments);                                                                                       // 18249
                                                                                                                       // 18250
    this.title = new Surface({                                                                                         // 18251
        classes: this.options.classes,                                                                                 // 18252
        content: this.options.content                                                                                  // 18253
    });                                                                                                                // 18254
                                                                                                                       // 18255
    this.back = new Surface({                                                                                          // 18256
        size: [this.options.size[1], this.options.size[1]],                                                            // 18257
        classes: this.options.classes,                                                                                 // 18258
        content: this.options.backContent                                                                              // 18259
    });                                                                                                                // 18260
    this.back.on('click', function() {                                                                                 // 18261
        this._eventOutput.emit('back', {});                                                                            // 18262
    }.bind(this));                                                                                                     // 18263
                                                                                                                       // 18264
    this.more = new Surface({                                                                                          // 18265
        size: [this.options.size[1], this.options.size[1]],                                                            // 18266
        classes: this.options.classes,                                                                                 // 18267
        content: this.options.moreContent                                                                              // 18268
    });                                                                                                                // 18269
    this.more.on('click', function() {                                                                                 // 18270
        this._eventOutput.emit('more', {});                                                                            // 18271
    }.bind(this));                                                                                                     // 18272
                                                                                                                       // 18273
    this.layout = new Scene({                                                                                          // 18274
        id: 'master',                                                                                                  // 18275
        size: this.options.size,                                                                                       // 18276
        target: [                                                                                                      // 18277
            {                                                                                                          // 18278
                transform: Transform.inFront,                                                                          // 18279
                origin: [0, 0.5],                                                                                      // 18280
                target: this.back                                                                                      // 18281
            },                                                                                                         // 18282
            {                                                                                                          // 18283
                origin: [0.5, 0.5],                                                                                    // 18284
                target: this.title                                                                                     // 18285
            },                                                                                                         // 18286
            {                                                                                                          // 18287
                transform: Transform.inFront,                                                                          // 18288
                origin: [1, 0.5],                                                                                      // 18289
                target: this.more                                                                                      // 18290
            }                                                                                                          // 18291
        ]                                                                                                              // 18292
    });                                                                                                                // 18293
                                                                                                                       // 18294
    this._add(this.layout);                                                                                            // 18295
                                                                                                                       // 18296
    this._optionsManager.on('change', function(event) {                                                                // 18297
        var key = event.id;                                                                                            // 18298
        var data = event.value;                                                                                        // 18299
        if (key === 'size') {                                                                                          // 18300
            this.layout.id.master.setSize(data);                                                                       // 18301
            this.title.setSize(data);                                                                                  // 18302
            this.back.setSize([data[1], data[1]]);                                                                     // 18303
            this.more.setSize([data[1], data[1]]);                                                                     // 18304
        }                                                                                                              // 18305
        else if (key === 'backClasses') {                                                                              // 18306
            this.back.setOptions({classes: this.options.classes.concat(this.options.backClasses)});                    // 18307
        }                                                                                                              // 18308
        else if (key === 'backContent') {                                                                              // 18309
            this.back.setContent(this.options.backContent);                                                            // 18310
        }                                                                                                              // 18311
        else if (key === 'classes') {                                                                                  // 18312
            this.title.setOptions({classes: this.options.classes});                                                    // 18313
            this.back.setOptions({classes: this.options.classes.concat(this.options.backClasses)});                    // 18314
            this.more.setOptions({classes: this.options.classes.concat(this.options.moreClasses)});                    // 18315
        }                                                                                                              // 18316
        else if (key === 'content') {                                                                                  // 18317
            this.setContent(this.options.content);                                                                     // 18318
        }                                                                                                              // 18319
        else if (key === 'moreClasses') {                                                                              // 18320
            this.more.setOptions({classes: this.options.classes.concat(this.options.moreClasses)});                    // 18321
        }                                                                                                              // 18322
        else if (key === 'moreContent') {                                                                              // 18323
            this.more.setContent(this.options.content);                                                                // 18324
        }                                                                                                              // 18325
    }.bind(this));                                                                                                     // 18326
}                                                                                                                      // 18327
                                                                                                                       // 18328
NavigationBar.prototype = Object.create(View.prototype);                                                               // 18329
NavigationBar.prototype.constructor = NavigationBar;                                                                   // 18330
                                                                                                                       // 18331
NavigationBar.DEFAULT_OPTIONS = {                                                                                      // 18332
    size: [undefined, 50],                                                                                             // 18333
    backClasses: ['back'],                                                                                             // 18334
    backContent: '&#x25c0;',                                                                                           // 18335
    classes: ['navigation'],                                                                                           // 18336
    content: '',                                                                                                       // 18337
    moreClasses: ['more'],                                                                                             // 18338
    moreContent: '&#x271a;'                                                                                            // 18339
};                                                                                                                     // 18340
                                                                                                                       // 18341
/**                                                                                                                    // 18342
 * Set the title of the NavigationBar                                                                                  // 18343
 *                                                                                                                     // 18344
 * @method setContent                                                                                                  // 18345
 *                                                                                                                     // 18346
 * @param {object} content JSON object containing title information                                                    // 18347
 *                                                                                                                     // 18348
 * @return {undefined}                                                                                                 // 18349
 */                                                                                                                    // 18350
NavigationBar.prototype.setContent = function setContent(content) {                                                    // 18351
    return this.title.setContent(content);                                                                             // 18352
};                                                                                                                     // 18353
                                                                                                                       // 18354
module.exports = NavigationBar;                                                                                        // 18355
},{"../core/Scene":12,"../core/Surface":14,"../core/Transform":15,"../core/View":16}],113:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18357
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18358
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18359
 *                                                                                                                     // 18360
 * Owner: mark@famo.us                                                                                                 // 18361
 * @license MPL 2.0                                                                                                    // 18362
 * @copyright Famous Industries, Inc. 2014                                                                             // 18363
 */                                                                                                                    // 18364
                                                                                                                       // 18365
var Surface = require('../core/Surface');                                                                              // 18366
var CanvasSurface = require('../surfaces/CanvasSurface');                                                              // 18367
var Transform = require('../core/Transform');                                                                          // 18368
var EventHandler = require('../core/EventHandler');                                                                    // 18369
var Utilities = require('../math/Utilities');                                                                          // 18370
var OptionsManager = require('../core/OptionsManager');                                                                // 18371
var MouseSync = require('../inputs/MouseSync');                                                                        // 18372
var TouchSync = require('../inputs/TouchSync');                                                                        // 18373
var GenericSync = require('../inputs/GenericSync');                                                                    // 18374
                                                                                                                       // 18375
GenericSync.register({                                                                                                 // 18376
    mouse : MouseSync,                                                                                                 // 18377
    touch : TouchSync                                                                                                  // 18378
});                                                                                                                    // 18379
                                                                                                                       // 18380
/** @constructor */                                                                                                    // 18381
function Slider(options) {                                                                                             // 18382
    this.options = Object.create(Slider.DEFAULT_OPTIONS);                                                              // 18383
    this.optionsManager = new OptionsManager(this.options);                                                            // 18384
    if (options) this.setOptions(options);                                                                             // 18385
                                                                                                                       // 18386
    this.indicator = new CanvasSurface({                                                                               // 18387
        size: this.options.indicatorSize,                                                                              // 18388
        classes : ['slider-back']                                                                                      // 18389
    });                                                                                                                // 18390
                                                                                                                       // 18391
    this.label = new Surface({                                                                                         // 18392
        size: this.options.labelSize,                                                                                  // 18393
        content: this.options.label,                                                                                   // 18394
        properties : {pointerEvents : 'none'},                                                                         // 18395
        classes: ['slider-label']                                                                                      // 18396
    });                                                                                                                // 18397
                                                                                                                       // 18398
    this.eventOutput = new EventHandler();                                                                             // 18399
    this.eventInput = new EventHandler();                                                                              // 18400
    EventHandler.setInputHandler(this, this.eventInput);                                                               // 18401
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 18402
                                                                                                                       // 18403
    var scale = (this.options.range[1] - this.options.range[0]) / this.options.indicatorSize[0];                       // 18404
                                                                                                                       // 18405
    this.sync = new GenericSync(                                                                                       // 18406
        ['mouse', 'touch'],                                                                                            // 18407
        {                                                                                                              // 18408
            scale : scale,                                                                                             // 18409
            direction : GenericSync.DIRECTION_X                                                                        // 18410
        }                                                                                                              // 18411
    );                                                                                                                 // 18412
                                                                                                                       // 18413
    this.indicator.pipe(this.sync);                                                                                    // 18414
    this.sync.pipe(this);                                                                                              // 18415
                                                                                                                       // 18416
    this.eventInput.on('update', function(data) {                                                                      // 18417
        this.set(data.position);                                                                                       // 18418
    }.bind(this));                                                                                                     // 18419
                                                                                                                       // 18420
    this._drawPos = 0;                                                                                                 // 18421
    _updateLabel.call(this);                                                                                           // 18422
}                                                                                                                      // 18423
                                                                                                                       // 18424
Slider.DEFAULT_OPTIONS = {                                                                                             // 18425
    size: [200, 60],                                                                                                   // 18426
    indicatorSize: [200, 30],                                                                                          // 18427
    labelSize: [200, 30],                                                                                              // 18428
    range: [0, 1],                                                                                                     // 18429
    precision: 2,                                                                                                      // 18430
    value: 0,                                                                                                          // 18431
    label: '',                                                                                                         // 18432
    fillColor: 'rgba(170, 170, 170, 1)'                                                                                // 18433
};                                                                                                                     // 18434
                                                                                                                       // 18435
function _updateLabel() {                                                                                              // 18436
    this.label.setContent(this.options.label + '<span style="float: right">' + this.get().toFixed(this.options.precision) + '</span>');
}                                                                                                                      // 18438
                                                                                                                       // 18439
Slider.prototype.setOptions = function setOptions(options) {                                                           // 18440
    return this.optionsManager.setOptions(options);                                                                    // 18441
};                                                                                                                     // 18442
                                                                                                                       // 18443
Slider.prototype.get = function get() {                                                                                // 18444
    return this.options.value;                                                                                         // 18445
};                                                                                                                     // 18446
                                                                                                                       // 18447
Slider.prototype.set = function set(value) {                                                                           // 18448
    if (value === this.options.value) return;                                                                          // 18449
    this.options.value = Utilities.clamp(value, this.options.range);                                                   // 18450
    _updateLabel.call(this);                                                                                           // 18451
    this.eventOutput.emit('change', {value: value});                                                                   // 18452
};                                                                                                                     // 18453
                                                                                                                       // 18454
Slider.prototype.getSize = function getSize() {                                                                        // 18455
    return this.options.size;                                                                                          // 18456
};                                                                                                                     // 18457
                                                                                                                       // 18458
Slider.prototype.render = function render() {                                                                          // 18459
    var range = this.options.range;                                                                                    // 18460
    var fillSize = Math.floor(((this.get() - range[0]) / (range[1] - range[0])) * this.options.indicatorSize[0]);      // 18461
                                                                                                                       // 18462
    if (fillSize < this._drawPos) {                                                                                    // 18463
        this.indicator.getContext('2d').clearRect(fillSize, 0, this._drawPos - fillSize + 1, this.options.indicatorSize[1]);
    }                                                                                                                  // 18465
    else if (fillSize > this._drawPos) {                                                                               // 18466
        var ctx = this.indicator.getContext('2d');                                                                     // 18467
        ctx.fillStyle = this.options.fillColor;                                                                        // 18468
        ctx.fillRect(this._drawPos-1, 0, fillSize - this._drawPos+1, this.options.indicatorSize[1]);                   // 18469
    }                                                                                                                  // 18470
    this._drawPos = fillSize;                                                                                          // 18471
                                                                                                                       // 18472
    return {                                                                                                           // 18473
        size: this.options.size,                                                                                       // 18474
        target: [                                                                                                      // 18475
            {                                                                                                          // 18476
                origin: [0, 0],                                                                                        // 18477
                target: this.indicator.render()                                                                        // 18478
            },                                                                                                         // 18479
            {                                                                                                          // 18480
                transform: Transform.translate(0, 0, 1),                                                               // 18481
                origin: [0, 0],                                                                                        // 18482
                target: this.label.render()                                                                            // 18483
            }                                                                                                          // 18484
        ]                                                                                                              // 18485
    };                                                                                                                 // 18486
};                                                                                                                     // 18487
                                                                                                                       // 18488
module.exports = Slider;                                                                                               // 18489
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../core/Surface":14,"../core/Transform":15,"../inputs/GenericSync":27,"../inputs/MouseSync":28,"../inputs/TouchSync":33,"../math/Utilities":40,"../surfaces/CanvasSurface":74}],114:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18491
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18492
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18493
 *                                                                                                                     // 18494
 * Owner: mark@famo.us                                                                                                 // 18495
 * @license MPL 2.0                                                                                                    // 18496
 * @copyright Famous Industries, Inc. 2014                                                                             // 18497
 */                                                                                                                    // 18498
                                                                                                                       // 18499
var Utility = require('../utilities/Utility');                                                                         // 18500
var View = require('../core/View');                                                                                    // 18501
var GridLayout = require('../views/GridLayout');                                                                       // 18502
var ToggleButton = require('./ToggleButton');                                                                          // 18503
                                                                                                                       // 18504
/**                                                                                                                    // 18505
 * A view for displaying various tabs that dispatch events                                                             // 18506
 *  based on the id of the button that was clicked                                                                     // 18507
 *                                                                                                                     // 18508
 * @class TabBar                                                                                                       // 18509
 * @extends View                                                                                                       // 18510
 * @constructor                                                                                                        // 18511
 *                                                                                                                     // 18512
 * @param {object} options overrides of default options                                                                // 18513
 */                                                                                                                    // 18514
function TabBar(options) {                                                                                             // 18515
    View.apply(this, arguments);                                                                                       // 18516
                                                                                                                       // 18517
    this.layout = new GridLayout();                                                                                    // 18518
    this.buttons = [];                                                                                                 // 18519
    this._buttonIds = {};                                                                                              // 18520
    this._buttonCallbacks = {};                                                                                        // 18521
                                                                                                                       // 18522
    this.layout.sequenceFrom(this.buttons);                                                                            // 18523
    this._add(this.layout);                                                                                            // 18524
                                                                                                                       // 18525
    this._optionsManager.on('change', _updateOptions.bind(this));                                                      // 18526
}                                                                                                                      // 18527
                                                                                                                       // 18528
TabBar.prototype = Object.create(View.prototype);                                                                      // 18529
TabBar.prototype.constructor = TabBar;                                                                                 // 18530
                                                                                                                       // 18531
TabBar.DEFAULT_OPTIONS = {                                                                                             // 18532
    sections: [],                                                                                                      // 18533
    widget: ToggleButton,                                                                                              // 18534
    size: [undefined, 50],                                                                                             // 18535
    direction: Utility.Direction.X,                                                                                    // 18536
    buttons: {                                                                                                         // 18537
        toggleMode: ToggleButton.ON                                                                                    // 18538
    }                                                                                                                  // 18539
};                                                                                                                     // 18540
                                                                                                                       // 18541
/**                                                                                                                    // 18542
 * Update the options for all components of the view                                                                   // 18543
 *                                                                                                                     // 18544
 * @method _updateOptions                                                                                              // 18545
 *                                                                                                                     // 18546
 * @param {object} data component options                                                                              // 18547
 */                                                                                                                    // 18548
function _updateOptions(data) {                                                                                        // 18549
    var id = data.id;                                                                                                  // 18550
    var value = data.value;                                                                                            // 18551
                                                                                                                       // 18552
    if (id === 'direction') {                                                                                          // 18553
        this.layout.setOptions({dimensions: _resolveGridDimensions.call(this.buttons.length, this.options.direction)});
    }                                                                                                                  // 18555
    else if (id === 'buttons') {                                                                                       // 18556
        for (var i in this.buttons) {                                                                                  // 18557
            this.buttons[i].setOptions(value);                                                                         // 18558
        }                                                                                                              // 18559
    }                                                                                                                  // 18560
    else if (id === 'sections') {                                                                                      // 18561
        for (var sectionId in this.options.sections) {                                                                 // 18562
            this.defineSection(sectionId, this.options.sections[sectionId]);                                           // 18563
        }                                                                                                              // 18564
    }                                                                                                                  // 18565
}                                                                                                                      // 18566
                                                                                                                       // 18567
/**                                                                                                                    // 18568
 * Return an array of the proper dimensions for the tabs                                                               // 18569
 *                                                                                                                     // 18570
 * @method _resolveGridDimensions                                                                                      // 18571
 *                                                                                                                     // 18572
 * @param {number} count number of buttons                                                                             // 18573
 * @param {number} direction direction of the layout                                                                   // 18574
 *                                                                                                                     // 18575
 * @return {array} the dimensions of the tab section                                                                   // 18576
 */                                                                                                                    // 18577
function _resolveGridDimensions(count, direction) {                                                                    // 18578
    if (direction === Utility.Direction.X) return [count, 1];                                                          // 18579
    else return [1, count];                                                                                            // 18580
}                                                                                                                      // 18581
                                                                                                                       // 18582
/**                                                                                                                    // 18583
 * Create a new button with the specified id.  If one already exists with                                              // 18584
 *  that id, unbind all listeners.                                                                                     // 18585
 *                                                                                                                     // 18586
 * @method defineSection                                                                                               // 18587
 *                                                                                                                     // 18588
 * @param {string} id name of the button                                                                               // 18589
 * @param {object} content data for the creation of a new ToggleButton                                                 // 18590
 */                                                                                                                    // 18591
TabBar.prototype.defineSection = function defineSection(id, content) {                                                 // 18592
    var button;                                                                                                        // 18593
    var i = this._buttonIds[id];                                                                                       // 18594
                                                                                                                       // 18595
    if (i === undefined) {                                                                                             // 18596
        i = this.buttons.length;                                                                                       // 18597
        this._buttonIds[id] = i;                                                                                       // 18598
        var widget = this.options.widget;                                                                              // 18599
        button = new widget();                                                                                         // 18600
        this.buttons[i] = button;                                                                                      // 18601
        this.layout.setOptions({dimensions: _resolveGridDimensions(this.buttons.length, this.options.direction)});     // 18602
    }                                                                                                                  // 18603
    else {                                                                                                             // 18604
        button = this.buttons[i];                                                                                      // 18605
        button.unbind('select', this._buttonCallbacks[id]);                                                            // 18606
    }                                                                                                                  // 18607
                                                                                                                       // 18608
    if (this.options.buttons) button.setOptions(this.options.buttons);                                                 // 18609
    button.setOptions(content);                                                                                        // 18610
                                                                                                                       // 18611
    this._buttonCallbacks[id] = this.select.bind(this, id);                                                            // 18612
    button.on('select', this._buttonCallbacks[id]);                                                                    // 18613
};                                                                                                                     // 18614
                                                                                                                       // 18615
/**                                                                                                                    // 18616
 * Select a particular button and dispatch the id of the selection                                                     // 18617
 *  to any listeners.  Deselect all others                                                                             // 18618
 *                                                                                                                     // 18619
 * @method select                                                                                                      // 18620
 *                                                                                                                     // 18621
 * @param {string} id button id                                                                                        // 18622
 */                                                                                                                    // 18623
TabBar.prototype.select = function select(id) {                                                                        // 18624
    var btn = this._buttonIds[id];                                                                                     // 18625
    // this prevents event loop                                                                                        // 18626
    if (this.buttons[btn] && this.buttons[btn].isSelected()) {                                                         // 18627
        this._eventOutput.emit('select', {id: id});                                                                    // 18628
    }                                                                                                                  // 18629
    else if (this.buttons[btn]) {                                                                                      // 18630
        this.buttons[btn].select();                                                                                    // 18631
    }                                                                                                                  // 18632
                                                                                                                       // 18633
    for (var i = 0; i < this.buttons.length; i++) {                                                                    // 18634
        if (i !== btn) this.buttons[i].deselect();                                                                     // 18635
    }                                                                                                                  // 18636
};                                                                                                                     // 18637
                                                                                                                       // 18638
module.exports = TabBar;                                                                                               // 18639
},{"../core/View":16,"../utilities/Utility":95,"../views/GridLayout":103,"./ToggleButton":115}],115:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18641
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18642
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18643
 *                                                                                                                     // 18644
 * Owner: mark@famo.us                                                                                                 // 18645
 * @license MPL 2.0                                                                                                    // 18646
 * @copyright Famous Industries, Inc. 2014                                                                             // 18647
 */                                                                                                                    // 18648
                                                                                                                       // 18649
var Surface = require('../core/Surface');                                                                              // 18650
var EventHandler = require('../core/EventHandler');                                                                    // 18651
var RenderController = require('../views/RenderController');                                                           // 18652
                                                                                                                       // 18653
/**                                                                                                                    // 18654
 * A view for transitioning between two surfaces based                                                                 // 18655
 *  on a 'on' and 'off' state                                                                                          // 18656
 *                                                                                                                     // 18657
 * @class TabBar                                                                                                       // 18658
 * @extends View                                                                                                       // 18659
 * @constructor                                                                                                        // 18660
 *                                                                                                                     // 18661
 * @param {object} options overrides of default options                                                                // 18662
 */                                                                                                                    // 18663
function ToggleButton(options) {                                                                                       // 18664
    this.options = {                                                                                                   // 18665
        content: '',                                                                                                   // 18666
        offClasses: ['off'],                                                                                           // 18667
        onClasses: ['on'],                                                                                             // 18668
        size: undefined,                                                                                               // 18669
        outTransition: {curve: 'easeInOut', duration: 300},                                                            // 18670
        inTransition: {curve: 'easeInOut', duration: 300},                                                             // 18671
        toggleMode: ToggleButton.TOGGLE,                                                                               // 18672
        crossfade: true                                                                                                // 18673
    };                                                                                                                 // 18674
                                                                                                                       // 18675
    this._eventOutput = new EventHandler();                                                                            // 18676
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 18677
                                                                                                                       // 18678
    this.offSurface = new Surface();                                                                                   // 18679
    this.offSurface.on('click', function() {                                                                           // 18680
        if (this.options.toggleMode !== ToggleButton.OFF) this.select();                                               // 18681
    }.bind(this));                                                                                                     // 18682
    this.offSurface.pipe(this._eventOutput);                                                                           // 18683
                                                                                                                       // 18684
    this.onSurface = new Surface();                                                                                    // 18685
    this.onSurface.on('click', function() {                                                                            // 18686
        if (this.options.toggleMode !== ToggleButton.ON) this.deselect();                                              // 18687
    }.bind(this));                                                                                                     // 18688
    this.onSurface.pipe(this._eventOutput);                                                                            // 18689
                                                                                                                       // 18690
    this.arbiter = new RenderController({                                                                              // 18691
        overlap : this.options.crossfade                                                                               // 18692
    });                                                                                                                // 18693
                                                                                                                       // 18694
    this.deselect();                                                                                                   // 18695
                                                                                                                       // 18696
    if (options) this.setOptions(options);                                                                             // 18697
}                                                                                                                      // 18698
                                                                                                                       // 18699
ToggleButton.OFF = 0;                                                                                                  // 18700
ToggleButton.ON = 1;                                                                                                   // 18701
ToggleButton.TOGGLE = 2;                                                                                               // 18702
                                                                                                                       // 18703
/**                                                                                                                    // 18704
 * Transition towards the 'on' state and dispatch an event to                                                          // 18705
 *  listeners to announce it was selected                                                                              // 18706
 *                                                                                                                     // 18707
 * @method select                                                                                                      // 18708
 */                                                                                                                    // 18709
ToggleButton.prototype.select = function select() {                                                                    // 18710
    this.selected = true;                                                                                              // 18711
    this.arbiter.show(this.onSurface, this.options.inTransition);                                                      // 18712
//        this.arbiter.setMode(ToggleButton.ON, this.options.inTransition);                                            // 18713
    this._eventOutput.emit('select');                                                                                  // 18714
};                                                                                                                     // 18715
                                                                                                                       // 18716
/**                                                                                                                    // 18717
 * Transition towards the 'off' state and dispatch an event to                                                         // 18718
 *  listeners to announce it was deselected                                                                            // 18719
 *                                                                                                                     // 18720
 * @method deselect                                                                                                    // 18721
 */                                                                                                                    // 18722
ToggleButton.prototype.deselect = function deselect() {                                                                // 18723
    this.selected = false;                                                                                             // 18724
    this.arbiter.show(this.offSurface, this.options.outTransition);                                                    // 18725
    this._eventOutput.emit('deselect');                                                                                // 18726
};                                                                                                                     // 18727
                                                                                                                       // 18728
/**                                                                                                                    // 18729
 * Return the state of the button                                                                                      // 18730
 *                                                                                                                     // 18731
 * @method isSelected                                                                                                  // 18732
 *                                                                                                                     // 18733
 * @return {boolean} selected state                                                                                    // 18734
 */                                                                                                                    // 18735
ToggleButton.prototype.isSelected = function isSelected() {                                                            // 18736
    return this.selected;                                                                                              // 18737
};                                                                                                                     // 18738
                                                                                                                       // 18739
/**                                                                                                                    // 18740
 * Override the current options                                                                                        // 18741
 *                                                                                                                     // 18742
 * @method setOptions                                                                                                  // 18743
 *                                                                                                                     // 18744
 * @param {object} options JSON                                                                                        // 18745
 */                                                                                                                    // 18746
ToggleButton.prototype.setOptions = function setOptions(options) {                                                     // 18747
    if (options.content !== undefined) {                                                                               // 18748
        this.options.content = options.content;                                                                        // 18749
        this.offSurface.setContent(this.options.content);                                                              // 18750
        this.onSurface.setContent(this.options.content);                                                               // 18751
    }                                                                                                                  // 18752
    if (options.offClasses) {                                                                                          // 18753
        this.options.offClasses = options.offClasses;                                                                  // 18754
        this.offSurface.setClasses(this.options.offClasses);                                                           // 18755
    }                                                                                                                  // 18756
    if (options.onClasses) {                                                                                           // 18757
        this.options.onClasses = options.onClasses;                                                                    // 18758
        this.onSurface.setClasses(this.options.onClasses);                                                             // 18759
    }                                                                                                                  // 18760
    if (options.size !== undefined) {                                                                                  // 18761
        this.options.size = options.size;                                                                              // 18762
        this.onSurface.setSize(this.options.size);                                                                     // 18763
        this.offSurface.setSize(this.options.size);                                                                    // 18764
    }                                                                                                                  // 18765
    if (options.toggleMode !== undefined) this.options.toggleMode = options.toggleMode;                                // 18766
    if (options.outTransition !== undefined) this.options.outTransition = options.outTransition;                       // 18767
    if (options.inTransition !== undefined) this.options.inTransition = options.inTransition;                          // 18768
    if (options.crossfade !== undefined) {                                                                             // 18769
        this.options.crossfade = options.crossfade;                                                                    // 18770
        this.arbiter.setOptions({overlap: this.options.crossfade});                                                    // 18771
    }                                                                                                                  // 18772
};                                                                                                                     // 18773
                                                                                                                       // 18774
/**                                                                                                                    // 18775
 * Return the size defined in the options object                                                                       // 18776
 *                                                                                                                     // 18777
 * @method getSize                                                                                                     // 18778
 *                                                                                                                     // 18779
 * @return {array} two element array [height, width]                                                                   // 18780
 */                                                                                                                    // 18781
ToggleButton.prototype.getSize = function getSize() {                                                                  // 18782
    return this.options.size;                                                                                          // 18783
};                                                                                                                     // 18784
                                                                                                                       // 18785
/**                                                                                                                    // 18786
 * Generate a render spec from the contents of this component.                                                         // 18787
 *                                                                                                                     // 18788
 * @private                                                                                                            // 18789
 * @method render                                                                                                      // 18790
 * @return {number} Render spec for this component                                                                     // 18791
 */                                                                                                                    // 18792
ToggleButton.prototype.render = function render() {                                                                    // 18793
    return this.arbiter.render();                                                                                      // 18794
};                                                                                                                     // 18795
                                                                                                                       // 18796
module.exports = ToggleButton;                                                                                         // 18797
},{"../core/EventHandler":7,"../core/Surface":14,"../views/RenderController":106}],116:[function(require,module,exports){
module.exports = {                                                                                                     // 18799
  NavigationBar: require('./NavigationBar'),                                                                           // 18800
  Slider: require('./Slider'),                                                                                         // 18801
  TabBar: require('./TabBar'),                                                                                         // 18802
  ToggleButton: require('./ToggleButton')                                                                              // 18803
};                                                                                                                     // 18804
                                                                                                                       // 18805
},{"./NavigationBar":112,"./Slider":113,"./TabBar":114,"./ToggleButton":115}]},{},[23])(23)                            // 18806
});                                                                                                                    // 18807
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/export.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
famous = window.famous;                                                                                                // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['mjn:famous'] = {
  famous: famous
};

})();
