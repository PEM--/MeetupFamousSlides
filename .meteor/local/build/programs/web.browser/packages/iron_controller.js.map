)]}'
{"version":3,"file":"/packages/iron:controller.js","sources":["iron:controller/lib/wait_list.js","iron:controller/lib/controller.js","iron:controller/lib/controller_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+E;AACA,a;AACA,+E;AACA,+B;;AAEA,+E;AACA,a;AACA,+E;;AAEA,G;AACA,qD;AACA,qD;AACA,gD;AACA,6C;AACA,G;AACA,sC;AACA,gB;AACA,kC;;AAEA,a;AACA,+B;AACA,kB;AACA,G;;AAEA,c;AACA,E;;AAEA,G;AACA,yE;AACA,wD;AACA,E;AACA,6B;AACA,E;AACA,6B;AACA,kB;AACA,mB;AACA,M;AACA,G;AACA,sD;AACA,yC;AACA,2D;;AAEA,oC;AACA,mC;AACA,0E;AACA,K;AACA,mD;AACA,4D;AACA,mE;AACA,M;AACA,K;AACA,E;;;AAGA,+E;AACA,c;AACA,+E;AACA,G;AACA,+E;AACA,8E;AACA,8E;AACA,E;AACA,6E;AACA,8E;AACA,8E;AACA,+B;AACA,G;AACA,wB;AACA,uC;AACA,mB;AACA,0B;AACA,E;;AAEA,G;AACA,8C;AACA,G;AACA,yC;AACA,kB;;AAEA,2C;;AAEA,2C;;AAEA,wD;AACA,gC;;AAEA,8E;AACA,gB;AACA,4B;;AAEA,2C;AACA,0C;AACA,qE;AACA,0B;;AAEA,iD;;AAEA,uD;AACA,gC;AACA,8B;AACA,mF;AACA,8B;AACA,oF;AACA,8B;;AAEA,4B;;AAEA,4D;AACA,iC;AACA,iE;AACA,iC;AACA,O;;AAEA,2B;;AAEA,qB;AACA,2C;AACA,sE;AACA,uE;AACA,6C;;AAEA,oE;AACA,qC;AACA,iC;AACA,sB;;AAEA,iD;AACA,8D;;AAEA,uC;AACA,kC;;AAEA,0C;AACA,uC;AACA,W;AACA,W;AACA,S;AACA,K;AACA,K;AACA,E;;AAEA,wC;AACA,0B;AACA,mC;AACA,E;;AAEA,uC;AACA,kD;AACA,mB;AACA,E;;AAEA,yB;;;;;;;;;;;;;;;;;;;ACvJA,+E;AACA,a;AACA,+E;AACA,gD;AACA,yB;AACA,2C;;AAEA,+E;AACA,a;AACA,+E;AACA,0C;AACA,sB;AACA,mF;AACA,I;AACA,E;;AAEA,+E;AACA,gB;AACA,+E;AACA,iC;AACA,kB;AACA,+B;AACA,iE;AACA,4B;AACA,oC;;AAEA,iE;AACA,qD;AACA,qE;AACA,sC;;AAEA,qB;AACA,E;;AAEA,G;AACA,oE;AACA,G;AACA,4D;AACA,kB;;AAEA,kC;;AAEA,8C;AACA,0C;AACA,oD;;AAEA,U;AACA,0B;AACA,oD;AACA,K;AACA,I;AACA,E;;AAEA,G;AACA,iD;AACA,G;AACA,4D;AACA,kB;;AAEA,uD;AACA,gD;;AAEA,oD;;AAEA,2E;AACA,U;AACA,2B;AACA,6C;AACA,K;AACA,I;AACA,E;;AAEA,G;AACA,oC;AACA,G;AACA,6D;AACA,iD;AACA,E;;AAEA,+E;AACA,+B;AACA,+E;AACA,G;AACA,2B;AACA,E;AACA,uE;AACA,4C;AACA,G;AACA,sC;AACA,yC;AACA,E;;AAEA,uC;AACA,0B;AACA,c;AACA,E;;AAEA,G;AACA,yD;AACA,kD;AACA,E;AACA,uC;AACA,G;;AAEA,gE;AACA,iB;;AAEA,qB;AACA,0F;AACA,E;AACA,iE;AACA,E;;AAEA,4C;AACA,+D;AACA,E;;AAEA,2E;AACA,yB;AACA,yC;AACA,mC;AACA,c;AACA,E;;AAEA,+E;AACA,oB;AACA,+E;AACA,sC;AACA,K;AACA,8E;AACA,4C;AACA,I;AACA,a;AACA,8B;AACA,8B;AACA,2C;AACA,gD;AACA,Q;AACA,Q;AACA,K;AACA,iC;AACA,sE;AACA,wF;AACA,I;;AAEA,K;AACA,4E;AACA,Q;AACA,K;AACA,iD;AACA,uC;AACA,uC;AACA,uC;AACA,K;AACA,C;AACA,+E;AACA,iB;AACA,+E;AACA,6B;;;;;;;;;;;;;;;;;;;AC9JA,+E;AACA,a;AACA,+E;AACA,yB;AACA,gD;AACA,2C;;AAEA,+E;AACA,a;AACA,+E;AACA,0C;AACA,sB;AACA,mF;AACA,I;AACA,E;;AAEA,+E;AACA,uB;AACA,+E;AACA,G;AACA,6B;AACA,G;AACA,gD;AACA,gC;AACA,gC;AACA,E;;AAEA,G;AACA,+C;AACA,G;AACA,kD;AACA,4D;AACA,E;;AAEA,G;AACA,+B;AACA,G;AACA,2C;AACA,kB;;AAEA,U;AACA,uE;AACA,oE;AACA,mD;AACA,W;;AAEA,sB;AACA,+C;AACA,4B;AACA,O;AACA,wB;AACA,4D;AACA,U;AACA,4B;AACA,G;;AAEA,c;AACA,E;;AAEA,G;AACA,uD;AACA,G;AACA,0C;AACA,gC;AACA,E;;AAEA,G;AACA,iD;AACA,G;AACA,yC;AACA,wB;AACA,E","sourcesContent":["/*****************************************************************************/\n/* Imports */\n/*****************************************************************************/\nvar assert = Iron.utils.assert;\n\n/*****************************************************************************/\n/* Private */\n/*****************************************************************************/\n\n/**\n * Returns an object of computation ids starting with\n * the current computation and including all ancestor\n * computations. The data structure is an object\n * so we can index by id and do quick checks.\n */\nvar parentComputations = function () {\n  var list = {};\n  var c = Deps.currentComputation;\n\n  while (c) {\n    list[String(c._id)] = true;\n    c = c._parent;\n  }\n\n  return list;\n};\n\n/**\n * Check whether the user has called ready() and then called wait(). This\n * can cause a condition that can be simplified to this:\n *\n * dep = new Deps.Dependency;\n *\n * Deps.autorun(function () {\n *   dep.depend();\n *   dep.changed();\n * });\n */\nvar assertNoInvalidationLoop = function (dependency) {\n  var parentComps = parentComputations();\n  var depCompIds = Object.keys(dependency._dependentsById);\n\n  depCompIds.forEach(function (id) {\n    assert(!parentComps[id], \"\\n\\n\\\nYou called wait() after calling ready() inside the same computation tree.\\\n\\n\\n\\\nYou can fix this problem in two possible ways:\\n\\n\\\n1) Put all of your wait() calls before any ready() calls.\\n\\\n2) Put your ready() call in its own computation with Deps.autorun.\"\n    );\n  });\n};\n\n\n/*****************************************************************************/\n/* WaitList */\n/*****************************************************************************/\n/**\n * A WaitList tracks a list of reactive functions, each in its own computation.\n * The list is ready() when all of the functions return true. This list is not\n * ready (i.e. this.ready() === false) if at least one function returns false.\n *\n * You add functions by calling the wait(fn) method. Each function is run its\n * own computation. The ready() method is a reactive method but only calls the\n * deps changed function if the overall state of the list changes from true to\n * false or from false to true.\n */\nWaitList = function () {\n  this._readyDep = new Deps.Dependency;\n  this._comps = [];\n  this._notReadyCount = 0;\n};\n\n/**\n * Pass a function that returns true or false.\n */\nWaitList.prototype.wait = function (fn) {\n  var self = this;\n\n  var activeComp = Deps.currentComputation;\n\n  assertNoInvalidationLoop(self._readyDep);\n\n  // break with parent computation and grab the new comp\n  Deps.nonreactive(function () {\n\n    // store the cached result so we can see if it's different from one run to\n    // the next.\n    var cachedResult = null;\n\n    // create a computation for this handle\n    var comp = Deps.autorun(function (c) {\n      // let's get the new result coerced into a true or false value.\n      var result = !!fn();\n\n      var oldNotReadyCount = self._notReadyCount;\n\n      // if it's the first run and we're false then inc\n      if (c.firstRun && !result)\n        self._notReadyCount++;\n      else if (cachedResult !== null && result !== cachedResult && result === true)\n        self._notReadyCount--;\n      else if (cachedResult !== null && result !== cachedResult && result === false)\n        self._notReadyCount++;\n\n      cachedResult = result;\n\n      if (oldNotReadyCount === 0 && self._notReadyCount > 0)\n        self._readyDep.changed();\n      else if (oldNotReadyCount > 0 && self._notReadyCount === 0)\n        self._readyDep.changed();\n    });\n\n    self._comps.push(comp);\n\n    if (activeComp) {\n      activeComp.onInvalidate(function () {\n        // keep the old computation and notReadyCount the same for one\n        // flush cycle so that we don't end up in an intermediate state\n        // where list.ready() is not correct.\n\n        // keep the state the same until the flush cycle is complete\n        Deps.afterFlush(function () {\n          // stop the computation\n          comp.stop();\n\n          // remove the computation from the list\n          self._comps.splice(_.indexOf(self._comps, comp), 1);\n\n          if (cachedResult === false) {\n            self._notReadyCount--;\n\n            if (self._notReadyCount === 0)\n              self._readyDep.changed();\n          }\n        });\n      });\n    }\n  });\n};\n\nWaitList.prototype.ready = function () {\n  this._readyDep.depend();\n  return this._notReadyCount === 0;\n};\n\nWaitList.prototype.stop = function () {\n  _.each(this._comps, function (c) { c.stop(); });\n  this._comps = [];\n};\n\nIron.WaitList = WaitList;\n","/*****************************************************************************/\n/* Imports */\n/*****************************************************************************/\nvar debug = Iron.utils.debug('iron:controller');\nvar Layout = Iron.Layout;\nvar DynamicTemplate = Iron.DynamicTemplate;\n\n/*****************************************************************************/\n/* Private */\n/*****************************************************************************/\nvar bindData = function (value, thisArg) {\n  return function () {\n    return (typeof value === 'function') ? value.apply(thisArg, arguments) : value;\n  };\n};\n\n/*****************************************************************************/\n/* Controller */\n/*****************************************************************************/\nController = function (options) {\n  var self = this;\n  this.options = options || {};\n  this._layout = this.options.layout || new Layout(this.options);\n  this._isController = true;\n  this._layout._setLookupHost(this);\n\n  // grab the event map from the Controller constructor which was\n  // set if the user does MyController.events({...});\n  var eventMap = Controller._collectEventMaps.call(this.constructor);\n  this._layout.events(eventMap, this);\n\n  this.init(options);\n};\n\n/**\n * Set or get the layout's template and optionally its data context.\n */\nController.prototype.layout = function (template, options) {\n  var self = this;\n\n  this._layout.template(template);\n\n  // check whether options has a data property\n  if (options && (_.has(options, 'data')))\n    this._layout.data(bindData(options.data, this));\n\n  return {\n    data: function (val) {\n      return self._layout.data(bindData(val, self));\n    }\n  };\n};\n\n/**\n * Render a template into a region of the layout.\n */\nController.prototype.render = function (template, options) {\n  var self = this;\n\n  if (options && (typeof options.data !== 'undefined'))\n    options.data = bindData(options.data, this);\n\n  var tmpl = this._layout.render(template, options);\n\n  // allow caller to do: this.render('MyTemplate').data(function () {...});\n  return {\n    data: function (func) {\n      return tmpl.data(bindData(func, self));\n    }\n  };\n};\n\n/**\n * Begin recording rendered regions.\n */\nController.prototype.beginRendering = function (onComplete) {\n  return this._layout.beginRendering(onComplete);\n};\n\n/*****************************************************************************/\n/* Controller Static Methods */\n/*****************************************************************************/\n/**\n * Inherit from Controller.\n *\n * Note: The inheritance function in Meteor._inherits is broken. Static\n * properties on functions don't get copied.\n */\nController.extend = function (props) {\n  return Iron.utils.extend(this, props); \n};\n\nController.events = function (events) {\n  this._eventMap = events;\n  return this;\n};\n\n/**\n * Returns a single event map merged from super to child.\n * Called from the constructor function like this:\n *\n * this.constructor._collectEventMaps()\n */\n\nvar mergeStaticInheritedObjectProperty = function (ctor, prop) {\n  var merge = {};\n\n  if (ctor.__super__)\n    _.extend(merge, mergeStaticInheritedObjectProperty(ctor.__super__.constructor, prop));\n  \n  return _.has(ctor, prop) ? _.extend(merge, ctor[prop]) : merge;\n};\n\nController._collectEventMaps = function () {\n  return mergeStaticInheritedObjectProperty(this, '_eventMap');\n};\n\n// NOTE: helpers are not inherited from one controller to another, for now.\nController._helpers = {};\nController.helpers = function (helpers) {\n  _.extend(this._helpers, helpers);\n  return this;\n};\n\n/*****************************************************************************/\n/* Global Helpers */\n/*****************************************************************************/\nif (typeof Template !== 'undefined') {\n  /**\n   * Returns the nearest controller for a template instance. You can call this\n   * function from inside a template helper.\n   *\n   * Example:\n   * Template.MyPage.helpers({\n   *   greeting: function () {\n   *    var controller = Iron.controller();\n   *    return controller.state.get('greeting');\n   *   }\n   * });\n   */\n  Iron.controller = function () {\n    //XXX establishes a reactive dependency which causes helper to run\n    return DynamicTemplate.findLookupHostWithProperty(Blaze.getView(), '_isController');\n  };\n\n  /**\n   * Find a lookup host with a state key and return it reactively if we have\n   * it.\n   */\n  Template.registerHelper('get', function (key) {\n    var controller = Iron.controller();\n    if (controller && controller.state)\n      return controller.state.get(key);\n  });\n}\n/*****************************************************************************/\n/* Namespacing */\n/*****************************************************************************/\nIron.Controller = Controller;\n","/*****************************************************************************/\n/* Imports */\n/*****************************************************************************/\nvar Layout = Iron.Layout;\nvar debug = Iron.utils.debug('iron:controller');\nvar defaultValue = Iron.utils.defaultValue;\n\n/*****************************************************************************/\n/* Private */\n/*****************************************************************************/\nvar bindData = function (value, thisArg) {\n  return function () {\n    return (typeof value === 'function') ? value.apply(thisArg, arguments) : value;\n  };\n};\n\n/*****************************************************************************/\n/* Controller Client */\n/*****************************************************************************/\n/**\n * Client specific init code.\n */\nController.prototype.init = function (options) {\n  this._waitlist = new WaitList;\n  this.state = new ReactiveDict;\n};\n\n/**\n * Insert the controller's layout into the DOM.\n */\nController.prototype.insert = function (options) {\n  return this._layout.insert.apply(this._layout, arguments);\n};\n\n/**\n * Add an item to the waitlist.\n */\nController.prototype.wait = function (fn) {\n  var self = this;\n\n  if (!fn)\n    // it's possible fn is just undefined but we'll just return instead\n    // of throwing an error, to make it easier to call this function\n    // with waitOn which might not return anything.\n    return;\n\n  if (_.isArray(fn)) {\n    _.each(fn, function eachWait (fnOrHandle) {\n      self.wait(fnOrHandle);\n    });\n  } else if (fn.ready) {\n    this._waitlist.wait(function () { return fn.ready(); });\n  } else {\n    this._waitlist.wait(fn);\n  }\n\n  return this;\n};\n\n/**\n * Returns true if all items in the waitlist are ready.\n */\nController.prototype.ready = function () {\n  return this._waitlist.ready();\n};\n\n/**\n * Clean up the controller and stop the waitlist.\n */\nController.prototype.stop = function () {\n  this._waitlist.stop();\n};\n"]}