)]}'
{"version":3,"file":"/packages/gadicohen:prism.js","sources":["gadicohen:prism/lib/prism/prism.js","gadicohen:prism/lib/prism/components/prism-bash.js","gadicohen:prism/lib/prism/components/prism-css.js","gadicohen:prism/lib/prism/components/prism-javascript.js","gadicohen:prism/lib/prism/components/prism-markup.js","gadicohen:prism/lib/prism/components/prism-coffeescript.js","gadicohen:prism/prism-jade.js","gadicohen:prism/prism-spacebars.js","gadicohen:prism/lib/prism/plugins/line-numbers/prism-line-numbers.js","gadicohen:prism/lib/prism/plugins/line-highlight/prism-line-highlight.js","gadicohen:prism/prism.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,iD;AACA,wB;AACA,iD;;AAEA,sC;AACA,4B;AACA,I;AACA,iF;AACA,wB;AACA,yB;AACA,G;;AAEA,G;AACA,0D;AACA,kE;AACA,wC;AACA,G;;AAEA,wB;;AAEA,sB;AACA,4C;;AAEA,sB;AACA,Q;AACA,6B;AACA,iC;AACA,+E;AACA,gD;AACA,qC;AACA,W;AACA,uF;AACA,I;AACA,I;;AAEA,sB;AACA,yE;AACA,I;;AAEA,yD;AACA,uB;AACA,6B;;AAEA,kB;AACA,kB;AACA,oB;;AAEA,yB;AACA,kC;AACA,yC;AACA,O;AACA,M;;AAEA,kB;;AAEA,iB;AACA,sB;AACA,I;;AAEA,Y;AACA,G;AACA,G;;AAEA,a;AACA,gC;AACA,4C;;AAEA,2B;AACA,2B;AACA,I;;AAEA,e;AACA,I;;AAEA,8D;AACA,yD;AACA,8B;AACA,8B;AACA,gB;;AAEA,+B;;AAEA,wC;;AAEA,2B;;AAEA,oC;;AAEA,6C;AACA,yC;AACA,Q;AACA,O;AACA,M;;AAEA,iC;AACA,K;AACA,I;;AAEA,6B;AACA,I;;AAEA,2D;AACA,oC;AACA,qB;AACA,8B;AACA,0C;;AAEA,0C;AACA,sC;AACA,gD;AACA,yC;AACA,M;AACA,K;AACA,I;AACA,G;AACA,G;;AAEA,0C;AACA,+I;;AAEA,oD;AACA,yD;AACA,G;AACA,G;;AAEA,uD;AACA,kB;AACA,0C;;AAEA,kD;AACA,8B;AACA,G;;AAEA,e;AACA,yD;AACA,mC;AACA,G;;AAEA,iB;AACA,U;AACA,G;;AAEA,gD;AACA,yG;;AAEA,4C;AACA,8B;;AAEA,qC;AACA,wG;AACA,G;;AAEA,iC;;AAEA,a;AACA,U;AACA,G;;AAEA,a;AACA,oB;AACA,sB;AACA,oB;AACA,a;AACA,I;;AAEA,uC;;AAEA,6B;AACA,uC;;AAEA,qC;AACA,0E;;AAEA,sC;;AAEA,gD;;AAEA,2C;AACA,wC;AACA,K;;AAEA,sC;AACA,2B;AACA,kB;AACA,O;AACA,G;AACA,Q;AACA,yE;;AAEA,qC;;AAEA,+C;;AAEA,sC;;AAEA,uC;AACA,G;AACA,G;;AAEA,gD;AACA,yC;AACA,0D;AACA,G;;AAEA,8C;AACA,sB;;AAEA,sB;;AAEA,0B;;AAEA,a;AACA,4B;AACA,iC;AACA,I;;AAEA,uB;AACA,G;;AAEA,yC;AACA,0D;AACA,a;AACA,I;;AAEA,iC;AACA,0E;;AAEA,8C;AACA,8B;AACA,6B;AACA,uC;AACA,0B;AACA,2B;;AAEA,yC;;AAEA,6F;;AAEA,yB;;AAEA,uC;AACA,qD;AACA,sB;AACA,M;;AAEA,gC;AACA,e;AACA,M;;AAEA,2B;;AAEA,mC;;AAEA,iB;AACA,sB;AACA,0C;AACA,O;;AAEA,oD;AACA,gD;AACA,0B;AACA,uB;AACA,uC;AACA,iC;;AAEA,wB;;AAEA,mB;AACA,yB;AACA,O;;AAEA,uF;;AAEA,yB;;AAEA,kB;AACA,wB;AACA,O;;AAEA,iD;AACA,M;AACA,K;AACA,I;AACA,G;;AAEA,gB;AACA,G;;AAEA,S;AACA,U;;AAEA,kC;AACA,2B;;AAEA,mC;;AAEA,8B;AACA,I;;AAEA,6B;AACA,qC;;AAEA,yC;AACA,W;AACA,I;;AAEA,wD;AACA,kB;AACA,I;AACA,G;AACA,E;AACA,E;;AAEA,sD;AACA,kB;AACA,wB;AACA,oB;AACA,E;;AAEA,iD;AACA,4B;AACA,W;AACA,E;;AAEA,6D;AACA,kC;AACA,gD;AACA,c;AACA,E;;AAEA,Y;AACA,e;AACA,wD;AACA,c;AACA,6B;AACA,iB;AACA,qB;AACA,gB;AACA,G;;AAEA,6B;AACA,wC;AACA,E;;AAEA,e;AACA,uE;AACA,mD;AACA,E;;AAEA,0B;;AAEA,qB;;AAEA,mC;AACA,iE;AACA,E;;AAEA,0H;;AAEA,E;;AAEA,qB;AACA,8B;AACA,e;AACA,oB;AACA,E;AACA,c;AACA,iD;AACA,qC;AACA,8B;AACA,0B;;AAEA,uF;AACA,e;AACA,W;;AAEA,mB;AACA,C;;AAEA,mC;AACA,qD;;AAEA,mC;;AAEA,a;AACA,yB;;AAEA,wE;AACA,gE;AACA,E;AACA,C;;AAEA,kB;;AAEA,K;;AAEA,sD;AACA,wB;AACA,C;;;AAGA,iD;AACA,0B;AACA,iD;;AAEA,0B;AACA,+B;AACA,uB;AACA,4B;AACA,oC;AACA,S;AACA,6F;AACA,W;AACA,W;AACA,6B;AACA,a;AACA,4B;AACA,6B;AACA,K;AACA,K;AACA,kB;AACA,gD;AACA,a;AACA,4B;AACA,K;AACA,K;AACA,0B;AACA,iB;AACA,wB;AACA,a;AACA,6B;AACA,K;AACA,I;;AAEA,G;AACA,G;AACA,gC;AACA,E;;AAEA,0E;AACA,uC;;AAEA,6B;AACA,8D;AACA,E;AACA,G;;;AAGA,iD;AACA,uB;AACA,iD;;AAEA,uB;AACA,gC;AACA,Y;AACA,uC;AACA,W;AACA,yB;AACA,G;AACA,G;AACA,gC;AACA,4C;AACA,uC;AACA,8B;AACA,iC;AACA,4B;AACA,iC;AACA,E;;AAEA,6B;AACA,gD;AACA,Y;AACA,iD;AACA,Y;AACA,Y;AACA,4C;AACA,8C;AACA,M;AACA,6B;AACA,I;AACA,G;AACA,I;AACA,C;;AAEA,iD;AACA,yB;AACA,iD;;AAEA,yB;AACA,a;AACA,G;AACA,yC;AACA,mB;AACA,I;AACA,G;AACA,0C;AACA,mB;AACA,G;AACA,G;AACA,8B;AACA,gB;AACA,iH;AACA,mB;AACA,W;AACA,yB;AACA,G;AACA,G;AACA,wH;AACA,gC;AACA,c;AACA,4B;AACA,W;AACA,oB;AACA,G;AACA,G;AACA,0D;AACA,0E;AACA,6B;AACA,gC;AACA,E;;;AAGA,iD;AACA,8B;AACA,iD;;AAEA,8D;AACA,6T;AACA,wE;AACA,G;;AAEA,uD;AACA,W;AACA,uF;AACA,kB;AACA,E;AACA,G;;AAEA,6B;AACA,gD;AACA,a;AACA,mD;AACA,Y;AACA,Y;AACA,8C;AACA,8C;AACA,M;AACA,oC;AACA,I;AACA,G;AACA,I;AACA,C;;;AAGA,iD;AACA,kC;AACA,iD;;AAEA,Y;;AAEA,+D;AACA,Q;AACA,C;;AAEA,kB;AACA,oB;AACA,kB;AACA,iB;AACA,iB;AACA,e;AACA,E;;AAEA,8F;AACA,wC;AACA,qD;AACA,mD;AACA,C;AACA,2C;AACA,yC;AACA,C;AACA,sB;AACA,C;AACA,+B;AACA,C;AACA,uB;AACA,C;AACA,gC;AACA,C;AACA,4B;;AAEA,sC;AACA,4B;AACA,G;AACA,8C;AACA,wC;AACA,G;AACA,iC;AACA,I;AACA,gC;AACA,2F;AACA,I;AACA,S;AACA,kE;AACA,I;AACA,G;AACA,G;AACA,C;AACA,gB;AACA,G;;AAEA,K;;;;;;;;;;;;;;;ACnmBA,wD;AACA,a;AACA,yC;AACA,kB;AACA,G;AACA,Y;AACA,0B;AACA,mC;AACA,W;AACA,+C;AACA,uD;AACA,G;AACA,G;AACA,qI;AACA,G;;AAEA,iD;AACA,6C;AACA,oD;AACA,G;AACA,iD;AACA,oE;AACA,sD;AACA,G;;;;;;;;;;;;;;;ACvBA,uB;AACA,gC;AACA,Y;AACA,uC;AACA,W;AACA,yB;AACA,G;AACA,G;AACA,gC;AACA,4C;AACA,uC;AACA,8B;AACA,iC;AACA,4B;AACA,iC;AACA,E;;AAEA,6B;AACA,gD;AACA,Y;AACA,iD;AACA,Y;AACA,Y;AACA,4C;AACA,8C;AACA,M;AACA,6B;AACA,I;AACA,G;AACA,I;AACA,C;;;;;;;;;;;;;;AC9BA,8D;AACA,6T;AACA,wE;AACA,G;;AAEA,uD;AACA,W;AACA,uF;AACA,kB;AACA,E;AACA,G;;AAEA,6B;AACA,gD;AACA,a;AACA,mD;AACA,Y;AACA,Y;AACA,8C;AACA,8C;AACA,M;AACA,oC;AACA,I;AACA,G;AACA,I;AACA,C;;;;;;;;;;;;;;;ACzBA,0B;AACA,+B;AACA,uB;AACA,4B;AACA,oC;AACA,S;AACA,6F;AACA,W;AACA,W;AACA,6B;AACA,a;AACA,4B;AACA,6B;AACA,K;AACA,K;AACA,kB;AACA,gD;AACA,a;AACA,4B;AACA,K;AACA,K;AACA,0B;AACA,iB;AACA,wB;AACA,a;AACA,6B;AACA,K;AACA,I;;AAEA,G;AACA,G;AACA,gC;AACA,E;;AAEA,0E;AACA,uC;;AAEA,6B;AACA,8D;AACA,E;AACA,G;;;;;;;;;;;;;;;ACxCA,qE;AACA,a;AACA,kD;AACA,2C;AACA,G;AACA,+L;AACA,G;;AAEA,yD;AACA,c;AACA,8E;AACA,W;AACA,0E;AACA,8E;AACA,G;AACA,G;AACA,+D;AACA,G;;;;;;;;;;;;;;;ACjBA,wB;AACA,+B;AACA,W;AACA,wB;AACA,W;AACA,a;AACA,qB;AACA,a;AACA,wB;AACA,K;AACA,K;AACA,kB;AACA,gD;AACA,a;AACA,4B;AACA,K;AACA,K;AACA,iB;AACA,wB;AACA,a;AACA,6B;AACA,K;AACA,I;AACA,G;AACA,G;AACA,a;AACA,mC;AACA,W;AACA,W;AACA,8B;AACA,oB;AACA,K;AACA,c;AACA,wB;AACA,K;AACA,kB;AACA,gD;AACA,a;AACA,4B;AACA,K;AACA,K;AACA,iB;AACA,wB;AACA,a;AACA,6B;AACA,K;AACA,I;AACA,G;AACA,G;AACA,gC;AACA,E;;AAEA,0E;AACA,E;AACA,uC;;AAEA,6B;AACA,8D;AACA,E;AACA,G;AACA,E;;;;;;;;;;;;;;;AC5DA,6B;AACA,wE;AACA,uB;AACA,4B;AACA,oC;AACA,S;AACA,6F;AACA,W;AACA,W;AACA,6B;AACA,a;AACA,4B;AACA,6B;AACA,K;AACA,K;AACA,kB;AACA,gD;AACA,a;AACA,4B;AACA,K;AACA,K;AACA,0B;AACA,iB;AACA,wB;AACA,a;AACA,6B;AACA,K;AACA,I;;AAEA,G;AACA,G;AACA,iC;AACA,e;AACA,sG;AACA,W;AACA,a;AACA,oC;AACA,a;AACA,oC;AACA,6B;AACA,K;AACA,K;AACA,kB;AACA,gD;AACA,a;AACA,4B;AACA,K;AACA,K;AACA,0B;AACA,iB;AACA,wB;AACA,a;AACA,6B;AACA,K;AACA,I;;AAEA,G;AACA,G;AACA,iC;AACA,E;;AAEA,0E;AACA,E;AACA,uC;;AAEA,6B;AACA,8D;AACA,E;AACA,G;AACA,E;;AAEA,a;AACA,kD;;;;;;;;;;;;;;;;ACxEA,mD;AACA,6E;AACA,kC;AACA,0F;AACA,S;AACA,E;;AAEA,kD;AACA,wB;;AAEA,6B;AACA,qC;;AAEA,qD;AACA,oD;AACA,sC;;AAEA,sC;AACA,8F;AACA,E;;AAEA,6C;;AAEA,G;;;;;;;;;;;;;;;;;;ACvBA,Y;;AAEA,mB;AACA,Q;AACA,C;;AAEA,wB;AACA,6E;AACA,C;;AAEA,uC;AACA,oC;AACA,wF;AACA,C;;AAEA,8B;AACA,I;AACA,8C;AACA,mD;AACA,yD;AACA,C;AACA,+D;;AAEA,6C;AACA,2B;AACA,K;AACA,wB;AACA,+B;AACA,E;AACA,2C;AACA,E;AACA,0D;AACA,uD;;AAEA,gH;AACA,wC;AACA,6C;;AAEA,uB;AACA,2C;AACA,O;AACA,K;;AAEA,4D;;AAEA,4D;AACA,uC;AACA,yH;AACA,4B;AACA,Y;AACA,2D;AACA,K;AACA,E;AACA,C;;AAEA,sB;AACA,mC;AACA,C;AACA,uC;AACA,0D;AACA,oC;AACA,I;AACA,C;AACA,sD;AACA,C;AACA,+C;AACA,S;AACA,E;AACA,C;AACA,+C;AACA,uC;AACA,K;AACA,Y;AACA,S;AACA,E;AACA,C;AACA,sC;AACA,oC;AACA,E;;AAEA,0C;;AAEA,sE;AACA,C;;AAEA,wE;;AAEA,kD;AACA,kC;AACA,kD;AACA,C;AACA,oD;AACA,S;AACA,E;AACA,C;AACA,yB;AACA,C;AACA,qD;AACA,oC;AACA,I;AACA,C;AACA,4B;AACA,C;AACA,sC;AACA,G;;AAEA,0C;;AAEA,K;;;;;;;;;;;;;;;;;;;AC5GA,4E;AACA,oB;AACA,mC;;AAEA,oC;AACA,+B;;AAEA,qB;AACA,oC;AACA,+E;AACA,K;;AAEA,yC;AACA,iD;;AAEA,qD;AACA,0C;AACA,iB;AACA,8C;AACA,yC;AACA,K;;AAEA,M;AACA,uE;AACA,wE;AACA,O;;AAEA,4C;AACA,4C;AACA,8C;;AAEA,gD;AACA,iD;AACA,+B;;AAEA,mB;AACA,uC;AACA,yB;AACA,4B;AACA,uC;;AAEA,iC;AACA,mC;;AAEA,M;AACA,mB;AACA,mB;AACA,4C;AACA,yB;AACA,4B;AACA,kD;;AAEA,oF;AACA,+D;AACA,wB;AACA,M;;AAEA,M","sourcesContent":["\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\nself = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t? self // if in worker\n\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\nvar Prism = (function(){\n\n// Private helper vars\nvar lang = /\\blang(?:uage)?-(?!\\*)(\\w+)\\b/i;\n\nvar _ = self.Prism = {\n\tutil: {\n\t\tencode: function (tokens) {\n\t\t\tif (tokens instanceof Token) {\n\t\t\t\treturn new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n\t\t\t} else if (_.util.type(tokens) === 'Array') {\n\t\t\t\treturn tokens.map(_.util.encode);\n\t\t\t} else {\n\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t}\n\t\t},\n\n\t\ttype: function (o) {\n\t\t\treturn Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n\t\t},\n\n\t\t// Deep clone a language definition (e.g. to extend it)\n\t\tclone: function (o) {\n\t\t\tvar type = _.util.type(o);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Object':\n\t\t\t\t\tvar clone = {};\n\n\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tclone[key] = _.util.clone(o[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn clone;\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\treturn o.slice();\n\t\t\t}\n\n\t\t\treturn o;\n\t\t}\n\t},\n\n\tlanguages: {\n\t\textend: function (id, redef) {\n\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\tfor (var key in redef) {\n\t\t\t\tlang[key] = redef[key];\n\t\t\t}\n\n\t\t\treturn lang;\n\t\t},\n\n\t\t// Insert a token before another token in a language literal\n\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\troot = root || _.languages;\n\t\t\tvar grammar = root[inside];\n\t\t\tvar ret = {};\n\n\t\t\tfor (var token in grammar) {\n\n\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\tif (token == before) {\n\n\t\t\t\t\t\tfor (var newToken in insert) {\n\n\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn root[inside] = ret;\n\t\t},\n\n\t\t// Traverse a language definition with Depth First Search\n\t\tDFS: function(o, callback, type) {\n\t\t\tfor (var i in o) {\n\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\tif (_.util.type(o[i]) === 'Object') {\n\t\t\t\t\t\t_.languages.DFS(o[i], callback);\n\t\t\t\t\t} else if (_.util.type(o[i]) === 'Array') {\n\t\t\t\t\t\t_.languages.DFS(o[i], callback, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\thighlightAll: function(async, callback) {\n\t\tvar elements = document.querySelectorAll('code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code');\n\n\t\tfor (var i=0, element; element = elements[i++];) {\n\t\t\t_.highlightElement(element, async === true, callback);\n\t\t}\n\t},\n\n\thighlightElement: function(element, async, callback) {\n\t\t// Find language\n\t\tvar language, grammar, parent = element;\n\n\t\twhile (parent && !lang.test(parent.className)) {\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\tif (parent) {\n\t\t\tlanguage = (parent.className.match(lang) || [,''])[1];\n\t\t\tgrammar = _.languages[language];\n\t\t}\n\n\t\tif (!grammar) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Set language on the element, if not present\n\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n\t\t// Set language on the parent, for styling\n\t\tparent = element.parentNode;\n\n\t\tif (/pre/i.test(parent.nodeName)) {\n\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\t\t}\n\n\t\tvar code = element.textContent;\n\n\t\tif(!code) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar env = {\n\t\t\telement: element,\n\t\t\tlanguage: language,\n\t\t\tgrammar: grammar,\n\t\t\tcode: code\n\t\t};\n\n\t\t_.hooks.run('before-highlight', env);\n\n\t\tif (async && self.Worker) {\n\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\tworker.onmessage = function(evt) {\n\t\t\t\tenv.highlightedCode = Token.stringify(JSON.parse(evt.data), language);\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t};\n\n\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\tlanguage: env.language,\n\t\t\t\tcode: env.code\n\t\t\t}));\n\t\t}\n\t\telse {\n\t\t\tenv.highlightedCode = _.highlight(env.code, env.grammar, env.language)\n\n\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\tcallback && callback.call(element);\n\n\t\t\t_.hooks.run('after-highlight', env);\n\t\t}\n\t},\n\n\thighlight: function (text, grammar, language) {\n\t\tvar tokens = _.tokenize(text, grammar);\n\t\treturn Token.stringify(_.util.encode(tokens), language);\n\t},\n\n\ttokenize: function(text, grammar, language) {\n\t\tvar Token = _.Token;\n\n\t\tvar strarr = [text];\n\n\t\tvar rest = grammar.rest;\n\n\t\tif (rest) {\n\t\t\tfor (var token in rest) {\n\t\t\t\tgrammar[token] = rest[token];\n\t\t\t}\n\n\t\t\tdelete grammar.rest;\n\t\t}\n\n\t\ttokenloop: for (var token in grammar) {\n\t\t\tif(!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tvar pattern = patterns[j],\n\t\t\t\t\tinside = pattern.inside,\n\t\t\t\t\tlookbehind = !!pattern.lookbehind,\n\t\t\t\t\tlookbehindLength = 0,\n\t\t\t\t\talias = pattern.alias;\n\n\t\t\t\tpattern = pattern.pattern || pattern;\n\n\t\t\t\tfor (var i=0; i<strarr.length; i++) { // Don’t cache length as it changes during the loop\n\n\t\t\t\t\tvar str = strarr[i];\n\n\t\t\t\t\tif (strarr.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\tbreak tokenloop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tpattern.lastIndex = 0;\n\n\t\t\t\t\tvar match = pattern.exec(str);\n\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tif(lookbehind) {\n\t\t\t\t\t\t\tlookbehindLength = match[1].length;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index - 1 + lookbehindLength,\n\t\t\t\t\t\t\tmatch = match[0].slice(lookbehindLength),\n\t\t\t\t\t\t\tlen = match.length,\n\t\t\t\t\t\t\tto = from + len,\n\t\t\t\t\t\t\tbefore = str.slice(0, from + 1),\n\t\t\t\t\t\t\tafter = str.slice(to + 1);\n\n\t\t\t\t\t\tvar args = [i, 1];\n\n\t\t\t\t\t\tif (before) {\n\t\t\t\t\t\t\targs.push(before);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias);\n\n\t\t\t\t\t\targs.push(wrapped);\n\n\t\t\t\t\t\tif (after) {\n\t\t\t\t\t\t\targs.push(after);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tArray.prototype.splice.apply(strarr, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn strarr;\n\t},\n\n\thooks: {\n\t\tall: {},\n\n\t\tadd: function (name, callback) {\n\t\t\tvar hooks = _.hooks.all;\n\n\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\thooks[name].push(callback);\n\t\t},\n\n\t\trun: function (name, env) {\n\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {\n\t\t\t\tcallback(env);\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar Token = _.Token = function(type, content, alias) {\n\tthis.type = type;\n\tthis.content = content;\n\tthis.alias = alias;\n};\n\nToken.stringify = function(o, language, parent) {\n\tif (typeof o == 'string') {\n\t\treturn o;\n\t}\n\n\tif (Object.prototype.toString.call(o) == '[object Array]') {\n\t\treturn o.map(function(element) {\n\t\t\treturn Token.stringify(element, language, o);\n\t\t}).join('');\n\t}\n\n\tvar env = {\n\t\ttype: o.type,\n\t\tcontent: Token.stringify(o.content, language, parent),\n\t\ttag: 'span',\n\t\tclasses: ['token', o.type],\n\t\tattributes: {},\n\t\tlanguage: language,\n\t\tparent: parent\n\t};\n\n\tif (env.type == 'comment') {\n\t\tenv.attributes['spellcheck'] = 'true';\n\t}\n\n\tif (o.alias) {\n\t\tvar aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];\n\t\tArray.prototype.push.apply(env.classes, aliases);\n\t}\n\n\t_.hooks.run('wrap', env);\n\n\tvar attributes = '';\n\n\tfor (var name in env.attributes) {\n\t\tattributes += name + '=\"' + (env.attributes[name] || '') + '\"';\n\t}\n\n\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\" ' + attributes + '>' + env.content + '</' + env.tag + '>';\n\n};\n\nif (!self.document) {\n\tif (!self.addEventListener) {\n\t\t// in Node.js\n\t\treturn self.Prism;\n\t}\n \t// In worker\n\tself.addEventListener('message', function(evt) {\n\t\tvar message = JSON.parse(evt.data),\n\t\t    lang = message.language,\n\t\t    code = message.code;\n\n\t\tself.postMessage(JSON.stringify(_.util.encode(_.tokenize(code, _.languages[lang]))));\n\t\tself.close();\n\t}, false);\n\n\treturn self.Prism;\n}\n\n// Get current script and highlight\nvar script = document.getElementsByTagName('script');\n\nscript = script[script.length - 1];\n\nif (script) {\n\t_.filename = script.src;\n\n\tif (document.addEventListener && !script.hasAttribute('data-manual')) {\n\t\tdocument.addEventListener('DOMContentLoaded', _.highlightAll);\n\t}\n}\n\nreturn self.Prism;\n\n})();\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': /<!--[\\w\\W]*?-->/g,\n\t'prolog': /<\\?.+?\\?>/,\n\t'doctype': /<!DOCTYPE.+?>/,\n\t'cdata': /<!\\[CDATA\\[[\\w\\W]*?]]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?[\\w:-]+\\s*(?:\\s+[\\w:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|[^\\s'\">=]+))?\\s*)*\\/?>/gi,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[\\w:-]+/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[\\w-]+?:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/gi,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /=|>|\"/g\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/g,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[\\w:-]+/g,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[\\w-]+?:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': /\\&#?[\\da-z]{1,8};/gi\n};\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function(env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\nPrism.languages.css = {\n\t'comment': /\\/\\*[\\w\\W]*?\\*\\//g,\n\t'atrule': {\n\t\tpattern: /@[\\w-]+?.*?(;|(?=\\s*{))/gi,\n\t\tinside: {\n\t\t\t'punctuation': /[;:]/g\n\t\t}\n\t},\n\t'url': /url\\(([\"']?).*?\\1\\)/gi,\n\t'selector': /[^\\{\\}\\s][^\\{\\};]*(?=\\s*\\{)/g,\n\t'property': /(\\b|\\B)[\\w-]+(?=\\s*:)/ig,\n\t'string': /(\"|')(\\\\?.)*?\\1/g,\n\t'important': /\\B!important\\b/gi,\n\t'punctuation': /[\\{\\};:]/g,\n\t'function': /[-a-z0-9]+(?=\\()/ig\n};\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'style': {\n\t\t\tpattern: /<style[\\w\\W]*?>[\\w\\W]*?<\\/style>/ig,\n\t\t\tinside: {\n\t\t\t\t'tag': {\n\t\t\t\t\tpattern: /<style[\\w\\W]*?>|<\\/style>/ig,\n\t\t\t\t\tinside: Prism.languages.markup.tag.inside\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.css\n\t\t\t}\n\t\t}\n\t});\n}\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\w\\W]*?\\*\\//g,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*?(\\r?\\n|$)/g,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'string': /(\"|')(\\\\?.)*?\\1/g,\n\t'class-name': {\n\t\tpattern: /((?:(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[a-z0-9_\\.\\\\]+/ig,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\tpunctuation: /(\\.|\\\\)/\n\t\t}\n\t},\n\t'keyword': /\\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/g,\n\t'boolean': /\\b(true|false)\\b/g,\n\t'function': {\n\t\tpattern: /[a-z0-9_]+\\(/ig,\n\t\tinside: {\n\t\t\tpunctuation: /\\(/\n\t\t}\n\t},\n\t'number': /\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee]-?\\d+)?)\\b/g,\n\t'operator': /[-+]{1,2}|!|<=?|>=?|={1,3}|&{1,2}|\\|?\\||\\?|\\*|\\/|\\~|\\^|\\%/g,\n\t'ignore': /&(lt|gt|amp);/gi,\n\t'punctuation': /[{}[\\];(),.:]/g\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'keyword': /\\b(break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|get|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|set|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/g,\n\t'number': /\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee]-?\\d+)?|NaN|-?Infinity)\\b/g\n});\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/g,\n\t\tlookbehind: true\n\t}\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'script': {\n\t\t\tpattern: /<script[\\w\\W]*?>[\\w\\W]*?<\\/script>/ig,\n\t\t\tinside: {\n\t\t\t\t'tag': {\n\t\t\t\t\tpattern: /<script[\\w\\W]*?>|<\\/script>/ig,\n\t\t\t\t\tinside: Prism.languages.markup.tag.inside\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.javascript\n\t\t\t}\n\t\t}\n\t});\n}\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function(){\n\nif (!self.Prism || !self.document || !document.querySelector) {\n\treturn;\n}\n\nvar Extensions = {\n\t'js': 'javascript',\n\t'html': 'markup',\n\t'svg': 'markup',\n\t'xml': 'markup',\n\t'py': 'python'\n};\n\nArray.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function(pre) {\n\tvar src = pre.getAttribute('data-src');\n\tvar extension = (src.match(/\\.(\\w+)$/) || [,''])[1];\n\tvar language = Extensions[extension] || extension;\n\t\n\tvar code = document.createElement('code');\n\tcode.className = 'language-' + language;\n\t\n\tpre.textContent = '';\n\t\n\tcode.textContent = 'Loading…';\n\t\n\tpre.appendChild(code);\n\t\n\tvar xhr = new XMLHttpRequest();\n\t\n\txhr.open('GET', src, true);\n\n\txhr.onreadystatechange = function() {\n\t\tif (xhr.readyState == 4) {\n\t\t\t\n\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\tcode.textContent = xhr.responseText;\n\t\t\t\n\t\t\t\tPrism.highlightElement(code);\n\t\t\t}\n\t\t\telse if (xhr.status >= 400) {\n\t\t\t\tcode.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcode.textContent = '✖ Error: File does not exist or is empty';\n\t\t\t}\n\t\t}\n\t};\n\t\n\txhr.send(null);\n});\n\n})();\n","Prism.languages.bash = Prism.languages.extend('clike', {\n\t'comment': {\n\t\tpattern: /(^|[^\"{\\\\])(#.*?(\\r?\\n|$))/g,\n\t\tlookbehind: true\n\t},\n\t'string': {\n\t\t//allow multiline string\n\t\tpattern: /(\"|')(\\\\?[\\s\\S])*?\\1/g,\n\t\tinside: {\n\t\t\t//'property' class reused for bash variables\n\t\t\t'property': /\\$([a-zA-Z0-9_#\\?\\-\\*!@]+|\\{[^\\}]+\\})/g\n\t\t}\n\t},\n\t'keyword': /\\b(if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)\\b/g\n});\n\nPrism.languages.insertBefore('bash', 'keyword', {\n\t//'property' class reused for bash variables\n\t'property': /\\$([a-zA-Z0-9_#\\?\\-\\*!@]+|\\{[^}]+\\})/g\n});\nPrism.languages.insertBefore('bash', 'comment', {\n\t//shebang must be before comment, 'important' class from css reused\n\t'important': /(^#!\\s*\\/bin\\/bash)|(^#!\\s*\\/bin\\/sh)/g\n});\n","Prism.languages.css = {\n\t'comment': /\\/\\*[\\w\\W]*?\\*\\//g,\n\t'atrule': {\n\t\tpattern: /@[\\w-]+?.*?(;|(?=\\s*{))/gi,\n\t\tinside: {\n\t\t\t'punctuation': /[;:]/g\n\t\t}\n\t},\n\t'url': /url\\(([\"']?).*?\\1\\)/gi,\n\t'selector': /[^\\{\\}\\s][^\\{\\};]*(?=\\s*\\{)/g,\n\t'property': /(\\b|\\B)[\\w-]+(?=\\s*:)/ig,\n\t'string': /(\"|')(\\\\?.)*?\\1/g,\n\t'important': /\\B!important\\b/gi,\n\t'punctuation': /[\\{\\};:]/g,\n\t'function': /[-a-z0-9]+(?=\\()/ig\n};\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'style': {\n\t\t\tpattern: /<style[\\w\\W]*?>[\\w\\W]*?<\\/style>/ig,\n\t\t\tinside: {\n\t\t\t\t'tag': {\n\t\t\t\t\tpattern: /<style[\\w\\W]*?>|<\\/style>/ig,\n\t\t\t\t\tinside: Prism.languages.markup.tag.inside\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.css\n\t\t\t}\n\t\t}\n\t});\n}","Prism.languages.javascript = Prism.languages.extend('clike', {\n\t'keyword': /\\b(break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|get|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|set|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/g,\n\t'number': /\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee]-?\\d+)?|NaN|-?Infinity)\\b/g\n});\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/g,\n\t\tlookbehind: true\n\t}\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'script': {\n\t\t\tpattern: /<script[\\w\\W]*?>[\\w\\W]*?<\\/script>/ig,\n\t\t\tinside: {\n\t\t\t\t'tag': {\n\t\t\t\t\tpattern: /<script[\\w\\W]*?>|<\\/script>/ig,\n\t\t\t\t\tinside: Prism.languages.markup.tag.inside\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.javascript\n\t\t\t}\n\t\t}\n\t});\n}\n","Prism.languages.markup = {\n\t'comment': /<!--[\\w\\W]*?-->/g,\n\t'prolog': /<\\?.+?\\?>/,\n\t'doctype': /<!DOCTYPE.+?>/,\n\t'cdata': /<!\\[CDATA\\[[\\w\\W]*?]]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?[\\w:-]+\\s*(?:\\s+[\\w:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|[^\\s'\">=]+))?\\s*)*\\/?>/gi,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[\\w:-]+/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[\\w-]+?:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/gi,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /=|>|\"/g\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/g,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[\\w:-]+/g,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[\\w-]+?:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': /\\&#?[\\da-z]{1,8};/gi\n};\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function(env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n","Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n\t'comment': [\n\t\t/([#]{3}\\s*\\r?\\n(.*\\s*\\r*\\n*)\\s*?\\r?\\n[#]{3})/g,\n\t\t/(\\s|^)([#]{1}[^#^\\r^\\n]{2,}?(\\r?\\n|$))/g\n\t],\n\t'keyword': /\\b(this|window|delete|class|extends|namespace|extend|ar|let|if|else|while|do|for|each|of|return|in|instanceof|new|with|typeof|try|catch|finally|null|undefined|break|continue)\\b/g\n});\n\nPrism.languages.insertBefore('coffeescript', 'keyword', {\n\t'function': {\n\t\tpattern: /[a-z|A-z]+\\s*[:|=]\\s*(\\([.|a-z\\s|,|:|{|}|\\\"|\\'|=]*\\))?\\s*-&gt;/gi,\n\t\tinside: {\n\t\t\t'function-name': /[_?a-z-|A-Z-]+(\\s*[:|=])| @[_?$?a-z-|A-Z-]+(\\s*)| /g,\n\t\t\t'operator': /[-+]{1,2}|!|=?&lt;|=?&gt;|={1,2}|(&amp;){1,2}|\\|?\\||\\?|\\*|\\//g\n\t\t}\n\t},\n\t'attr-name': /[_?a-z-|A-Z-]+(\\s*:)| @[_?$?a-z-|A-Z-]+(\\s*)| /g\n});\n","Prism.languages.jade = {\n\t'comment': /^[\\t ]*\\/\\/.*$/gm,\n\t'mixin': {\n\t\tpattern: /\\+\\w+.*$/gm,\n\t\tinside: {\n\t\t\t'regex': {\n\t\t\t\tpattern: /\\+\\w+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\+/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/gi,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /=|>|\"/g\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[\\w:-]+/g,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[\\w-]+?:/\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t'tagLine': {\n\t\tpattern: /\\n[\\t ]*\\w+[\\( ].*$/gm,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /(\\n[\\t ]*)\\w+/m,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\\b\\w+\\b/g,\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/gi,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /=|>|\"/g\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[\\w:-]+/g,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[\\w-]+?:/\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t'entity': /\\&#?[\\da-z]{1,8};/gi\n};\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\n/*\nPrism.hooks.add('wrap', function(env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n*/\n","Prism.languages.spacebars = {\n\t'comment': /<!--[\\w\\W]*?-->|\\{\\{!--[\\w\\W]*?--\\}\\}|\\{\\{! [\\w\\W]*?\\}\\}/g,\n\t'prolog': /<\\?.+?\\?>/,\n\t'doctype': /<!DOCTYPE.+?>/,\n\t'cdata': /<!\\[CDATA\\[[\\w\\W]*?]]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?[\\w:-]+\\s*(?:\\s+[\\w:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|[^\\s'\">=]+))?\\s*)*\\/?>/gi,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[\\w:-]+/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[\\w-]+?:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/gi,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /=|>|\"/g\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/g,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[\\w:-]+/g,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[\\w-]+?:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': /\\&#?[\\da-z]{1,8};/gi,\n\t'spacebars': {\n\t\tpattern: /\\{\\{[\\/\\#\\>]?[\\w:-]+\\s*(?:\\s+[\\w:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|[^\\s'\">=]+))?\\s*)*\\}\\}/gi,\n\t\tinside: {\n\t\t\t'regex': {\n\t\t\t\tpattern: /\\{\\{[\\/\\#\\>]?[\\w:-]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\{\\{[\\/\\#\\>]?/,\n\t\t\t\t\t'namespace': /^[\\w-]+?:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/gi,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /=|>|\"/g\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\}\\}/g,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[\\w:-]+/g,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[\\w-]+?:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': /\\&#?[\\da-z]{1,8};/gi,\n};\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\n/*\nPrism.hooks.add('wrap', function(env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n*/\n\n// Deprecated\nPrism.languages.blaze = Prism.languages.spacebars;\n","Prism.hooks.add('after-highlight', function (env) {\n\t// works only for <code> wrapped inside <pre data-line-numbers> (not inline)\n\tvar pre = env.element.parentNode;\n\tif (!pre || !/pre/i.test(pre.nodeName) || pre.className.indexOf('line-numbers') === -1) {\n\t\treturn;\n\t}\n\n\tvar linesNum = (1 + env.code.split('\\n').length);\n\tvar lineNumbersWrapper;\n\n\tlines = new Array(linesNum);\n\tlines = lines.join('<span></span>');\n\n\tlineNumbersWrapper = document.createElement('span');\n\tlineNumbersWrapper.className = 'line-numbers-rows';\n\tlineNumbersWrapper.innerHTML = lines;\n\n\tif (pre.hasAttribute('data-start')) {\n\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n\t}\n\n\tenv.element.appendChild(lineNumbersWrapper);\n\n});","(function(){\n\nif(!window.Prism) {\n\treturn;\n}\n\nfunction $$(expr, con) {\n\treturn Array.prototype.slice.call((con || document).querySelectorAll(expr));\n}\n\nfunction hasClass(element, className) {\n  className = \" \" + className + \" \";\n  return (\" \" + element.className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(className) > -1\n}\n\nvar CRLF = crlf = /\\r?\\n|\\r/g;\n    \nfunction highlightLines(pre, lines, classes) {\n\tvar ranges = lines.replace(/\\s+/g, '').split(','),\n\t    offset = +pre.getAttribute('data-line-offset') || 0;\n\t\n\tvar lineHeight = parseFloat(getComputedStyle(pre).lineHeight);\n\n\tfor (var i=0, range; range = ranges[i++];) {\n\t\trange = range.split('-');\n\t\t\t\t\t\n\t\tvar start = +range[0],\n\t\t    end = +range[1] || start;\n\t\t\n\t\tvar line = document.createElement('div');\n\t\t\n\t\tline.textContent = Array(end - start + 2).join(' \\r\\n');\n\t\tline.className = (classes || '') + ' line-highlight';\n\n    //if the line-numbers plugin is enabled, then there is no reason for this plugin to display the line numbers\n    if(!hasClass(pre, 'line-numbers')) {\n      line.setAttribute('data-start', start);\n\n      if(end > start) {\n        line.setAttribute('data-end', end);\n      }\n    }\n\n\t\tline.style.top = (start - offset - 1) * lineHeight + 'px';\n\n    //allow this to play nicely with the line-numbers plugin\n    if(hasClass(pre, 'line-numbers')) {\n      //need to attack to pre as when line-numbers is enabled, the code tag is relatively which screws up the positioning\n      pre.appendChild(line);\n    } else {\n      (pre.querySelector('code') || pre).appendChild(line);\n    }\n\t}\n}\n\nfunction applyHash() {\n\tvar hash = location.hash.slice(1);\n\t\n\t// Remove pre-existing temporary lines\n\t$$('.temporary.line-highlight').forEach(function (line) {\n\t\tline.parentNode.removeChild(line);\n\t});\n\t\n\tvar range = (hash.match(/\\.([\\d,-]+)$/) || [,''])[1];\n\t\n\tif (!range || document.getElementById(hash)) {\n\t\treturn;\n\t}\n\t\n\tvar id = hash.slice(0, hash.lastIndexOf('.')),\n\t    pre = document.getElementById(id);\n\t    \n\tif (!pre) {\n\t\treturn;\n\t}\n\t\n\tif (!pre.hasAttribute('data-line')) {\n\t\tpre.setAttribute('data-line', '');\n\t}\n\n\thighlightLines(pre, range, 'temporary ');\n\n\tdocument.querySelector('.temporary.line-highlight').scrollIntoView();\n}\n\nvar fakeTimer = 0; // Hack to limit the number of times applyHash() runs\n\nPrism.hooks.add('after-highlight', function(env) {\n\tvar pre = env.element.parentNode;\n\tvar lines = pre && pre.getAttribute('data-line');\n\t\n\tif (!pre || !lines || !/pre/i.test(pre.nodeName)) {\n\t\treturn;\n\t}\n\t\n\tclearTimeout(fakeTimer);\n\t\n\t$$('.line-highlight', pre).forEach(function (line) {\n\t\tline.parentNode.removeChild(line);\n\t});\n\t\n\thighlightLines(pre, lines);\n\t\n\tfakeTimer = setTimeout(applyHash, 1);\n});\n\naddEventListener('hashchange', applyHash);\n\n})();\n","  Blaze.Template.registerHelper(\"prism\", new Template('prism', function () {\n    var view = this;\n    var data = Blaze.getData(view);\n\n    if (!data.language && data.lang)\n    \tdata.language = data.lang;\n\n    var content = '';\n    if (view.templateContentBlock) {\n      content = Blaze._toText(view.templateContentBlock, HTML.TEXTMODE.STRING);\n    }\n\n    // strip blank first line / last line\n    content = content.replace(/^\\n|\\n\\s*$/g, '');\n\n    // deindent by first indent (TODO, make optional)\n    var indent = content.match(/^[\\t ]+/);\n    if (indent) {\n\t\t\tindent = new RegExp('^' + indent[0], 'gm');\n\t\t\tcontent = content.replace(indent, '');\n    }\n\n    /*\n     * This following approach - construction inside a real div - works\n     * better overall.  It looks like some prism plugins rely on it too.\n     */\n\n    var div = document.createElement('div');\n    var pre = document.createElement('pre');\n    var code = document.createElement('code');\n\n    div.appendChild(pre); pre.appendChild(code);\n    code.className = \"language-\" + data.language;\n    code.textContent = content;\n\n    if (data.class)\n    \tpre.className += ' ' + data.class;\n    for (var key in data)\n    \tif (/^data-/.test(key))\n    \t\tpre.setAttribute(key, data[key]);\n\n    Prism.highlightElement(code);\n    return HTML.Raw(div.innerHTML);\n\n    /*\n    var extra = '';\n    if (data.class)\n    \textra += ' class=\"' + data.class + '\"';\n    for (var key in data)\n    \tif (/^data-/.test(key))\n    \t\textra += ' ' + key + '=\"' + data[key] + '\"';\n\n    return HTML.Raw('<pre' + extra +'><code class=\"language-' + data.language + '\">'\n    \t+ Prism.highlight(content, Prism.languages[data.language])\n    \t+ '</code></pre>');\n    */\n\n  }));\n"]}